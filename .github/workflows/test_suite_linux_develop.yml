name: Linux build (develop)

on:
  schedule:
    - cron:  '0 23 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
jobs:
  webots-build:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test webots build') }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         fetch-depth: 15
         ref: develop
    - name: Install Webots Compilation Dependencies
      run: |
        sudo scripts/install/linux_compilation_dependencies.sh
    - name: Build Webots
      run: |
        export LIBGL_ALWAYS_SOFTWARE=true
        xvfb-run --auto-servernum make webots_target -j4
  build:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'test distribution') || contains(github.event.pull_request.labels.*.name, 'test suite') || contains(github.event.pull_request.labels.*.name, 'test ros') || contains(github.event.pull_request.labels.*.name, 'test worlds') }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        include:
          - os: ubuntu-20.04
            JAVA_VERSION: "16"
            ROS_DISTRO: "noetic"
          - os: ubuntu-22.04
            JAVA_VERSION: "18"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         fetch-depth: 15
         ref: develop
    - name: Install Webots Compilation Dependencies
      run: |
        sudo scripts/install/linux_optional_compilation_dependencies.sh
    - name: Set Commit SHA in Version
      if: ${{ github.event_name == 'schedule' }}
      run: python scripts/packaging/set_commit_and_date_in_version.py $(git log -1 --format='%H')
    - name: Webots Package Creation
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-${{ matrix.JAVA_VERSION }}-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        export LIBGL_ALWAYS_SOFTWARE=true
        export ROS_DISTRO=${{ matrix.ROS_DISTRO }}
        xvfb-run --auto-servernum make distrib -j4
    - name: Prepare Webots Controller Deployment
      if: ${{ (github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'deploy libcontroller')) && matrix.os == 'ubuntu-20.04' }}
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.WEBOTS_CONTROLLER_DEPLOY_KEY }}
    - name: Deploy Webots Controller
      if: ${{ (github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'deploy libcontroller')) && matrix.os == 'ubuntu-20.04' }}
      run: scripts/packaging/sync_controller_lib.sh
    - name: Create/Update GitHub release
      if: ${{ matrix.os == 'ubuntu-20.04' && (github.event_name == 'push' || github.event_name == 'schedule') }}
      run: |
        sudo python -m pip install requests PyGithub
        scripts/packaging/publish_release.py --key=${{ secrets.GITHUB_TOKEN }} --repo=${{ github.repository }} --branch=${{ github.ref }} --commit=$(git log -1 --format='%H') --tag=${{ github.ref }}
    - uses: actions/upload-artifact@v2
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test suite') || contains(github.event.pull_request.labels.*.name, 'test ros') || contains(github.event.pull_request.labels.*.name, 'test worlds') }}
      with:
        name: build-${{ matrix.os }}
        path: |
          distribution/*.tar.bz2
          distribution/*.zip
    - uses: actions/upload-artifact@v2
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'test suite') && !contains(github.event.pull_request.labels.*.name, 'test ros') && !contains(github.event.pull_request.labels.*.name, 'test worlds') }}
      with:
        name: build-${{ matrix.os }}
        path: |
          distribution/*.tar.bz2
          distribution/*.deb
          distribution/*.zip
  test-suite:
    needs: build
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test suite') || github.event_name == 'schedule' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
         ref: develop
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-ubuntu-20.04
        path: artifact
    - name: Extract Webots
      run: tar xjf artifact/webots-*-x86-64*.tar.bz2 -C artifact
    - name: Install Webots Dependencies
      run: sudo scripts/install/linux_test_dependencies.sh --exclude-ros
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Test Suite
      run: |
        export LIBGL_ALWAYS_SOFTWARE=true
        export WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=true
        xvfb-run --auto-servernum python scripts/packaging/update_urls.py $(git log -1 --format='%H')
        export WEBOTS_HOME=$PWD/artifact/webots
        export TESTS_HOME=$PWD # required by cache group in the test suite
        export BRANCH_HASH=$(git log -1 --format='%H')
        xvfb-run --auto-servernum python tests/test_suite.py
  test-ros:
    needs: build
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test ros') || github.event_name == 'schedule' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            ROS_DISTRO: noetic
            python: 3.8
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: true
         ref: develop
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-${{ matrix.os }}
        path: artifact
    - name: Extract Webots
      run: tar xjf artifact/webots-*-x86-64*.tar.bz2 -C artifact
    - name: Install Webots Dependencies
      run: sudo scripts/install/linux_test_dependencies.sh
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Run Test
      run: |
        export WEBOTS_HOME=$PWD/artifact/webots
        export ROS_DISTRO=${{ matrix.ROS_DISTRO }}
        python -m pip install rospkg catkin_pkg empy defusedxml netifaces
        Xvfb :99 &
        export DISPLAY=:99
        ./tests/ros.sh
      timeout-minutes: 15
  test-worlds:
    needs: build
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test worlds') || github.event_name == 'schedule' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
         ref: develop
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-ubuntu-20.04
        path: artifact
    - name: Extract Webots and Cache
      run: |
        tar xjf artifact/webots-*-x86-64*.tar.bz2 -C artifact
        mkdir -p ~/.cache/Cyberbotics/Webots/
        unzip -q artifact/assets-*.zip -d ~/.cache/Cyberbotics/Webots/assets
    - name: Install Webots Dependencies
      run: sudo scripts/install/linux_runtime_dependencies.sh
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Update World, Check Warnings and Validate Cache
      run: |
        git config --global user.name ${GITHUB_ACTOR}
        git config --global user.email ${GITHUB_ACTOR}@github.com
        export LIBGL_ALWAYS_SOFTWARE=true
        export WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=true
        xvfb-run --auto-servernum python scripts/packaging/update_urls.py $(git log -1 --format='%H')
        git add -u && git commit -m "Fake-commit the updated urls so that no diff exists prior to running the test"
        export WEBOTS_HOME=$PWD/artifact/webots
        if [[ -d ~/.cache/Cyberbotics/Webots/assets/ ]]; then cached_files_before=$(ls ~/.cache/Cyberbotics/Webots/assets/ | wc -l); else cached_files_before=0; fi
        xvfb-run --auto-servernum python tests/test_worlds.py
        if [[ "$(git diff --name-only *.wbt *.wbproj | wc -l)" -ne "0" ]]; then echo Some world and/or wbproj files are not up to date: "$(git diff *.wbt *.wbproj)"; exit -1; fi
        if [[ -d ~/.cache/Cyberbotics/Webots/assets/ ]]; then cached_files_after=$(ls ~/.cache/Cyberbotics/Webots/assets/ | wc -l); else cached_files_after=0; fi
        # Note: need an offset of 22 because world 'url.wbt' uses non-cached assets on purpose
        if [ "$cached_files_after" -ne "$((cached_files_before + 22))" ]; then
          echo "Some assets are not included in the cache (before $cached_files_before, after $cached_files_after)";
          exit 1
        fi
  delete-artifacts:
    needs: [build, test-suite, test-ros, test-worlds]
    if: ${{ always() && !contains(github.event.pull_request.labels.*.name, 'test distribution')  && !contains(github.event.pull_request.labels.*.name, 'test webots build') }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    runs-on: ubuntu-latest
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: build-${{ matrix.os }}
