#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# This bounding object with a pipe shape is formed by a group of boxes.

PROTO PipeBoundingObject [
  field SFFloat    height          2       # Defines the height of the pipe.
  field SFFloat    radius          1       # Defines the radius of the pipe.
  field SFFloat    thickness       0.1     # Defines the thickness of the pipe.
  field SFInt32    subdivision     24      # Defines the number of polygons used to represent the pipe and so its resolution.
  field SFFloat    accuracy        0.0001  # Defines how much boxes position can differ on y axis: a 0 value represents an error-free model but it will slow down the simulation.
]
{
  %{
    local wbrandom = require('wbrandom')

    -- parameter checking
    local subdivision = fields.subdivision.value
    if subdivision > 200 then
      io.stderr:write("High value for 'subdivision'. This can slow down the simulation\n")
    elseif subdivision < 8 then
      io.stderr:write("'subdivision' must be greater than or equal to 8\n")
      subdivision = 8
    end

    local height = fields.height.value
    if height <= 0 then
      io.stderr:write("'height' must be greater than 0\n")
      height = fields.height.defaultValue
    end

    local radius = fields.radius.value
    if radius <= 0 then
      io.stderr:write("'radius' must be greater than 0\n")
      radius = fields.radius.defaultValue
    end

    local thickness = fields.thickness.value
    if thickness <= 0 then
      io.stderr:write("'thickness' must be greater than 0\n")
      thickness = radius / 2
    elseif thickness >= fields.radius.value then
      io.stderr:write("'thickness' must be smaller than 'radius'\n")
      thickness = radius / 2
    end

    -- global stuff before entering in the main loop
    local beta = 2.0 * math.pi / subdivision
    local alpha = beta / 2.0
    local innerRadius = radius - thickness
    local su = radius * math.cos(alpha) - innerRadius
    if su < 0 then
      -- fixed edge case:
      --   There are 2 inner radius, depending if we measure it along the center or along the edge of the boxes.
      --   If the thickness is below the difference of these two radius, then the algorithm can not achieve.
      io.stderr:write("Either 'thickness' or 'subdivision' are too small for the box subdivision algorithm.\n")
      su = math.abs(su)
    end
    local sv = height
    local sw = radius * math.sin(alpha) * 2.0
    local boxRadius = innerRadius + su / 2.0
  }%
  Group { # set of boxes
    children [
      %{ for i = 0, (subdivision - 1) do }%
        %{
          -- position of an internal box
          local gamma = beta * i + beta / 2
          local ax = boxRadius * math.sin(gamma)
          local ay = 0
          local az = boxRadius * math.cos(gamma)
          local angle = gamma + 0.5 * math.pi
          -- add small offset to boxes y translation to reduce constraints
          -- on the top and bottm face due to co-planarity
          local offset = wbrandom.real(-1.0, 1.0) * fields.accuracy.value;
        }%
        Transform {
          translation %{= ax}% %{= ay + offset }% %{= az}%
          rotation 0 1 0 %{= angle }%
          children [
            Box {
              size %{= su}% %{= sv}% %{= sw}%
            }
          ]
        }
      %{ end }%
    ]
  }
}
