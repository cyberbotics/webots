#VRML_SIM R2023b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# documentation url: https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/vehicles/protos/generic/ScooterSimple.proto
# keywords: vehicle/two wheel
# Simple non-controllable model of a generic scooter without physics properties.
# template language: javascript

EXTERNPROTO "ScooterDriver.proto"
EXTERNPROTO "ScooterMesh.proto"
EXTERNPROTO "ScooterFrontLight.proto"
EXTERNPROTO "ScooterBackwardsLight.proto"
EXTERNPROTO "ScooterRightIndicator.proto"
EXTERNPROTO "ScooterLeftIndicator.proto"
EXTERNPROTO "ScooterWheel.proto"

PROTO ScooterSimple [
  field       SFVec3f    translation                0 0 0.23                           # Is `Pose.translation`.
  field       SFRotation rotation                   0 0 1 0                            # Is `Pose.rotation`.
  field       SFColor    primaryColor               0.43 0.11 0.1                      # Defines the primary color of the scooter.
  field       SFColor    secondaryColor             0.69 0.43 0.43                     # Defines the secondary color of the scooter.
  field       MFColor    recognitionColors          [ 0.43 0.11 0.1, 0.69 0.43 0.43 ]  # Is `Solid.recognitionColors`.
  field       SFNode     driver                     ScooterDriver { }                  # Defines a `Slot` node for the scooter driver.
  field       SFString   name                       "vehicle"                          # Is `Solid.name`.
  field       SFBool     wheelBoundingObject        FALSE                              # Defines whether the wheels should have a bounding object.
  hiddenField SFVec3f    frontWheelAngularVelocity  0 0 0
  hiddenField SFVec3f    rearWheelAngularVelocity   0 0 0
]
{
  Solid {
    translation IS translation
    rotation IS rotation
    recognitionColors IS recognitionColors # somehow duplicate with the color field, but useful to avoid lua PROTO regeneration when colors change.
    children [
      Pose {
        children [
          DEF DRIVER Slot {
            type "scooter driver"
            endPoint IS driver
          }
          ScooterMesh {
            primaryColor IS primaryColor
            secondaryColor IS secondaryColor
          }
          ScooterFrontLight {
          }
          ScooterBackwardsLight {
          }
          ScooterRightIndicator {
          }
          ScooterLeftIndicator {
          }
          DEF FRONT_WHEEL Solid {
            angularVelocity IS frontWheelAngularVelocity
            translation 1.484 0 0
            children [
              Slot {
                type "vehicle wheel"
                endPoint ScooterWheel {
                  boundingObject IS wheelBoundingObject
                }
              }
            ]
            name "front wheel"
          }
          DEF REAR_WHEEL Solid {
            angularVelocity IS rearWheelAngularVelocity
            children [
              Slot {
                type "vehicle wheel"
                endPoint ScooterWheel {
                  boundingObject IS wheelBoundingObject
                }
              }
            ]
            name "rear wheel"
          }
        ]
      }
    ]
    name IS name
    model "ScooterSimple"
    radarCrossSection 10
    boundingObject Pose { # changing the bounding box to fit the driver if present
      %< if (fields.driver.value) { >%
        translation 0.624 0 0.7
        rotation 0.5773509761 0.5773509761 -0.5773488554 -2.0943972231
        children [
          Box {
            size 0.66 1.52 1.95
          }
        ]
      %< } else { >%
        translation 0.624 0 0.5
        rotation 0.5773509761 0.5773509761 -0.5773488554 -2.0943972231
        children [
          Box {
            size 0.66 1.12 1.95
          }
        ]
      %< } >%
    }
    physics NULL
  }
}
