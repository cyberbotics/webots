#VRML_SIM R2023b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# documentation url: https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/vehicles/protos/generic/MotorbikeSimple.proto
# keywords: vehicle/two wheels
# Simple non-controllable model of a generic motorbike without physics properties.
# template language: javascript

EXTERNPROTO "MotorbikeDriver.proto"
EXTERNPROTO "MotorbikeMesh.proto"
EXTERNPROTO "MotorbikeFrontLight.proto"
EXTERNPROTO "MotorbikeBackwardsLight.proto"
EXTERNPROTO "MotorbikeRightIndicator.proto"
EXTERNPROTO "MotorbikeLeftIndicator.proto"
EXTERNPROTO "MotorbikeWheel.proto"

PROTO MotorbikeSimple [
  field       SFVec3f    translation                0 0 0.25                                # Is `Pose.translation`.
  field       SFRotation rotation                   0 0 1 0                                 # Is `Pose.rotation`.
  field       SFColor    primaryColor               0.153 0.004 0.004                       # Defines the primary color of the motorbike.
  field       SFColor    secondaryColor             0.647 0.647 0.647                       # Defines the secondary color of the motorbike.
  field       MFColor    recognitionColors          [0.153 0.004 0.004, 0.647 0.647 0.647]  # Is `Solid.recognitionColors`.
  field       SFNode     driver                     MotorbikeDriver { }                     # Defines a `Slot` node for the motorbike driver.
  field       SFString   name                       "vehicle"                               # Is `Solid.name`.
  field       SFBool     wheelBoundingObject        FALSE                                   # Defines whether the wheels should have a bounding object.
  hiddenField SFVec3f    frontWheelAngularVelocity  0 0 0
  hiddenField SFVec3f    rearWheelAngularVelocity   0 0 0
]
{
  Solid {
    translation IS translation
    rotation IS rotation
    recognitionColors IS recognitionColors # somehow duplicate with the color field, but useful to avoid lua PROTO regeneration when colors change.
    children [
      Group {
        children[
          DEF DRIVER Slot {
            type "motorbike driver"
            endPoint IS driver
          }
          MotorbikeMesh {
            primaryColor IS primaryColor
            secondaryColor IS secondaryColor
          }
          MotorbikeFrontLight {
          }
          MotorbikeBackwardsLight {
          }
          MotorbikeRightIndicator {
          }
          MotorbikeLeftIndicator {
          }
        ]
      }
      DEF FRONT_WHEEL Solid {
        angularVelocity IS frontWheelAngularVelocity
        translation 1.78 0 0
        children [
          Slot {
            type "vehicle wheel"
            endPoint MotorbikeWheel {
              boundingObject IS wheelBoundingObject
            }
          }
        ]
        name "front wheel"
      }
      DEF REAR_WHEEL Solid {
        angularVelocity IS rearWheelAngularVelocity
        children [
          Slot {
            type "vehicle wheel"
            endPoint MotorbikeWheel {
              boundingObject IS wheelBoundingObject
            }
          }
        ]
        name "rear wheel"
      }
    ]
    name IS name
    model "MotorbikeSimple"
    radarCrossSection 10
    boundingObject Pose { # changing the bounding box to fit the driver if present
      %< if (fields.driver.value) { >%
        translation 0.79 0 0.55
        rotation 0.57735 0.57735 0.57735 2.094395
        children [
          Box {
            size 1.1 1.5 2.48
          }
        ]
      %< } else { >%
        translation 0.79 0 0.39
        rotation 0.57735 0.57735 0.57735 2.094395
        children [
          Box {
            size 1.1 1.15 2.48
          }
        ]
      %< } >%
    }
    physics NULL
  }
}
