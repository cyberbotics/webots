#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# documentation url: https://www.cyberbotics.com/doc/automobile/car
# Generic model of Car using the AckermanVehicle proto.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).
# template language: javascript

PROTO Car [
#fields inherited from AckermannVehicle
  field SFVec3f    translation                    0 0 0.4
  field SFRotation rotation                       0 0 1 0
  field SFString   name                           "vehicle"
  field SFString   model                          "car"
  field SFString   controller                     "void"
  field MFString   controllerArgs                 [ ]
  field SFBool     supervisor                     FALSE
  field SFBool     synchronization                TRUE
  field SFFloat    trackFront                     1.7
  field SFFloat    trackRear                      1.7
  field SFFloat    wheelbase                      4.0
  field SFFloat    minSteeringAngle              -1
  field SFFloat    maxSteeringAngle               1
  field SFFloat    suspensionFrontSpringConstant  100000
  field SFFloat    suspensionFrontDampingConstant 4000
  field SFFloat    suspensionRearSpringConstant   100000
  field SFFloat    suspensionRearDampingConstant  4000
  field SFFloat    wheelsDampingConstant          5
  field SFFloat    maxSteeringTorque              10000
  field MFNode     extensionSlot                  [ VehicleLights { } ]
  field SFNode     boundingObject                 NULL
  field SFNode     physics                        NULL
  field SFFloat    radarCrossSection              100
  field MFColor    recognitionColors              [ ]
  field SFNode     wheelFrontRight                VehicleWheel { name "front right wheel" }
  field SFNode     wheelFrontLeft                 VehicleWheel { name "front left wheel" wheelSide TRUE}
  field SFNode     wheelRearRight                 VehicleWheel { name "rear right wheel" }
  field SFNode     wheelRearLeft                  VehicleWheel { name "rear left wheel" wheelSide TRUE}
#fields specific to Car
  field SFString{"traction", "propulsion", "4x4"}
                   type                           "traction"
  field SFString{"combustion", "electric", "parallel hybrid", "power-split hybrid"}
                   engineType                     "combustion"
  field SFString   engineSound                    "sounds/engine.wav"
  field SFFloat    engineSoundRpmReference        1000
  field SFFloat    brakeCoefficient               700
  field SFFloat    time0To100                     10.0                       # Defines the acceleration of the car.
  field SFFloat    maxVelocity                    50                         # Defines the maximum velocity [m/s] of the car.
  field SFFloat    engineMaxTorque                250                        # Defines the maximum torque of the motor [Nm] used to compute the electric engine torque.
  field SFFloat    engineMaxPower                 50000                      # Defines the maximum power of the motor [W] used to compute the electric engine torque.
  field SFFloat    engineMinRPM                   1000                       # Defines the minimum RPM of the motor (only used in the case of combustion engine).
  field SFFloat    engineMaxRPM                   4500
  field SFVec3f    engineFunctionCoefficients     150 0.1 0                  # Defines the engine coefficients used to compute the combustion engine torque.
  field MFFloat    gearRatio                      [-12 10 6.5 4.5 3.5 2.75]
  field SFFloat    hybridPowerSplitRatio          0.25                       # Defines power split ratio (only used in the case of 'power-split hybrid' engineType).
  field SFFloat    hybridPowerSplitRPM            3000                       # Defines the power split RPM (only used in the case of 'power-split hybrid' engineType).
  field SFString   window                         "automobile"
  # Deprecated in R2020b
  hiddenField SFFloat maxWheelVelocity -1.0
]
{
  %<
    // check validity of the value of the fields
    // tracks check
    let frontTrack = fields.trackFront.value;
    if (frontTrack <= 0.0) {
      frontTrack = fields.trackFront.defaultValue;
      console.error('\'trackFront\' must be strictly positive. Value reset to ' + frontTrack + '.');
    }

    let rearTrack = fields.trackRear.value;
    if (rearTrack <= 0.0) {
      rearTrack = fields.trackRear.defaultValue;
      console.error('\'trackRear\' must be strictly positive. Value reset to ' + rearTrack + '.');
    }

    // wheelbase check
    let wheelbase = fields.wheelbase.value;
    if (wheelbase <= 0.0) {
      wheelbase = fields.wheelbase.defaultValue;
      console.error('\'wheelbase\' must be strictly positive. Value reset to ' + wheelbase + '.');
    }
    // type check
    const type = fields.type.value;
    // engineSound check
    let engineSound = fields.engineSound.value;
    if (engineSound === undefined || engineSound === '')
      engineSound = 'none';
    // engineSoundRpmReference check
    let engineSoundRpmReference = fields.engineSoundRpmReference.value;
    if (engineSoundRpmReference <= 0.0) {
      engineSoundRpmReference = fields.engineSoundRpmReference.defaultValue;
      console.error('\'engineSoundRpmReference\' must be strictly positive. Value reset to ' + engineSoundRpmReference + '.');
    }
    // brakeCoefficient check
    let brakeCoefficient = fields.brakeCoefficient.value;
    if (brakeCoefficient <= 0.0) {
      brakeCoefficient = fields.brakeCoefficient.defaultValue;
      console.error('\'brakeCoefficient\' must be strictly positive. Value reset to ' + brakeCoefficient + '.');
    }
    // time0To100 check
    let time0To100 = fields.time0To100.value;
    if (time0To100 <= 0.0) {
      time0To100 = fields.time0To100.defaultValue;
      console.error('\'time0To100\' must be strictly positive. Value reset to ' + time0To100 + '.');
    }
    // wheelsDampingConstant check
    let wheelsDampingConstant = fields.wheelsDampingConstant.value;
    if (wheelsDampingConstant <= 0.0) {
      wheelsDampingConstant = fields.wheelsDampingConstant.defaultValue;
      console.error('\'wheelsDampingConstant\' must be strictly positive. Value reset to ' + wheelsDampingConstant + '.');
    }
    // maxSteeringTorque check
    let maxSteeringTorque = fields.maxSteeringTorque.value;
    if (maxSteeringTorque < 0.0) {
      maxSteeringTorque = fields.maxSteeringTorque.defaultValue;
      console.error('\'maxSteeringTorque\' must be positive. Value reset to ' + maxSteeringTorque + '.');
    }
    // engineMaxTorque and engineMaxPower check
    let engineMaxTorque = fields.engineMaxTorque.value;
    if (engineMaxTorque <= 0.0) {
      engineMaxTorque = fields.engineMaxTorque.defaultValue;
      console.error('\'engineMaxTorque\' must be strictly positive. Value reset to ' + engineMaxTorque + '.');
    }
    let engineMaxPower = fields.engineMaxPower.value;
    if (engineMaxPower <= 0.0) {
      engineMaxPower = fields.engineMaxPower.defaultValue;
      console.error('\'engineMaxPower\' must be strictly positive. Value reset to ' + engineMaxPower + '.');
    }
    // engineMinRPM and engineMaxRPM check
    let engineMinRPM = fields.engineMinRPM.value;
    if (engineMinRPM <= 0.0) {
      engineMinRPM = fields.engineMinRPM.defaultValue;
      console.error('\'engineMinRPM\' must be strictly positive. Value reset to ' + engineMinRPM + '.');
    }
    let engineMaxRPM = fields.engineMaxRPM.value;
    if (engineMaxRPM <= 0.0) {
      engineMaxRPM = fields.engineMaxRPM.defaultValue;
      console.error('\'engineMaxRPM\' must be strictly positive. Value reset to ' + engineMaxRPM + '.');
    }
    // hybridPowerSplitRatio check
    let hybridPowerSplitRatio = fields.hybridPowerSplitRatio.value;
    if (hybridPowerSplitRatio < 0.0 || hybridPowerSplitRatio > 1) {
      hybridPowerSplitRatio = fields.hybridPowerSplitRatio.defaultValue;
      console.error('\'hybridPowerSplitRatio\' must be in the range [0,1]. Value reset to ' + hybridPowerSplitRatio + '.');
    }
    // hybridPowerSplitRPM check
    let hybridPowerSplitRPM = fields.hybridPowerSplitRPM.value;
    if (hybridPowerSplitRPM <= 0.0) {
      hybridPowerSplitRPM = fields.hybridPowerSplitRPM.defaultValue;
      console.error('\'hybridPowerSplitRPM\' must be strictly positive. Value reset to ' + hybridPowerSplitRPM + '.');
    }
    // front wheels, the slot should be a proto with the 'tireRadius' fields
    let frontTireRadius = -1;
    let node = fields.wheelFrontRight.value;
    if (node !== undefined) {
      if (node.fields.tireRadius && node.fields.tireRadius.value)
        frontTireRadius = node.fields.tireRadius.value;
      else
        console.error('The node in the \'wheelFrontRight\' field should have a \'tireRadius\' field.');
    }
    // rear wheels, the slot should be a proto with the 'tireRadius' fields
    let rearTireRadius = -1;
    node = fields.wheelRearRight.value;
    if (node !== undefined) {
      if (node.fields.tireRadius && node.fields.tireRadius.value)
        rearTireRadius = node.fields.tireRadius.value;
      else
        console.error('The node in the \'wheelRearRight\' field should have a \'tireRadius\' field.');
    }
    // compute the accelerations of the rotational motors from 'time0To100'
    let frontAcceleration;
    let rearAcceleration;
    if (frontTireRadius === -1) { // use 0.4 if radius not found
      // 1000 / 36 => 100km/h => m/s
      frontAcceleration = 1000 / 36 / time0To100 / 0.4;
    } else
      frontAcceleration = 1000 / 36 / time0To100 / frontTireRadius;

    if (rearTireRadius === -1) // use 0.4 if radius not found
      rearAcceleration = 1000 / 36 / time0To100 / 0.4;
    else
      rearAcceleration = 1000 / 36 / time0To100 / rearTireRadius;

    // compute the max velocity of the rotational motors from 'time0To100'
    let frontMaxVelocity = 0;
    let rearMaxVelocity = 0;
    if (fields.maxWheelVelocity.value !== fields.maxWheelVelocity.defaultValue && fields.maxVelocity.value === fields.maxVelocity.defaultValue) {
      console.error('Field \'maxWheelVelocity\' is deprecated, use the \'maxVelocity\' field instead.');
      frontMaxVelocity = fields.maxWheelVelocity.value;
      rearMaxVelocity = fields.maxWheelVelocity.value;
    } else {
      if (frontTireRadius === -1)
        frontMaxVelocity = fields.maxVelocity.value / 0.4;
      else
        frontMaxVelocity = fields.maxVelocity.value / frontTireRadius;

      if (rearTireRadius === -1)
        rearMaxVelocity = fields.maxVelocity.value / 0.4;
      else
        rearMaxVelocity = fields.maxVelocity.value / rearTireRadius;
    }

    // compute the 'customData' string which is used to communicate configuration of the vehicle to the library
    // the structure is the following: "wheelbase frontTrack rearTrack frontWheelsRadius (-1 if no wheel detected) rearWheelsRadius (-1 if no wheel detected) brakeCoefficient wheelsDampingConstant engineType engineMaxTorque engineMaxPower engineMinRPM engineMaxRPM engineFunctionCoefficients[0] engineFunctionCoefficients[1] engineFunctionCoefficients[2] hybridPowerSplitRatio hybridPowerSplitRPM  engineSoundRpmReference sizeOfGearRatio length(engineSound) gearRatio0 gearRatio1 .. gearRatioN engineSound" (more will be added).
    let customData = '"' + wheelbase + ' ' + frontTrack + ' ' + rearTrack + ' ';
    // front wheels tire radius if found (-1 otherwise)
    customData += frontTireRadius + ' ';
    // rear wheels tire radius if found (-1 otherwise)
    customData += rearTireRadius + ' ';
    // brake caracteristic
    customData += brakeCoefficient + ' ';
    // wheels dampingConstant
    customData += wheelsDampingConstant + ' ';
    // engine type
    let engineType = fields.engineType.value;
    if (engineType === 'combustion')
      customData += 'C ';
    else if (engineType === 'electric')
      customData += 'E ';
    else if (engineType === 'parallel hybrid')
      customData += 'P ';
    else
      customData +=  'S ';

    // engine min and max rotating speed engineMaxTorque engineMaxPower
    customData += engineMaxTorque + ' ' + engineMaxPower + ' ';
    // engine min and max rotating speed
    customData += engineMinRPM + ' ' + engineMaxRPM + ' ';
    customData += fields.engineFunctionCoefficients.value.x + ' ' + fields.engineFunctionCoefficients.value.y + ' ' + fields.engineFunctionCoefficients.value.z + ' ';
    // hybrid power split caracteristics
    customData += hybridPowerSplitRatio + ' ' + hybridPowerSplitRPM + ' ';
    // engineSoundRpmReference
    customData += engineSoundRpmReference + ' ';
    // gears number
    const gearNumber = fields.gearRatio.value.length;
    customData += gearNumber + ' ';
    // length of engineSound
    customData += engineSound.length + ' ';
    // gears ratio of each gear
    let gearRatio = fields.gearRatio.value;
    for (let i = 0; i < gearNumber; ++i)
      customData += gearRatio[i] + ' ';
    // engineSound
    customData += engineSound + ' ';
    // close the customData string
    customData +=  '"';
  >%
  AckermannVehicle {
    translation IS translation
    rotation IS rotation
    name IS name
    model IS model
    controller IS controller
    controllerArgs IS controllerArgs
    supervisor IS supervisor
    synchronization IS synchronization
    trackFront IS trackFront
    trackRear IS trackRear
    wheelbase IS wheelbase
    minSteeringAngle IS minSteeringAngle
    maxSteeringAngle IS maxSteeringAngle
    suspensionFrontSpringConstant IS suspensionFrontSpringConstant
    suspensionFrontDampingConstant IS suspensionFrontDampingConstant
    suspensionRearSpringConstant IS suspensionRearSpringConstant
    suspensionRearDampingConstant IS suspensionRearDampingConstant
    wheelsDampingConstant IS wheelsDampingConstant
    maxSteeringTorque IS maxSteeringTorque
    extensionSlot IS extensionSlot
    boundingObject IS boundingObject
    physics IS physics
    radarCrossSection IS radarCrossSection
    recognitionColors IS recognitionColors
    wheelFrontRight IS wheelFrontRight
    wheelFrontLeft IS wheelFrontLeft
    wheelRearRight IS wheelRearRight
    wheelRearLeft IS wheelRearLeft
    customData %<= customData >%
    window IS window
    axisDevicesFrontRight [
    %< if (type === 'traction' || type === '4x4') { >%
      RotationalMotor {
        name "right_front_wheel"
        acceleration %<= frontAcceleration >%
        maxVelocity %<= frontMaxVelocity >%
        maxTorque 100000000
        sound ""
      }
    %< } >%
      PositionSensor {
        name "right_front_sensor"
      }
      Brake {
        name "right_front_brake"
      }
    ]
    axisDevicesFrontLeft [
    %< if (type === 'traction' || type === '4x4') { >%
      RotationalMotor {
        name "left_front_wheel"
        acceleration %<= frontAcceleration >%
        maxVelocity %<= frontMaxVelocity >%
        maxTorque 100000000
        sound ""
      }
    %< } >%
      PositionSensor {
        name "left_front_sensor"
      }
      Brake {
        name "left_front_brake"
      }
    ]
    axisDevicesRearRight [
    %< if (type === 'propulsion' || type === '4x4') { >%
      RotationalMotor {
        name "right_rear_wheel"
        acceleration %<= rearAcceleration >%
        maxVelocity %<= rearMaxVelocity >%
        maxTorque 100000000
        sound ""
      }
    %< } >%
      PositionSensor {
        name "right_rear_sensor"
      }
      Brake {
        name "right_rear_brake"
      }
    ]
    axisDevicesRearLeft [
    %< if (type === 'propulsion' || type === '4x4') { >%
      RotationalMotor {
        name "left_rear_wheel"
        acceleration %<= rearAcceleration >%
        maxVelocity %<= rearMaxVelocity >%
        maxTorque 100000000
        sound ""
      }
    %< } >%
      PositionSensor {
        name "left_rear_sensor"
      }
      Brake {
        name "left_rear_brake"
      }
    ]
  }
}
