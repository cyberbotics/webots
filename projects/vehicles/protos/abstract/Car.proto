#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# documentation url: https://www.cyberbotics.com/doc/automobile/car
# Generic model of Car using the AckermanVehicle proto.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).

PROTO Car [
#fields inherited from AckermannVehicle
  field SFVec3f    translation                    0 0.4 0
  field SFRotation rotation                       0 1 0 0.0
  field SFString   name                           "vehicle"
  field SFString   model                          "car"
  field SFString   controller                     "void"
  field SFString   controllerArgs                 ""
  field SFBool     supervisor                     FALSE
  field SFBool     synchronization                TRUE
  field SFFloat    trackFront                     1.7
  field SFFloat    trackRear                      1.7
  field SFFloat    wheelbase                      4.0
  field SFFloat    minSteeringAngle              -1
  field SFFloat    maxSteeringAngle               1
  field SFFloat    suspensionFrontSpringConstant  100000
  field SFFloat    suspensionFrontDampingConstant 4000
  field SFFloat    suspensionRearSpringConstant   100000
  field SFFloat    suspensionRearDampingConstant  4000
  field SFFloat    wheelsDampingConstant          5
  field SFFloat    maxSteeringTorque              10000
  field MFNode     extensionSlot                  [ VehicleLights { } ]
  field SFNode     boundingObject                 NULL
  field SFNode     physics                        NULL
  field SFFloat    radarCrossSection              100
  field MFColor    recognitionColors              [ ]
  field SFNode     wheelFrontRight                VehicleWheel { name "front right wheel" }
  field SFNode     wheelFrontLeft                 VehicleWheel { name "front left wheel" }
  field SFNode     wheelRearRight                 VehicleWheel { name "rear right wheel" }
  field SFNode     wheelRearLeft                  VehicleWheel { name "rear left wheel" }
#fields specific to Car
  field SFString{"traction", "propulsion", "4x4"}
                   type                           "traction"
  field SFString{"combustion", "electric", "parallel hybrid", "power-split hybrid"}
                   engineType                     "combustion"
  field SFString   engineSound                    "sounds/engine.wav"
  field SFFloat    engineSoundRpmReference        1000
  field SFFloat    brakeCoefficient               700
  field SFFloat    time0To100                     10.0
  field SFFloat    engineMaxTorque                250   # maximum torque of the motor [Nm] used to compute the electric engine torque
  field SFFloat    engineMaxPower                 50000   # maximum power of the motor [W] used to compute the electric engine torque
  field SFFloat    engineMinRPM                   1000  # only used in the case of combustion engine
  field SFFloat    engineMaxRPM                   4500
  field SFVec3f    engineFunctionCoefficients     150 0.1 0  # used to compute the combustion engine torque
  field MFFloat    gearRatio                      [-12 10 6.5 4.5 3.5 2.75]
  field SFFloat    hybridPowerSplitRatio          0.25 # only used in the case of 'power-split hybrid' engineType
  field SFFloat    hybridPowerSplitRPM            3000 # only used in the case of 'power-split hybrid' engineType
  field SFFloat    maxWheelVelocity               200
]
{
  %{
    -- check validity of the value of the fields
    -- tracks check
    local frontTrack = fields.trackFront.value
    if frontTrack <= 0.0 then
      frontTrack = fields.trackFront.defaultValue
      io.stderr:write("'trackFront' should be strictly positive.\n")
      io.stderr:write("'trackFront' was reset to '" .. frontTrack .. "'.\n")
    end
    local rearTrack = fields.trackRear.value
    if rearTrack <= 0.0 then
      rearTrack = fields.rearTrack.defaultValue
      io.stderr:write("'trackRear' should be strictly positive.\n")
      io.stderr:write("'trackRear' was reset to '" .. rearTrack .. "'.\n")
    end
    -- wheelbase check
    local wheelbase = fields.wheelbase.value
    if wheelbase <= 0.0 then
      wheelbase = fields.wheelbase.defaultValue
      io.stderr:write("'wheelbase' should be strictly positive.\n")
      io.stderr:write("'wheelbase' was reset to '" .. wheelbase .. "'.\n")
    end
    -- type check
    local type = fields.type.value
    -- engineSound check
    local engineSound = fields.engineSound.value
    if engineSound == nil or engineSound == "" then
      engineSound = "none"
    end
    -- engineSoundRpmReference check
    local engineSoundRpmReference = fields.engineSoundRpmReference.value
    if engineSoundRpmReference <= 0.0 then
      engineSoundRpmReference = fields.engineSoundRpmReference.defaultValue
      io.stderr:write("'engineSoundRpmReference' should be strictly positive.\n")
      io.stderr:write("'engineSoundRpmReference' was reset to '" .. engineSoundRpmReference .. "'.\n")
    end
    -- brakeCoefficient check
    local brakeCoefficient = fields.brakeCoefficient.value
    if brakeCoefficient <= 0.0 then
      brakeCoefficient = fields.brakeCoefficient.defaultValue
      io.stderr:write("'brakeCoefficient' should be strictly positive.\n")
      io.stderr:write("'brakeCoefficient' was reset to '" .. brakeCoefficient .. "'.\n")
    end
    -- time0To100 check
    local time0To100 = fields.time0To100.value
    if time0To100 <= 0.0 then
      time0To100 = fields.time0To100.defaultValue
      io.stderr:write("'time0To100' should be strictly positive.\n")
      io.stderr:write("'time0To100' was reset to '" .. time0To100 .. "'.\n")
    end
    -- wheelsDampingConstant check
    local wheelsDampingConstant = fields.wheelsDampingConstant.value
    if wheelsDampingConstant < 0.0 then
      wheelsDampingConstant = fields.wheelsDampingConstant.defaultValue
      io.stderr:write("'wheelsDampingConstant' should be positive.\n")
      io.stderr:write("'wheelsDampingConstant' was reset to '" .. wheelsDampingConstant .. "'.\n")
    end
    -- maxSteeringTorque check
    local maxSteeringTorque = fields.maxSteeringTorque.value
    if maxSteeringTorque < 0.0 then
      maxSteeringTorque = fields.maxSteeringTorque.defaultValue
      io.stderr:write("'maxSteeringTorque' should be positive.\n")
      io.stderr:write("'maxSteeringTorque' was reset to '" .. maxSteeringTorque .. "'.\n")
    end
    -- engineMaxTorque and engineMaxPower check
    local engineMaxTorque = fields.engineMaxTorque.value
    if engineMaxTorque <= 0.0 then
      engineMaxTorque = fields.engineMaxTorque.defaultValue
      io.stderr:write("'engineMaxTorque' should be strictly positive.\n")
      io.stderr:write("'engineMaxTorque' was reset to '" .. engineMaxTorque .. "'.\n")
    end
    local engineMaxPower = fields.engineMaxPower.value
    if engineMaxPower <= 0.0 then
      engineMaxPower = fields.engineMaxPower.defaultValue
      io.stderr:write("'engineMaxPower' should be strictly positive.\n")
      io.stderr:write("'engineMaxPower' was reset to ''" .. engineMaxPower .. "'.\n")
    end
    -- engineMinRPM and engineMaxRPM check
    local engineMinRPM = fields.engineMinRPM.value
    if engineMinRPM <= 0.0 then
      engineMinRPM = fields.engineMinRPM.defaultValue
      io.stderr:write("'engineMinRPM' should be strictly positive.\n")
      io.stderr:write("'engineMinRPM' was reset to '" .. engineMinRPM .. "'.\n")
    end
    local engineMaxRPM = fields.engineMaxRPM.value
    if engineMaxRPM <= engineMinRPM then
      engineMaxRPM = 5 * engineMinRPM
      io.stderr:write("'engineMaxRPM' should be greater than 'engineMinRPM'.\n")
      io.stderr:write("'engineMaxRPM' was reset to five times the value of 'engineMinRPM'.\n")
    end
    -- hybridPowerSplitRatio check
    local hybridPowerSplitRatio = fields.hybridPowerSplitRatio.value
    if hybridPowerSplitRatio < 0 or hybridPowerSplitRatio > 1 then
      hybridPowerSplitRatio = fields.hybridPowerSplitRatio.defaultValue
      io.stderr:write("'hybridPowerSplitRatio' should be in the range [0,1].\n")
      io.stderr:write("'hybridPowerSplitRatio' was reset to '" .. hybridPowerSplitRatio .. "'.\n")
    end
    -- hybridPowerSplitRPM check
    local hybridPowerSplitRPM = fields.hybridPowerSplitRPM.value
    if hybridPowerSplitRPM < 0 then
      hybridPowerSplitRPM = fields.hybridPowerSplitRPM.defaultValue
      io.stderr:write("'hybridPowerSplitRPM' should be greater than 'hybridPowerSplitRPM'.\n")
      io.stderr:write("'hybridPowerSplitRPM' was reset to ''" .. hybridPowerSplitRPM .. "'.\n")
    end
    -- front wheels, the slot should be a proto with the 'tireRadius' fields
    local frontTireRadius = -1
    local node = fields.wheelFrontRight.value
    if node ~= nil then
      if node.fields.tireRadius and node.fields.tireRadius.value then
        frontTireRadius = node.fields.tireRadius.value
      else
        io.stderr:write("The node in the 'wheelFrontRight' field should have a 'tireRadius' field.\n")
      end
    end
    -- rear wheels, the slot should be a proto with the 'tireRadius' fields
    local rearTireRadius = -1
    node = fields.wheelRearRight.value
    if node ~= nil then
      if node.fields.tireRadius and node.fields.tireRadius.value then
        rearTireRadius = node.fields.tireRadius.value
      else
        io.stderr:write("The node in the 'wheelRearRight' field should have a 'tireRadius' field.\n")
      end
    end

    -- compute the acelerations of the rotational motors from 'time0To100'
    local frontAcceleration = 0
    local rearAcceleration = 0
    if frontTireRadius == -1 then -- use 0.4 if radius not found
      -- 1000 / 36 => 100km/h => m/s
      frontAcceleration = 1000 / 36 / time0To100 / 0.4
    else
      frontAcceleration = 1000 / 36 / time0To100 / frontTireRadius
    end
    if rearTireRadius == -1 then -- use 0.4 if radius not found
      rearAcceleration = 1000 / 36 / time0To100 / 0.4
    else
      rearAcceleration = 1000 / 36 / time0To100 / rearTireRadius
    end

    -- compute the 'customData' string which is used to communicate configuration of the vehicle to the library
    -- the structure is the following: "wheelbase frontTrack rearTrack frontWheelsRadius (-1 if no wheel detected) rearWheelsRadius (-1 if no wheel detected) brakeCoefficient wheelsDampingConstant engineType engineMaxTorque engineMaxPower engineMinRPM engineMaxRPM engineFunctionCoefficients[0] engineFunctionCoefficients[1] engineFunctionCoefficients[2] hybridPowerSplitRatio hybridPowerSplitRPM  engineSoundRpmReference sizeOfGearRatio length(engineSound) gearRatio0 gearRatio1 .. gearRatioN engineSound" (more will be added).
    local customData = '"' .. wheelbase .. ' ' .. frontTrack ..' ' .. rearTrack .. ' '
    -- front wheels tire radius if found (-1 otherwise)
    customData = customData .. frontTireRadius .. ' '
    -- rear wheels tire radius if found (-1 otherwise)
    customData = customData .. rearTireRadius .. ' '
    -- brake caracteristic
    customData = customData .. brakeCoefficient .. ' '
    -- wheels dampingConstant
    customData = customData .. wheelsDampingConstant .. ' '
    -- engine type
    local engineType = fields.engineType.value
    if engineType == "combustion" then
      customData = customData .. 'C '
    elseif engineType == "electric" then
      customData = customData .. 'E '
    elseif engineType == "parallel hybrid" then
      customData = customData .. 'P '
    else
      customData = customData .. 'S '
    end
    -- engine min and max rotating speed engineMaxTorque engineMaxPower
    customData = customData .. engineMaxTorque .. ' ' .. engineMaxPower .. ' '
    -- engine min and max rotating speed
    customData = customData .. engineMinRPM .. ' ' .. engineMaxRPM .. ' '
    customData = customData .. fields.engineFunctionCoefficients.value.x .. ' ' .. fields.engineFunctionCoefficients.value.y .. ' ' .. fields.engineFunctionCoefficients.value.z .. ' '
    -- hybrid power split caracteristics
    customData = customData .. hybridPowerSplitRatio .. ' ' .. hybridPowerSplitRPM .. ' '
    -- engineSoundRpmReference
    customData = customData .. engineSoundRpmReference .. ' '
    -- gears number
    local gearNumber = 0
    for key,value in ipairs(fields.gearRatio.value) do gearNumber = gearNumber + 1 end
    customData = customData .. gearNumber .. ' '
    -- length of engineSound
    customData = customData .. string.len(engineSound) .. ' '
    -- gears ratio of each gear
    for key,value in ipairs(fields.gearRatio.value) do customData = customData .. value .. ' ' end
    -- engineSound
    customData = customData .. engineSound .. ' '
    -- close the customData string
    customData = customData .. '"'
  }%

  AckermannVehicle {
    translation IS translation
    rotation IS rotation
    name IS name
    model IS model
    controller IS controller
    controllerArgs IS controllerArgs
    supervisor IS supervisor
    synchronization IS synchronization
    trackFront IS trackFront
    trackRear IS trackRear
    wheelbase IS wheelbase
    minSteeringAngle IS minSteeringAngle
    maxSteeringAngle IS maxSteeringAngle
    suspensionFrontSpringConstant IS suspensionFrontSpringConstant
    suspensionFrontDampingConstant IS suspensionFrontDampingConstant
    suspensionRearSpringConstant IS suspensionRearSpringConstant
    suspensionRearDampingConstant IS suspensionRearDampingConstant
    wheelsDampingConstant IS wheelsDampingConstant
    maxSteeringTorque IS maxSteeringTorque
    extensionSlot IS extensionSlot
    boundingObject IS boundingObject
    physics IS physics
    radarCrossSection IS radarCrossSection
    recognitionColors IS recognitionColors
    wheelFrontRight IS wheelFrontRight
    wheelFrontLeft IS wheelFrontLeft
    wheelRearRight IS wheelRearRight
    wheelRearLeft IS wheelRearLeft
    customData %{= customData }%
    window "automobile_window"
    axisDevicesFrontRight [
    %{ if type == "traction" or type == "4x4" then }%
      RotationalMotor {
        name "right_front_wheel"
        acceleration %{= frontAcceleration }%
        maxVelocity IS maxWheelVelocity
        maxTorque 100000000
        sound ""
      }
    %{ end }%
      PositionSensor {
        name "right_front_sensor"
      }
      Brake {
        name "right_front_brake"
      }
    ]
    axisDevicesFrontLeft [
    %{ if type == "traction" or type == "4x4" then }%
      RotationalMotor {
        name "left_front_wheel"
        acceleration %{= frontAcceleration }%
        maxVelocity IS maxWheelVelocity
        maxTorque 100000000
        sound ""
      }
    %{ end }%
      PositionSensor {
        name "left_front_sensor"
      }
      Brake {
        name "left_front_brake"
      }
    ]
    axisDevicesRearRight [
    %{ if type == "propulsion" or type == "4x4" then }%
      RotationalMotor {
        name "right_rear_wheel"
        acceleration %{= rearAcceleration }%
        maxVelocity IS maxWheelVelocity
        maxTorque 100000000
        sound ""
      }
    %{ end }%
      PositionSensor {
        name "right_rear_sensor"
      }
      Brake {
        name "right_rear_brake"
      }
    ]
    axisDevicesRearLeft [
    %{ if type == "propulsion" or type == "4x4" then }%
      RotationalMotor {
        name "left_rear_wheel"
        acceleration %{= rearAcceleration }%
        maxVelocity IS maxWheelVelocity
        maxTorque 100000000
        sound ""
      }
    %{ end }%
      PositionSensor {
        name "left_rear_sensor"
      }
      Brake {
        name "left_rear_brake"
      }
    ]
  }
}
