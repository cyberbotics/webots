/*
 * Copyright 1996-2021 Cyberbotics Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by gencpp from file webots_ros/RecognitionObjects.msg
// DO NOT EDIT!

#ifndef WEBOTS_ROS_MESSAGE_RECOGNITIONOBJECTS_H
#define WEBOTS_ROS_MESSAGE_RECOGNITIONOBJECTS_H

#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <webots_ros/RecognitionObject.h>

namespace webots_ros
{
template <class ContainerAllocator>
struct RecognitionObjects_
{
  typedef RecognitionObjects_<ContainerAllocator> Type;

  RecognitionObjects_()
    : header()
    , count(0)
    , objects()  {
    }
  RecognitionObjects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , count(0)
    , objects(_alloc)  {
    }

   typedef ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t  _count_type;
  _count_type count;

   typedef std::vector< ::webots_ros::RecognitionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::webots_ros::RecognitionObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;



  typedef boost::shared_ptr< ::webots_ros::RecognitionObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::webots_ros::RecognitionObjects_<ContainerAllocator> const> ConstPtr;

}; // struct RecognitionObjects_

typedef ::webots_ros::RecognitionObjects_<std::allocator<void> > RecognitionObjects;

typedef boost::shared_ptr< ::webots_ros::RecognitionObjects > RecognitionObjectsPtr;
typedef boost::shared_ptr< ::webots_ros::RecognitionObjects const> RecognitionObjectsConstPtr;

// constants requiring out of line definition

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::webots_ros::RecognitionObjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::webots_ros::RecognitionObjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace webots_ros

namespace ros
{
namespace message_traits
{

// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/groovy/share/std_msgs/msg'], 'webots_ros': ['/home/simon/my_Webots_Projects/controllers/ros_controller/catkin_ws/src/webots_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']

template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::RecognitionObjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::RecognitionObjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::RecognitionObjects_<ContainerAllocator> const>
  : FalseType
  { };

template<class ContainerAllocator>
struct MD5Sum< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac0ec54e563936d28b7dec5cf26184c3";
  }

  static const char* value(const ::webots_ros::RecognitionObjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac0ec54e563936d2ULL;
  static const uint64_t static_value2 = 0x8b7dec5cf26184c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "webots_ros/RecognitionObjects";
  }

  static const char* value(const ::webots_ros::RecognitionObjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint32 count\n\
webots_ros/RecognitionObject[] objects\n\\n\
\n\
";
  }

  static const char* value(const ::webots_ros::RecognitionObjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.count);
      stream.next(m.objects);

    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecognitionObjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::webots_ros::RecognitionObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::webots_ros::RecognitionObjects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
    	s << indent << "  objects[" << i << "]: ";
    	s << std::endl;
    	s << indent;
    	Printer< ::webots_ros::RecognitionObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }

  }
};

} // namespace message_operations
} // namespace ros

#endif // WEBOTS_ROS_MESSAGE_RECOGNITIONOBJECTS_H
