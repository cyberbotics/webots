#VRML_SIM R2022a utf8
# license: Apache License 2.0
# license url: http://www.apache.org/licenses/LICENSE-2.0
# Robocup Humanoid League 2021 soccer goal.
# The color and size of the goal can be modified.
# template language: javascript

PROTO RobocupGoal [
  field SFVec3f    translation        0 0 0
  field SFRotation rotation           0 0 1 0
  field SFString   name               "robotstadium goal"
  field SFColor    frameColor         1 1 1               # Defines the color of the goal frame.
  field SFColor    netColor           0.3 0.3 0.3         # Defines the color of the net.
  field SFString{"adult", "kid"} size "kid"               # Defines the size of the field.
]
{
  %<
    // Official soccer field dimensions from RoboCup 2021 (in meters)
    let C, D, goal_height;
    if (fields.size.value === 'kid') {
      // KidSize dimensions
      C = 0.6;
      D = 2.6;
      goal_height = 1.2;
    } else {
      // AdultSize dimensions
      C = 0.6;
      D = 2.6;
      goal_height = 1.8;
    }

    const post_radius = 0.05; // Diameter/width/depth must be between 0.08-0.12
    const post_spacing = D + 2 * post_radius;
    const post_height = goal_height + post_radius;
    const backpost_radius = 0.02; // Not defined in rules
    const bounding_object_thickness_sides = 2 * backpost_radius; // Not defined in rules
    const bounding_object_thickness_back = 0.3; // Not defined in rules
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF HORIZONTAL_POST_TRANS Transform {
        translation 0 0 %<= post_height >%
        rotation 1 0 0 -1.570793
        children [
          Shape {
            appearance DEF POST_APP PBRAppearance {
              baseColor IS frameColor
              metalness 0
              roughness 0.2
            }
            geometry Capsule {
              height %<= post_spacing >%
              radius %<= post_radius >%
            }
          }
        ]
      }
      DEF RIGHT_POST_TRANS Transform {
        translation 0  %<= -post_spacing / 2 >% %<= post_height / 2 >%
        children [
          Shape {
            appearance USE POST_APP
            geometry Cylinder {
              bottom FALSE
              top FALSE
              height %<= post_height >%
              radius %<= post_radius >%
            }
          }
        ]
      }
      DEF LEFT_POST_TRANS Transform {
        translation 0  %<= post_spacing / 2 >% %<= post_height / 2 >%
        children [
          Shape {
            appearance USE POST_APP
            geometry Cylinder {
              bottom FALSE
              top FALSE
              height %<= post_height >%
              radius %<= post_radius >%
            }
          }
        ]
      }
      Shape {
        appearance DEF NET_APP PBRAppearance {
          baseColor IS netColor
          baseColorMap ImageTexture {
            url "webots://projects/default/worlds/textures/net.png"
            filtering 0
          }
          metalness 0
          roughness 1
        }
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
              %<= -C >% %<= -post_spacing / 2 >%           0
              %<= -C >% %<= post_spacing / 2 >%            0
              %<= -C >% %<= post_spacing / 2 >%            %<= post_height >%
              %<= -C >% %<= -post_spacing / 2 >%           %<= post_height >%
              %<= -post_radius >% %<= post_spacing / 2 >%  0
              %<= -post_radius >% %<= -post_spacing / 2 >% 0
              %<= -post_radius >% %<= post_spacing / 2 >%  %<= post_height >%
              %<= -post_radius >% %<= -post_spacing / 2 >% %<= post_height >%
            ]
          }
          texCoord TextureCoordinate {
            point [
              0 0
              28 0
              28 16
              0 16
              7 0
              7 16
              0 16
              28 0
              28 6
              0 6
            ]
          }
          coordIndex [
            0, 1, 2, 3, -1,
            3, 2, 1, 0, -1,
            1, 4, 6, 2, -1,
            2, 6, 4, 1, -1,
            0, 5, 7, 3, -1,
            3, 7, 5, 0, -1,
            2, 3, 7, 6, -1,
            6, 7, 3, 2, -1
          ]
          texCoordIndex [
            0, 1, 2, 3, -1,
            0, 1, 2, 3, -1,
            0, 4, 5, 6, -1,
            0, 4, 5, 6, -1,
            0, 4, 5, 6, -1,
            0, 4, 5, 6, -1,
            0, 7, 8, 9, -1,
            0, 7, 8, 9, -1
          ]
        }
      }
      Transform {
        translation %<= -C >% 0 %<= post_height >%
        rotation 1 0 0 -1.5708
        children [
          DEF SMALL_HORIZONTAL_POST_SHAPE Shape {
            appearance USE POST_APP
            geometry Capsule {
              height %<= post_spacing >%
              radius %<= backpost_radius >%
            }
          }
        ]
      }
      Transform {
        translation %<= -C >% 0 %<= backpost_radius / 2 >%
        rotation 1 0 0 -1.5708
        children [
          USE SMALL_HORIZONTAL_POST_SHAPE
        ]
      }
      Transform {
        translation %<= -C >% %<= post_spacing / 2 >% %<= post_height / 2 >%
        children [
          DEF SMALL_POST_SHAPE Shape {
            appearance USE POST_APP
            geometry Cylinder {
              bottom FALSE
              top FALSE
              height %<= post_height >%
              radius %<= backpost_radius >%
            }
          }
        ]
      }
      Transform {
        translation %<= -C >%  %<= -post_spacing / 2 >% %<= post_height / 2 >%
        children [
          USE SMALL_POST_SHAPE
        ]
      }
      Transform {
        translation %<= -C / 2 >% %<= post_spacing / 2 >% %<= post_height >%
        rotation 0 1 0 -1.5708
        children [
          DEF OTHER_SMALL_POST_SHAPE Shape {
            appearance USE POST_APP
            geometry Cylinder {
              bottom FALSE
              top FALSE
              height %<= C >%
              radius %<= backpost_radius >%
            }
          }
        ]
      }
      Transform {
        translation %<= -C / 2 >% %<= -post_spacing / 2 >% %<= post_height >%
        rotation 0 1 0 -1.5708
        
        children [
          USE OTHER_SMALL_POST_SHAPE
        ]
      }
      Transform {
        translation %<= -C / 2 >% %<= post_spacing / 2 >% %<= backpost_radius / 2 >%
        rotation 0 1 0 -1.5708
        children [
          USE OTHER_SMALL_POST_SHAPE
        ]
      }
      Transform {
        translation %<= -C / 2 >% %<= -post_spacing / 2 >% %<= backpost_radius / 2 >%
        rotation 0 1 0 -1.5708
        children [
          USE OTHER_SMALL_POST_SHAPE
        ]
      }
    ]
    name IS name
    model "robotstadium goal"
    boundingObject Group {
      children [
        USE HORIZONTAL_POST_TRANS
        USE RIGHT_POST_TRANS
        USE LEFT_POST_TRANS
        Transform { # Left
          translation %<= -post_radius - (C - post_radius) / 2 >% %<= -post_spacing / 2 >% %<= (post_height - backpost_radius) / 2 >%
          rotation 0 0 1 -1.5708
          children [
            DEF GOAL_SIDE_BOX Box {
              size %<= bounding_object_thickness_sides >% %<= C - post_radius >% %<= post_height - backpost_radius >%
            }
          ]
        }
        Transform { # Right
          translation %<= -post_radius - (C - post_radius) / 2 >%  %<= post_spacing / 2 >% %<= (post_height - backpost_radius) / 2 >%
          rotation 0 0 1 -1.5708
          children [
            USE GOAL_SIDE_BOX
          ]
        }
        Transform { # Back
          translation %<= -C - bounding_object_thickness_back / 2 >% 0 %<= (post_height+backpost_radius) / 2 >%
          rotation 0 0 1 -1.5708
          children [
            Box {
              size %<= post_spacing + 2 * backpost_radius >% %<= bounding_object_thickness_back >% %<= post_height + backpost_radius >%
            }
          ]
        }
        Transform { # Top
          translation %<= -post_radius - (C - post_radius) / 2 >% 0 %<= post_height >%
          rotation 0 0 1 -1.5708
          children [
            Box {
              size %<= post_spacing + 2 * backpost_radius >% %<= C - post_radius >% %<= bounding_object_thickness_sides >%
            }
          ]
        }
      ]
    }
    locked TRUE
  }
}
