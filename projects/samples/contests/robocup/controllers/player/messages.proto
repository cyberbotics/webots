syntax = "proto3";

message Vector3 {
  double X = 1;
  double Y = 2;
  double Z = 3;
}

message PositionSensorMeasurement {
  string name = 1;
  double value = 2;
}

message AccelerometerMeasurement {
  string name = 1;
  Vector3 value = 2;  // [m/sË†2], x-axis, y-axis, z-axis
}

message GyroMeasurement {
  string name = 1;
  Vector3 value = 2;  // [rad/s], x-axis, y-axis, z-axis
}

message BumperMeasurement {
  string name = 1;
  bool value = 2;
}

message ForceMeasurement {
  string name = 1;
  double value = 2;  // [N]
}

message Force3DMeasurement {
  string name = 1;
  Vector3 value = 2;  // [N], x-axis, y-axis, z-axis
}

message Force6DMeasurement {  // not yet implemented
  string name = 1;
  Vector3 force = 2;   // [N], x-axis, y-axis, z-axis
  Vector3 torque = 3;  // [N.m], x-axis, y-axis, z-axis
}

message CameraMeasurement {
  string name = 1;
  uint32 width = 2;
  uint32 height = 3;
  sint32 quality = 4;  // -1 = raw image, 100 = no compression, 0 = high compression
  bytes image = 5;     // RAW or JPEG encoded data (note: JPEG is not yet implemented)
}

message Message {
  enum MessageType {
    ERROR_MESSAGE = 0;
    WARNING_MESSAGE = 1;
  }
  MessageType message_type = 1;
  string text = 2;
}

message SensorMeasurements {
  uint32 time = 1;  // time stamp at which the measurements were performed expressed in [ms]
  repeated Message messages = 2;
  repeated AccelerometerMeasurement accelerometers = 3;
  repeated BumperMeasurement bumpers = 4;
  repeated CameraMeasurement cameras = 5;
  repeated ForceMeasurement forces = 6;
  repeated Force3DMeasurement force3ds = 7;
  repeated Force6DMeasurement force6ds = 8;
  repeated GyroMeasurement gyros = 9;
  repeated PositionSensorMeasurement position_sensors = 10;
}

message MotorPosition {
  string name = 1;
  double position = 2;  // linear or angular target position expressed in [m] or [rad]
}

message MotorVelocity {
  string name = 1;
  double velocity = 2;  // linear or angular target velocity expressed in [m/s] or [rad/s]
}

message MotorForce {
  string name = 1;
  double force = 2;  // target force expressed in [N]
}

message MotorTorque {
  string name = 1;
  double torque = 2;  // target torque expressed in [N.m]
}

message MotorPID {
  string name = 1;
  Vector3 PID = 2;  // PID controller values
}

message SensorTimeStep { // apply to all sensors: Accelerometer, Camera, Gyro, PositionSensor and TouchSensor
  string name = 1;
  uint32 timeStep = 2;  // time between two measurements expressed in [ms], disabled if 0
}

message CameraQuality {
  string name = 1;
  sint32 quality = 2;  // JPEG quality
}

message CameraExposure {
  string name = 1;
  double exposure = 2;  // photometric exposure of the scene in joule per square meter [J/m^2]
}

message ActuatorRequests {
  repeated MotorPosition motor_positions = 1;
  repeated MotorVelocity motor_velocities = 2;
  repeated MotorForce motor_forces = 3;
  repeated MotorTorque motor_torques = 4;
  repeated MotorPID motor_pids = 5;
  repeated SensorTimeStep sensor_time_steps = 6;
  repeated CameraQuality camera_qualities = 7;
  repeated CameraExposure camera_exposures = 8;
}
