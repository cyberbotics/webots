#VRML_SIM R2021b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: nonDeterministic
# Randomly generated uneven terrain based on Perlin noise.
# template language: javascript

PROTO Pit [
  field SFVec3f    translation    0 0 0
  field SFRotation rotation       0 1 0 0
  field SFVec3f    size           20 5 20
  field SFInt32    xDimension     50
  field SFInt32    zDimension     50
  field SFNode     appearance     SandyGround {}
  field SFInt32    randomSeed     1               # Defines the random seed, if seed <= 0 then set a random seed.
  field SFInt32    perlinNOctaves 3
  field SFFloat    noiseAmplitude 0.15
  field SFFloat    pitRadius      3
]
{
  %<
    import * as wbrandom from 'wbrandom.js';

    if (fields.randomSeed.value <= 0)
      wbrandom.seed(Date.now());
    else
      wbrandom.seed(fields.randomSeed.value);

    function gaussian2d(x, y, amp, c, s) {
      return amp * Math.exp( - ( ( Math.pow(x - c.x, 2) / (2.0 * Math.pow(s.x, 2)) ) + (Math.pow(y - c.y, 2) / (2.0 * Math.pow(s.y, 2)) ) ));
    }

    // cosine interpolation
    function interpolate (a, b, x) {
      const ft = x * Math.PI;
      const f = (1.0 - Math.cos(ft)) * 0.5;

      return a * (1.0 - f) + b * f;
    }

    function noise (x, y) {
      // could be improved by taking care of x and y
      return wbrandom.real(-1.0, 1.0);
    }

    function smoothNoise (x, y) {
      const corners = (noise(x - 1, y - 1) + noise(x + 1, y - 1) + noise(x - 1, y + 1) + noise(x + 1, y + 1)) / 16.0;
      const sides   = (noise(x - 1, y)   + noise(x + 1, y)   + noise(x, y - 1)   + noise(x, y + 1)) /  8.0;
      const center  =  noise(x, y) / 4.0;

      return corners + sides + center;
    }

    function interpolatedNoise (x, y) {
      const integerX = Math.floor(x);
      const fractionalX = x - integerX;

      const integerY = Math.floor(y);
      const fractionalY = y - integerY;

      const v1 = smoothNoise(integerX,     integerY);
      const v2 = smoothNoise(integerX + 1, integerY);
      const v3 = smoothNoise(integerX,     integerY + 1);
      const v4 = smoothNoise(integerX + 1, integerY + 1);

      const i1 = interpolate(v1, v2, fractionalX);
      const i2 = interpolate(v3, v4, fractionalX);

      return interpolate(i1, i2, fractionalY);
    }

    // cf. http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
    function perlinNoise2d(x, y) {
      let total = 0.0;

      for (let i = 0; i <= fields.perlinNOctaves.value - 1; ++i) {
        let frequency = Math.pow(2.0, i);
        total += interpolatedNoise(x * frequency, y * frequency);
      }

      return total / fields.perlinNOctaves.value;
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF PIT_ELEVATION_GRID Transform {
        translation %<= - fields.size.value.x * 0.5 >% 0 %<= - fields.size.value.z * 0.5 >%
        children [
          Shape {
            appearance IS appearance
            geometry ElevationGrid {
              %< if (fields.xDimension.value > 2 && fields.zDimension.value > 2) { >%
                xDimension IS xDimension
                xSpacing %<= fields.size.value.x / (fields.xDimension.value - 1) >%
                zDimension IS zDimension
                zSpacing %<= fields.size.value.z / (fields.zDimension.value - 1) >%
                height [
                  %<
                    const xSigma = fields.pitRadius.value / fields.size.value.x;
                    const zSigma = fields.pitRadius.value / fields.size.value.z;
                    const xMin = 0.5 - 3 * xSigma;
                    const xMax = 0.5 + 3 * xSigma;
                    const zMin = 0.5 - 3 * zSigma;
                    const zMax = 0.5 + 3 * zSigma;
                  >%
                  %< for (let i = 0; i <= fields.xDimension.value - 1; ++i) { >%
                    %< for (let j = 0; j <= fields.zDimension.value - 1; ++j) { >%
                      %<
                        let height = 1.0;
                        const x = i / fields.xDimension.value;
                        const z = j / fields.zDimension.value;
                        if (x > xMin && x < xMax && z > zMin && z < zMax) {
                          if (fields.perlinNOctaves.value > 0)
                            height = (1 - fields.noiseAmplitude.value) + fields.noiseAmplitude.value * perlinNoise2d(x, z);

                          height = height * (1.0 - gaussian2d(x - 0.5, z - 0.5, 1, {x: 0, y: 0}, {x: xSigma, y: zSigma}));
                          height = height * gaussian2d(x - 0.5, z - 0.5, 1, {x: 0, y: 0}, {x: xSigma, y: zSigma});

                          height = height * fields.size.value.y;
                        } else
                          height = 0;
                      >%
                      %<= height >%
                    %< } >%
                  %< } >%
                ]
              %< } >%
            }
          }
        ]
      }
    ]
    name "pit"
    boundingObject USE PIT_ELEVATION_GRID
  }
}
