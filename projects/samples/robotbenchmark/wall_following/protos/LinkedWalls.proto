#VRML_SIM R2021b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: hidden, nonDeterministic
# Customizable wall made of segments.
# template language: javascript

PROTO LinkedWalls [
  field SFVec3f translation 0 0 0
  field SFRotation rotation 0 1 0 0
  field SFFloat length 1
  field SFFloat height 0.5
  field MFInt32 angles []
  field SFNode appearance NULL
  field SFString window "wall_following"
]
{
  %<
    import * as wbrandom from 'wbrandom.js';
    let angles;
    let dataString = '"';

    if (fields.angles.value.length === 0) {
      const WALL_PARTS = [
        [ -6, -2, -12, 12, 8 ],
        [ -6, 18, -6, -6, -6, -6, 12 ],
        [ 6, 2, -2, -2, -4 ],
        [ -4, 4, -4, 10, -6 ],
        [ 6, 14, -14, -2, -2, -2 ],
        [ -2, 2, -6, 2, 4 ],
        [ -8, 16, -8, -6, 2, 4 ]
      ];

      const NB_WALL_PARTS = WALL_PARTS.length;
      let remaining_indices = [];
      let current_value;
      let shuffle = [];

      wbrandom.seed(Date.now());

      // list of the wall parts that have not been chosen yet.
      for (let i = 0; i < NB_WALL_PARTS; ++i)
        remaining_indices.push(i);

      for (let i = 0; i < NB_WALL_PARTS - 1; ++i) {
        // we select one wall part among the ones remaining
        current_value = wbrandom.integer(NB_WALL_PARTS - i) - 1;
        shuffle[i] = remaining_indices[current_value];

        // updates the available wall part list
        for (let j = current_value; j < NB_WALL_PARTS - i - 1; ++j)
          remaining_indices[j] = remaining_indices[j + 1];
      }

      // only one choice for the last one.
      shuffle[NB_WALL_PARTS - 1] = remaining_indices[0];

      angles = [0, 0, -2, 0, 2, 0];

      let angle_index = 6;
      for (let i = 0; i < NB_WALL_PARTS; ++i) {
        let wall = WALL_PARTS[shuffle[i]];
        for (let k = 0; k < wall.length; ++k) {
          angles[angle_index] = wall[k];
          angle_index = angle_index + 1;
        }
      }
    } else
      angles = fields.angles.value;

    dataString += angles.length + ',';

    for (let j = 0; j < angles.length; ++j)
      dataString += angles[j] + ',';

    dataString += '"';

    let currentWall = {x: 0, z: 0, angleIncrement: 0, orientation: 0};

    function computeNextWall (currentWall, angleIncrement) {
      let nextWall = {};

      nextWall.angleIncrement = currentWall.angleIncrement + angleIncrement;

      // converts to radians
      nextWall.orientation = nextWall.angleIncrement * Math.PI / 24;

      // sin and cos are reversed because the orientation is perpendicular to the direction in which the wall is "moving"
      nextWall.x = currentWall.x + 0.5 * fields.length.value * (Math.sin(currentWall.orientation) + Math.sin(nextWall.orientation));
      nextWall.z = currentWall.z + 0.5 * fields.length.value * (Math.cos(currentWall.orientation) + Math.cos(nextWall.orientation));

      return nextWall;
    };
  >%
  Robot {
    translation IS translation
    rotation IS rotation
    controller "wall_following_supervisor"
    supervisor TRUE
    window IS window
    children [
      Solid {
        children [
          DEF SHAPE_WALL_LINKED_WALL Shape {
            appearance IS appearance
            geometry Box {
              size 0.01 %<= fields.height.value >% %<= fields.length.value >%
            }
          }
        ]
        boundingObject USE SHAPE_WALL_LINKED_WALL
      }
      %< for (let i = 0; i < angles.length; ++i) { >%
        %< currentWall = computeNextWall(currentWall, angles[i]); >%
          Solid {
            translation %<= currentWall.x >% 0 %<= currentWall.z >%
            rotation 0 1 0 %<= currentWall.orientation >%
            name "wall %<=i>%"
            children [
              USE SHAPE_WALL_LINKED_WALL
            ]
            boundingObject USE SHAPE_WALL_LINKED_WALL
          }
      %< } >%
    ]
    customData %<= dataString >%
  }
}
