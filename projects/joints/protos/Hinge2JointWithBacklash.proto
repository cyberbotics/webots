#VRML_SIM R2021b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# This extension of the hinge joint allows to model the effect of backlash.

PROTO Hinge2JointWithBacklash [
  field SFNode                                 jointParameters   HingeJointParameters {}
  field SFNode                                 jointParameters2  JointParameters {}
  field SFFloat                                backlash          0.01   # Defines the gear clearence, [0, inf).
  field SFFloat                                gearMass          0.01   # Defines the gear mass, [0, inf).
  field MFNode                                 device            [ ]    # {RotationalMotor, PositionSensor, Brake, PROTO}.
  field MFNode                                 device2           [ ]    # {RotationalMotor, PositionSensor, Brake, PROTO}.
  field MFNode{PositionSensor{}}               outputSensor      [ ]    # {PositionSensor}.
  field MFNode{Group{}, Transform{}, Shape{}}  startPoint        NULL   # {Group, Transform, or Shape}.
  field SFNode                                 endPoint          NULL   # {Solid, SolidReference, or Slot}.
]
{
  %{
    -- load modules
    local os = require('os')
    local wbrandom = require('wbrandom')
    wbrandom.seed(os.clock() + os.time())
    -- parameter retrieval
    local axis = fields.jointParameters.value.fields.axis.value
    local axis2 = fields.jointParameters2.value.fields.axis.value
    local anchor = fields.jointParameters.value.fields.anchor.value
    -- parameter sanity check
    local backlash = fields.backlash.value
    if backlash < 0 then
      io.stderr:write("'backlash' value must be greater or equal to 0. Using default value.\n")
      backlash = fields.backlash.defaultValue
    elseif backlash > 0 and backlash < 0.01 then
      print("Values of 'backlash' smaller than 0.01 are unlikely to be correctly modeled by the physics engine.")
    end

    local gearMass = fields.gearMass.value
    if gearMass <= 0 then
      io.stderr:write("'gearMass' value must be positive. Using default value.\n")
      gearMass = fields.gearMass.defaultValue
    end

    if (backlash == 0 and gearMass > 0) or (backlash == 0 and fields.startPoint.value ~= nil) or
       (backlash == 0 and fields.outputSensor.value ~= nil) then
      print("'HingeJointWithBacklash' replaced with a 'HingeJoint'. 'gearMass', 'startPoint' and 'outputSensor' are being ignored. You should consider replacing the node.\n")
    end
  }%
  Hinge2Joint {
    jointParameters IS jointParameters
    jointParameters2 IS jointParameters2
    device IS device
    device2 IS device2
    endPoint Solid {
      name %{= '"limiter_axis_'..wbrandom.integer(0, 100000)..'"' }% # prevent name clashes
      children [
        HingeJoint {
          jointParameters HingeJointParameters {
            axis %{= axis.x }% %{= axis.y }% %{= axis.z }%
            anchor %{= anchor.x }% %{= anchor.y }% %{= anchor.z }%
            minStop %{= - backlash*0.5 }%
            maxStop %{= backlash*0.5 }%
            stopERP 0
          }
          device []
          endPoint Solid {
            name %{= '"limiter_axis2_'..wbrandom.integer(0, 100000)..'"' }% # prevent name clashes
            children [
              HingeJoint {
                jointParameters HingeJointParameters {
                  axis %{= axis2.x }% %{= axis2.y }% %{= axis2.z }%
                  anchor %{= anchor.x }% %{= anchor.y }% %{= anchor.z }%
                  minStop %{= - backlash*0.5 }%
                  maxStop %{= backlash*0.5 }%
                  #stopERP 0
                }
                #device2 []
                device [] #IS device
                #device [
                #  RotationalMotor {
                #    name "UNCTRL"
                #  }
                #]
                endPoint IS endPoint
              }
            ]
            physics Physics {
              inertiaMatrix [ 4e-9 4e-9 4e-9, 0.0 0.0 0.0 ] # sphere of radius 0.001
              centerOfMass %{= anchor.x }% %{= anchor.y }% %{= anchor.z }%
              density -1
              mass %{= gearMass*0.5 }%
            }
          }
        }
      ]
      physics Physics {
        inertiaMatrix [ 4e-9 4e-9 4e-9, 0.0 0.0 0.0 ] # sphere of radius 0.001
        centerOfMass %{= anchor.x }% %{= anchor.y }% %{= anchor.z }%
        density -1
        mass %{= gearMass*0.5 }%
      }
    }
  }
}
