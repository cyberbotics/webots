#VRML_SIM R2021a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A simple segment of road allowing to add (or remove) several lanes to the road.
# The side where the new lanes are added is configurable as well as a lot of others parameters of a regular road.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).

PROTO AddLanesRoadSegment [
  field        SFVec3f              translation               0 0 0
  field        SFRotation           rotation                  0 1 0 0
  field        SFString             name                      "road"                              # Defines the junction name.
  field        SFString             id                        ""                                  # Optionally defines a unique ID. A unique ID is required to use the SUMO exporter.
  field        MFString             connectedRoadIDs          []                                  # Optionally defines a list of the identifiers of the connected Road. This is required to use the SUMO exporter.
  field        SFFloat              width                     7                                   # Defines the total width of the road (excluding sidewalk).
  field        SFFloat              length                    20                                  # Defines the total length of the segment.
  field        SFInt32              numberOfLanes             2                                   # Defines the number of lanes before addition of the new one(s) (used for the texture mapping).
  field        SFInt32              numberOfNewLanes          2                                   # Defines the number of lanes to add.
  field        SFFloat              speedLimit                -1.0                                # Optionally defines the speed limit. The recommended unit is meter per seconds.
  field        SFBool               newLaneLeft               TRUE                                # Defines on which side are added the new lanes.
  field        MFNode{RoadLine {}}  lines                     [ RoadLine { } ]                    # Defines the property of each line separating two lanes.
  field        SFFloat              roadBorderHeight          0.15                                # Defines the height of the sidewalk.
  field        SFFloat              roadBorderWidth           0.8                                 # Defines the width of the sidewalk.
  field        SFBool               rightBorder               TRUE                                # Defines whether the road should have a right sidewalk.
  field        SFBool               leftBorder                TRUE                                # Defines whether the road should have a left sidewalk.
  field        SFBool               rightBarrier              FALSE                               # Defines whether the road should have a right barrier.
  field        SFBool               leftBarrier               FALSE                               # Defines whether the road should have a left barrier.
  field        SFBool               bottom                    FALSE                               # Defines whether the road bottom should be displayed (useful in case of bridge).
  field        MFString             startLine                 []                                  # Optionally defines the texture used for the road line at the first way-point for each lane. If the string is empty, no road line will be added for the corresponding lane. The two textures `textures/road_line_dashed.png` and `textures/road_line_triangle.png` may be used in this field.
  field        MFString             endLine                   []                                  # Optionally defines the texture used for the road line at the last way-point for each lane. If the string is empty, no road line will be added for the corresponding lane.
  field        SFNode               appearance                Asphalt { }                         # Defines the appearance of the road.
  field        SFNode               pavementAppearance        Pavement { }                        # Defines the appearance of the sidewalk.
  field        MFString             bottomTexture             []                                  # Defines the texture to be used for the bottom of the road.
  field        SFBool               locked                    TRUE                                # Is `Solid.locked`.
  field        SFBool               roadBoundingObject        FALSE                               # Defines whether the road should have a bounding object.
  field        SFBool               rightBorderBoundingObject FALSE                               # Defines whether the right sidewalk should have a bounding object.
  field        SFBool               leftBorderBoundingObject  FALSE                               # Defines whether the left sidewalk should have a bounding object.
  field        SFBool               rightBarrierBoundingObject TRUE                               # Defines whether the right crash barrier (if any) should have a bounding object.
  field        SFBool               leftBarrierBoundingObject TRUE                                # Defines whether the left crash barrier (if any) should have a bounding object.
  field        SFBool               castShadows               FALSE                               # Defines whether the road should cast shadows.
  field        SFString             contactMaterial           "default"                           # Is `Solid.contactMaterial`.

  hiddenField  MFBool               dashedLine                TRUE                                # Deprecated in Webots R2018c.
]
{
  %{
    local wbcore = require('wbcore')

    -- fields checks
    local width = fields.width.value
    if width < 0 then
      io.stderr:write("'width' must be greater than 0\n")
      width = fields.width.defaultValue
    end
    local barrierOffset = 0.06 + 0.05 * width
    local length = fields.length.value
    if length < 0 then
      io.stderr:write("'length' must be greater than 0\n")
      length = fields.length.defaultValue
    end
    local numberOfNewLanes = fields.numberOfNewLanes.value
    if numberOfNewLanes < 1 then
      io.stderr:write("'numberOfNewLanes' must be greater than 1\n")
      numberOfNewLanes = fields.numberOfNewLanes.defaultValue
    end
    local lanes = fields.numberOfLanes.value
    if lanes < 1 then
      io.stderr:write("'numberOfLanes' must be greater than 1\n")
      lanes = fields.numberOfLanes.defaultValue
    end
    local newLaneLeft   = fields.newLaneLeft.value
    local dashedLine    = fields.dashedLine.value
    local roadLines     = fields.lines.value
    for i = 1, wbcore.tablelength(roadLines) do
      if roadLines[i].node_name ~= "RoadLine" then
        roadLines[i] = nil
        io.stderr:write("Only 'RoadLine' nodes should be added in the 'lines' field.\n")
      end
    end
    for i = 1, numberOfNewLanes + lanes - 1 do
      if dashedLine[i] == nil then
        dashedLine[i] = true
      end
    end
    local rightBarrier = fields.rightBarrier.value
    local leftBarrier = fields.leftBarrier.value
    local outputAddedWidth = numberOfNewLanes * width / lanes
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model "add lanes road segment"
    children [
      Group {
        children IS lines
      }
      %{ for i = 0, numberOfNewLanes - 1 do }%
        AddLaneRoadSegment {
          %{ if newLaneLeft then }%
            translation %{= (width / lanes) * (i / 2) }% 0 %{= i * length / numberOfNewLanes }%
          %{ else }%
            translation %{= -(width / lanes) * (i / 2) }% 0 %{= i * length / numberOfNewLanes }%
          %{ end }%
          name %{= "\"road ".. i .. "\"" }%
          width %{= width + i * width / lanes }%
          length %{= length / numberOfNewLanes }%
          numberOfLanes %{= lanes + i }%
          newLaneLeft IS newLaneLeft
          dashedLine [
            %{ for j = 1, lanes + i do }%
              %{ if newLaneLeft then }%
                %{ if dashedLine[j] == false then }%
                  FALSE
                %{ else }%
                  TRUE
                %{ end }%
              %{ else }%
                %{ if dashedLine[(lanes + i) - j + 1] == false then }%
                  FALSE
                %{ else }%
                  TRUE
                %{ end }%
              %{ end }%
            %{ end }%
          ]
          lines [
            %{ for j = 1, lanes + i do }%
              %{ if newLaneLeft then }%
                %{ if roadLines[j] then }%
                  RoadLine {
                    color %{= roadLines[j].fields.color.value.r }% %{= roadLines[j].fields.color.value.g }% %{= roadLines[j].fields.color.value.b }%
                    type %{= '"' .. roadLines[j].fields.type.value .. '"' }%
                    width %{= roadLines[j].fields.width.value }%
                 }
                %{ end }%
              %{ else }%
                %{ if roadLines[(lanes + i) - j + 1] then }%
                  RoadLine {
                    color %{= roadLines[(lanes + i) - j + 1].fields.color.value.r }% %{= roadLines[(lanes + i) - j + 1].fields.color.value.g }% %{= roadLines[(lanes + i) - j + 1].fields.color.value.b }%
                    type %{= '"' .. roadLines[(lanes + i) - j + 1].fields.type.value .. '"' }%
                    width %{= roadLines[(lanes + i) - j + 1].fields.width.value }%
                 }
                %{ end }%
              %{ end }%
            %{ end }%
          ]
          roadBorderHeight IS roadBorderHeight
          roadBorderWidth IS roadBorderWidth
          rightBorder IS rightBorder
          leftBorder IS leftBorder
          rightBarrier FALSE
          leftBarrier FALSE
          bottom IS bottom
          %{ if i == 0 then }%
            startLine IS startLine
          %{ end }%
          %{ if i == (numberOfNewLanes - 1) then }%
            endLine IS endLine
          %{ end }%
          appearance IS appearance
          pavementAppearance IS pavementAppearance
          locked IS locked
          roadBoundingObject IS roadBoundingObject
          rightBorderBoundingObject IS rightBorderBoundingObject
          leftBorderBoundingObject IS leftBorderBoundingObject
          contactMaterial IS contactMaterial
          castShadows IS castShadows
        }
      %{ end }%
      # new barrier left
      %{ if leftBarrier then }%
        CrashBarrier {
          name "left barrier"
          subdivision -1
          enableBoundingObject IS leftBarrierBoundingObject
          barrierOnRightSide FALSE
          path [
            %{ if newLaneLeft then }%
              %{= width / 2 + outputAddedWidth + barrierOffset }% %{= 0 }% %{= length }%
            %{ else }%
              %{= width / 2 + barrierOffset }% %{= 0 }% %{= length }%
            %{ end }%
            %{= width / 2  + barrierOffset }% 0 0
          ]
        }
      %{ end }%
      # new barrier right
      %{ if rightBarrier then }%
        CrashBarrier {
          name "right barrier"
          subdivision -1
          enableBoundingObject IS rightBarrierBoundingObject
          barrierOnRightSide TRUE
          path [
            %{ if newLaneLeft == false then }%
              %{= -width / 2 - outputAddedWidth - barrierOffset }% %{= 0 }% %{= length }%
            %{ else }%
              %{= -width / 2 - barrierOffset }% %{= 0 }% %{= length }%
            %{ end }%
            %{= -width / 2  - barrierOffset }% 0 0
          ]
        }
      %{ end }%
    ]
  }
}
