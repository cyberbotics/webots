#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A simple segment of road allowing to add (or remove) several lanes to the road.
# The side where the new lanes are added is configurable as well as a lot of others parameters of a regular road.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).
# template language: javascript

PROTO AddLanesRoadSegment [
  field        SFVec3f              translation               0 0 0
  field        SFRotation           rotation                  0 0 1 0
  field        SFString             name                      "road"                              # Defines the junction name.
  field        SFString             id                        ""                                  # Optionally defines a unique ID. A unique ID is required to use the SUMO exporter.
  field        MFString             connectedRoadIDs          []                                  # Optionally defines a list of the identifiers of the connected Road. This is required to use the SUMO exporter.
  field        SFFloat              width                     7                                   # Defines the total width of the road (excluding sidewalk).
  field        SFFloat              length                    20                                  # Defines the total length of the segment.
  field        SFInt32              numberOfLanes             2                                   # Defines the number of lanes before addition of the new one(s) (used for the texture mapping).
  field        SFInt32              numberOfNewLanes          2                                   # Defines the number of lanes to add.
  field        SFFloat              speedLimit                -1.0                                # Optionally defines the speed limit. The recommended unit is meter per seconds.
  field        SFBool               newLaneLeft               TRUE                                # Defines on which side are added the new lanes.
  field        MFNode{RoadLine {}}  lines                     [ RoadLine { } ]                    # Defines the property of each line separating two lanes.
  field        SFFloat              roadBorderHeight          0.15                                # Defines the height of the sidewalk.
  field        SFFloat              roadBorderWidth           0.8                                 # Defines the width of the sidewalk.
  field        SFBool               rightBorder               TRUE                                # Defines whether the road should have a right sidewalk.
  field        SFBool               leftBorder                TRUE                                # Defines whether the road should have a left sidewalk.
  field        SFBool               rightBarrier              FALSE                               # Defines whether the road should have a right barrier.
  field        SFBool               leftBarrier               FALSE                               # Defines whether the road should have a left barrier.
  field        SFBool               bottom                    FALSE                               # Defines whether the road bottom should be displayed (useful in case of bridge).
  field        MFString             startLine                 []                                  # Optionally defines the texture used for the road line at the first way-point for each lane. If the string is empty, no road line will be added for the corresponding lane. The two textures `textures/road_line_dashed.png` and `textures/road_line_triangle.png` may be used in this field.
  field        MFString             endLine                   []                                  # Optionally defines the texture used for the road line at the last way-point for each lane. If the string is empty, no road line will be added for the corresponding lane.
  field        SFNode               appearance                Asphalt { }                         # Defines the appearance of the road.
  field        SFNode               pavementAppearance        Pavement { }                        # Defines the appearance of the sidewalk.
  field        MFString             bottomTexture             []                                  # Defines the texture to be used for the bottom of the road.
  field        SFBool               locked                    TRUE                                # Is `Solid.locked`.
  field        SFBool               roadBoundingObject        FALSE                               # Defines whether the road should have a bounding object.
  field        SFBool               rightBorderBoundingObject FALSE                               # Defines whether the right sidewalk should have a bounding object.
  field        SFBool               leftBorderBoundingObject  FALSE                               # Defines whether the left sidewalk should have a bounding object.
  field        SFBool               rightBarrierBoundingObject TRUE                               # Defines whether the right crash barrier (if any) should have a bounding object.
  field        SFBool               leftBarrierBoundingObject TRUE                                # Defines whether the left crash barrier (if any) should have a bounding object.
  field        SFBool               castShadows               FALSE                               # Defines whether the road should cast shadows.
  field        SFString             contactMaterial           "default"                           # Is `Solid.contactMaterial`.
]
{
  %<
    import * as wbutility from 'wbutility.js';

    // fields checks
    let width = fields.width.value;
    if (width < 0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be greater or equal to 0. Value reset to ' + width + '.');
    }

    const barrierOffset = 0.06 + 0.05 * width;
    let length = fields.length.value;
    if (length < 0) {
      length = fields.length.defaultValue;
      console.error('\'length\' must be greater or equal to 0. Value reset to ' + length + '.');
    }

    let numberOfNewLanes = fields.numberOfNewLanes.value;
    if (numberOfNewLanes < 1) {
      numberOfNewLanes = fields.numberOfNewLanes.defaultValue;
      console.error('\'numberOfNewLanes\' must be greater than 1. Value reset to ' + numberOfNewLanes + '.');
    }
    let lanes = fields.numberOfLanes.value;
    if (lanes < 1) {
      lanes = fields.numberOfLanes.defaultValue;
      console.error('\'numberOfLanes\' must be greater than 1. Value reset to ' + lanes + '.');
    }
    const newLaneLeft   = fields.newLaneLeft.value;
    let roadLines     = fields.lines.value;
    for (let i = 0; i < roadLines.length; ++i)
      if (roadLines[i].node_name !== 'RoadLine') {
        roadLines[i] = undefined;
        console.error('Only \'RoadLine\' nodes should be added in the \'lines\' field.');
      }

    // pad the unspecified lines with default lines, otherwise the continuity between segments of road is broken
    let defaultLine = wbutility.deepCopy(fields.lines.value[0]);
    defaultLine.fields.color.value = defaultLine.fields.color.defaultValue;
    defaultLine.fields.type.value = defaultLine.fields.type.defaultValue;
    defaultLine.fields.width.value = defaultLine.fields.width.defaultValue;
    while (numberOfNewLanes + fields.numberOfLanes.value - 1 > roadLines.length)
      roadLines.push(defaultLine);

    const rightBarrier = fields.rightBarrier.value;
    const leftBarrier = fields.leftBarrier.value;
    const outputAddedWidth = numberOfNewLanes * width / lanes;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model "add lanes road segment"
    children [
      Group {
        children IS lines
      }
      %< for (let i = 0; i <= numberOfNewLanes - 1; ++i) { >%
        AddLaneRoadSegment {
          %< if (newLaneLeft) { >%
            translation %<= i * length / numberOfNewLanes >% %<= (width / lanes) * (i * 0.5) >% 0
          %< } else { >%
            translation %<= i * length / numberOfNewLanes >% %<= -(width / lanes) * (i * 0.5) >% 0
          %< } >%
          name %<= '"road ' + i + '"' >%
          width %<= width + i * width / lanes >%
          length %<= length / numberOfNewLanes >%
          numberOfLanes %<= lanes + i >%
          newLaneLeft IS newLaneLeft
          lines [
            %< if (newLaneLeft) { >%
              %< for (let j = 0; j < lanes + i; ++j) { >%
                %< if (typeof roadLines[j] !== 'undefined') { >%
                  RoadLine {
                    color %<= roadLines[j].fields.color.value.r >% %<= roadLines[j].fields.color.value.g >% %<= roadLines[j].fields.color.value.b >%
                    type %<= '"' + roadLines[j].fields.type.value + '"' >%
                    width %<= roadLines[j].fields.width.value >%
                  }
                %< } >%
              %< } >%
            %< } else { >%
              %<
                // first provide roadlines that will fill the main trunk of the road, they must be provided in reverse order because the base PROTO Road requires it
                for (let j = lanes + i - 2; j >= 0; j--) {
                  if (typeof roadLines[j] !== 'undefined') {
              >%
                    RoadLine {
                      color %<= roadLines[j].fields.color.value.r >% %<= roadLines[j].fields.color.value.g >% %<= roadLines[j].fields.color.value.b >%
                      type %<= '"' + roadLines[j].fields.type.value + '"' >%
                      width %<= roadLines[j].fields.width.value >%
                    }
                  %< } >%
                %< } >%
                %<
                  // then provide the line of the newly added side-road
                  if (typeof roadLines[lanes + i - 1] !== 'undefined') {
                >%
                    RoadLine {
                      color %<= roadLines[lanes + i - 1].fields.color.value.r >% %<= roadLines[lanes + i - 1].fields.color.value.g >% %<= roadLines[lanes + i - 1].fields.color.value.b >%
                      type %<= '"' + roadLines[lanes + i - 1].fields.type.value + '"' >%
                      width %<= roadLines[lanes + i - 1].fields.width.value >%
                    }
                %< } >%
            %< } >%
          ]
          roadBorderHeight IS roadBorderHeight
          roadBorderWidth IS roadBorderWidth
          rightBorder IS rightBorder
          leftBorder IS leftBorder
          rightBarrier FALSE
          leftBarrier FALSE
          bottom IS bottom
          %< if (i === 0) { >%
            startLine IS startLine
          %< } >%
          %< if (i === (numberOfNewLanes - 1)) { >%
            endLine IS endLine
          %< } >%
          appearance IS appearance
          pavementAppearance IS pavementAppearance
          locked IS locked
          roadBoundingObject IS roadBoundingObject
          rightBorderBoundingObject IS rightBorderBoundingObject
          leftBorderBoundingObject IS leftBorderBoundingObject
          contactMaterial IS contactMaterial
          castShadows IS castShadows
        }
      %< } >%
      # new barrier left
      %< if (leftBarrier) { >%
        CrashBarrier {
          name "left barrier"
          subdivision -1
          enableBoundingObject IS leftBarrierBoundingObject
          barrierOnRightSide FALSE
          path [
            %< if (newLaneLeft) { >%
              %<= length >% %<= width * 0.5 + outputAddedWidth + barrierOffset >% %<= 0 >%
            %< } else { >%
              %<= length >% %<= width * 0.5 + barrierOffset >% %<= 0 >%
            %< } >%
            0 %<= width * 0.5  + barrierOffset >% 0
          ]
        }
      %< } >%
      # new barrier right
      %< if (rightBarrier) { >%
        CrashBarrier {
          name "right barrier"
          subdivision -1
          enableBoundingObject IS rightBarrierBoundingObject
          barrierOnRightSide TRUE
          path [
            %< if (!newLaneLeft) { >%
              %<= length >% %<= -width * 0.5 - outputAddedWidth - barrierOffset >% %<= 0 >%
            %< } else { >%
              %<= length >% %<= -width * 0.5 - barrierOffset >% %<= 0 >%
            %< } >%
            0 %<= -width * 0.5 - barrierOffset >% 0
          ]
        }
      %< } >%
    ]
  }
}
