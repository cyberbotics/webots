#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Generic and customizable road pillars which can be used for easily creating bridges or elevated roads.
# The boundingObject can be optionally enable or not.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).
# template language: javascript

PROTO RoadPillars [
  field SFVec3f    translation        0 0 0
  field SFRotation rotation           0 0 1 0
  field SFString   name               "road pillar"
  field SFFloat    height             5                                                                 # Defines the height of the pillar.
  field SFFloat    width              8                                                                 # Defines the width of the pillar.
  field SFFloat    depth              2                                                                 # Defines the depth of the pillar.
  field SFFloat    pylonsRadius       0.6                                                               # Defines the radius of the two pylons.
  field SFFloat    pylonsDistance     6                                                                 # Defines the distance between the two pylons (should be smaller than the width).
  field SFFloat    pylonsInclination  0.1                                                               # Defines the inclination angle of the pylons.
  field SFFloat    upperTilt          0                                                                 # Defines the tilt of the upper support.
  field SFNode     appearance         RoughConcrete { textureTransform TextureTransform { scale 4 1} }  # Defines the appearance of the pillar.
  field SFBool     boundingObject     TRUE                                                              # Defines whether the pillar should have a bounding object.
]
{
  %<
    let height = fields.height.value;
    if (height < 0.0) {
      height = fields.height.defaultValue;
      console.error('\'height\' must be greater or equal to zero. Value reset to ' + height + '.');
    }
    let width = fields.width.value;
    if (width < 0.0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be greater or equal to zero. Value reset to ' + width + '.');
    }
    let depth = fields.depth.value;
    if (depth < 0.0) {
      depth = fields.depth.defaultValue;
      console.error('\'depth\' must be greater or equal to zero. Value reset to ' + depth + '.');
    }
    let pylonsDistance = fields.pylonsDistance.value;
    if (pylonsDistance > width) {
      pylonsDistance = width;
      console.error('\'pylonsDistance\' must be smaller than \'width\'. Value clamped.');
    } else if (pylonsDistance < 0) {
      pylonsDistance = fields.pylonsDistance.defaultValue;
      console.error('\'pylonsDistance\' must be greater or equal to zero. Value reset to ' + pylonsDistance + '.');
    }
    const pylonsInclination = fields.pylonsInclination.value;
    const boundingObject    = fields.boundingObject.value;
    const tilt              = fields.upperTilt.value;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Transform {
        rotation 0 0 1 1.5708
        children [
          DEF LOWER_PART Transform {
            translation 0 0 0.25
            children [
              Shape {
                appearance IS appearance
                geometry DEF BOX Box {
                  size %<= width >% %<= depth >% 0.5
                }
              }
            ]
          }
          DEF UPPER_PART Transform {
            translation 0 0 %<= height - 0.25 >%
            rotation 0 1 0 %<= -tilt >%
            children [
              Shape {
                appearance IS appearance
                geometry USE BOX
              }
            ]
          }
          DEF CYLINDER_1 Transform {
            translation %<= pylonsDistance * 0.5 >% 0 %<= height * 0.5 + Math.sin(tilt) * pylonsDistance * 0.25 >%
            rotation 0 1 0 %<= -pylonsInclination >%
            children [
              Shape {
                appearance IS appearance
                geometry Cylinder {
                  height %<= height - 0.25 + Math.sin(tilt) * pylonsDistance * 0.5 >%
                  radius IS pylonsRadius
                }
              }
            ]
          }
          DEF CYLINDER_1 Transform {
            translation %<= -pylonsDistance * 0.5 >% 0 %<= height * 0.5 - Math.sin(tilt) * pylonsDistance * 0.25 >%
            rotation 0 1 0 %<= +pylonsInclination >%
            children [
              Shape {
                appearance IS appearance
                geometry Cylinder {
                  height %<= height - 0.25 - Math.sin(tilt) * pylonsDistance * 0.5 >%
                  radius IS pylonsRadius
                }
              }
            ]
          }
        ]
      }
    ]
    name IS name
    model "road pillar"
    %< if (boundingObject) { >%
      boundingObject Transform {
        translation 0 0 %<= height * 0.5 - width * Math.abs(Math.sin(tilt)) * 0.25 >%
        rotation 0 0 1 1.5708
        children [
          Box {
            size %<= width >% %<= depth >% %<= height - width * Math.abs(Math.sin(tilt)) * 0.5 >%
          }
        ]
      }
    %< } >%
  }
}
