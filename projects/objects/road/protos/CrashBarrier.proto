#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A customizable crash barrier.
# template language: javascript

PROTO CrashBarrier [
  field SFVec3f      translation             0 0 0
  field SFRotation   rotation                0 0 1 0
  field SFString     name                    "crash barrier"
  field SFFloat      poleGap                 2                                     # Defines the gap between two consecutive poles.
  field SFNode       poleAppearance          PBRAppearance { roughness 0.7 }       # Defines the appearance of the poles.
  field MFVec3f      path                    [0 0 0, 5 0 0]                        # Defines the 3D path of the crash barrier.
  field SFBool       barrierOnRightSide      TRUE                                  # Defines the side of the barrier.
  field SFInt32      subdivision             -1                                    # Defines the degree of interpolation using B-Splines (if the value is lower than 0, the interpolation is disabled).
  field SFBool       enableBoundingObject    FALSE                                 # Defines whether the crash barrier should have a bounding object.
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';
    import * as wbvector3 from 'wbvector3.js';

    const poleRadius = 0.06;
    const height = 0.8;

    let path = fields.path.value;
    let nbPath = path.length;
    if (nbPath < 2) {
      path = fields.path.defaultValue;
      nbPath = path.length;
      console.error('\'path\' must have at least two components. Value reset to default.');
    }
    const subdivision = fields.subdivision.value;

    // copy original path to use it unchanged in the bounding object
    let originalPath = [];
    for (let i = 0; i < nbPath; ++i)
      originalPath.push(path[i]);

    // compute the length (used for the texture scale)
    if (subdivision > 0) {
      path = wbgeometry.bSpline3(path, subdivision);
      nbPath = path.length;
    }

    let length = 0;
    for (let i = 1; i < nbPath; ++i)
      length += wbvector3.distance(path[i], path[i -1]);
  >%
  Fence {
    translation IS translation
    rotation IS rotation
    name IS name
    height %<= height >%
    poleGap IS poleGap
    poleRadius %<= poleRadius >%
    poleShape "H"
    poleAppearance IS poleAppearance
    path IS path
    subdivision IS subdivision
    horizontalBarsNumber 1
    creaseAngle 0.9
    horizontalBarAppearance PBRAppearance {
      baseColorMap ImageTexture {
        url [
          "webots://projects/objects/road/protos/textures/road_crash_barrier_bar.jpg"
        ]
      }
      roughnessMap ImageTexture {
        url [
          "webots://projects/objects/road/protos/textures/road_crash_barrier_bar_roughness.jpg"
        ]
      }
      textureTransform TextureTransform {
        scale %<= 0.5 * length >% 2
      }
    }
    horizontalBarShape [
    %<
      const barHeight = 0.4;
      const barThickness = 0.05;
      const angleOffset = -0.25 * Math.PI;
      const maxAngle = 3 * Math.PI + 2 * Math.abs(angleOffset);
      const angleSubdivision = 12;
      const lateralOffset = 0.01 + poleRadius;
      const side = fields.barrierOnRightSide.value ? -1 : 1;
    >%
      0 %<= side * poleRadius >%
    %< for (let j = 0; j <= angleSubdivision; ++j) { >%
      %<= -barHeight * j / angleSubdivision >% %<= side * (lateralOffset + barThickness * (1 + Math.sin(angleOffset + maxAngle * j / angleSubdivision))) >%
    %< } >%
      %<= -barHeight >% %<= side * poleRadius >%
    %< for (let j = angleSubdivision; j >= 0; --j) { >%
      %<= -barHeight * j / angleSubdivision >% %<= side * (lateralOffset + barThickness * (1 + Math.sin(angleOffset + maxAngle * j / angleSubdivision))) >%
    %< } >%
      0 %<= side * poleRadius >%
    ]
    %< if (fields.enableBoundingObject.value) { >%
      boundingObject Transform {
        translation 0 0 %<= 0.5 * height >%
        children [
          Extrusion {
            spine [
              %< for (let i = 0; i < originalPath.length; ++i) { >%
                %<= originalPath[i].x >% %<= originalPath[i].y >% %<= originalPath[i].z >%
              %< } >%
            ]
            splineSubdivision %<= fields.subdivision.value >%
            crossSection [
              %<= 0 >% %<= side * lateralOffset >%
              %<= -barHeight >% %<= side * lateralOffset >%
              %<= -barHeight >% %<= side * (lateralOffset + 2 * barThickness) >%
              %<= 0 >% %<= side * (lateralOffset + 2 * barThickness) >%
              %<= 0 >% %<= side * lateralOffset >%
            ]
          }
        ]
      }
    %< } >%
    recognitionColors [ 0.65 0.65 0.65 ]
    model "crash barrier"
  }
}
