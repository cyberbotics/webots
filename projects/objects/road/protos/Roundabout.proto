#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A simple and customizable roundabout, all the roads are equally separated in orientation.
# template language: javascript

PROTO Roundabout [
  field        SFVec3f              translation              0 0 0
  field        SFRotation           rotation                 0 0 1 0
  field        SFString             name                     "roundabout"                          # Defines the roundabout name.
  field        SFString             id                       ""                                    # Optionally defines a unique ID. A unique ID is required to use the SUMO exporter.
  field        MFString             connectedRoadIDs         []                                    # Optionally defines a list of the identifiers of the connected Road. This is required to use the SUMO exporter.
  field        SFInt32              subdivision              16
  field        SFFloat              speedLimit               -1.0                                  # Optionally defines the speed limit. The recommended unit is meter per seconds.
  field        SFBool               bottom                   FALSE                                 # Defines whether the road bottom should be displayed (useful in case of bridge).
  field        SFBool               border                   TRUE                                  # Defines whether the roundabout should have sidewalks.
  field        SFFloat              borderWidth              0.8                                   # Defines the width of the sidewalks.
  field        SFFloat              borderHeight             0.2                                   # Defines the height of the sidewalks.
  field        SFFloat              innerRadius              4                                     # Defines the inner radius of the roundabout.
  field        SFFloat              outerRadius              8                                     # Defines the outer radius of the roundabout.
  field        SFBool               center                   TRUE                                  # Defines whether the roundabout should have a central sidewalk.
  field        MFString             centerTexture            "webots://projects/default/worlds/textures/grass.jpg"                  # Defines the texture to be used for the central part of the roundabout.
  field        SFVec2f              centerTextureScale       4 4                                   # Defines the scale of the texture used for the central part of the roundabout.
  field        SFInt32              roadNumber               4                                     # Defines the number of roads connected to the roundabout.
  field        MFFloat              startRoadsLength         [5]                                   # Defines the length of the roads connected to the roundabout. The same length is used for all the roads if this field has only one item.
  field        SFFloat              startRoadsWidth          7                                     # Defines the width of the roads connected to the roundabout.
  field        SFInt32              startRoadsNumberOfLanes  2                                     # Defines the number of lanes of the roads (used for the texture mapping).
  field        MFString             startRoadsStartLine      [ "webots://projects/objects/road/protos/textures/road_line_dashed.png",    # Optionally defines the texture used for the road line at the first way-point for each lane. If the string is empty, no road line will be added for the corresponding lane. The two textures `textures/road_line_dashed.png` and `textures/road_line_triangle.png` may be used in this field.
                                                         "webots://projects/objects/road/protos/textures/road_line_triangle.png" ]
  field        MFString             startRoadsEndLine        []                                    # Optionally defines the texture used for the road line at the last way-point for each lane. If the string is empty, no road line will be added for the corresponding lane.
  field        MFNode{RoadLine {}}  startRoadsLine           [ RoadLine { } ]                      # Defines the property of each line separating two lanes.
  field        SFBool               roadBoundingObject       FALSE                                 # Defines whether the road should have a bounding object.
  field        SFBool               borderBoundingObject     FALSE                                 # Defines whether the outer sidewalks should have a bounding object.
  field        SFBool               centerBoundingObject     FALSE                                 # Defines whether the central sidewalk should have a bounding object.
  field        SFBool               castShadows              FALSE                                 # Defines whether the road should cast shadows.
  field        SFString             contactMaterial          "default"                             # Is `Solid.contactMaterial`.
  field        SFBool               locked                   TRUE                                  # Is `Solid.locked`.
  field        SFNode               appearance               Asphalt { }                           # Defines the appearance of the road.
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';
    import * as wbvector2 from 'wbvector2.js';

    // fields checks
    let innerRadius = fields.innerRadius.value;
    if (innerRadius < 1) {
      innerRadius = fields.innerRadius.defaultValue;
      console.error('\'innerRadius\' must be greater than 1. Value reset to ' + innerRadius + '.');
    }
    let outerRadius = fields.outerRadius.value;
    if (outerRadius < innerRadius) {
      outerRadius = 2 * innerRadius;
      console.error('\'outerRadius\' must be greater than \'innerRadius\'. Value reset to ' + outerRadius + '.');
    }
    let borderHeight = fields.borderHeight.value;
    if (borderHeight < 0) {
      borderHeight = fields.borderHeight.defaultValue;
      console.error('\'borderHeight\' must be greater or equal to 0. Value reset to ' + borderHeight + '.');
    }
    let borderWidth = fields.borderWidth.value;
    if (borderWidth < 0) {
      borderWidth = fields.borderWidth.defaultValue;
      console.error('\'borderWidth\' must be greater or equal to 0. Value reset to ' + borderWidth + '.');
    }
    let roadNumber = fields.roadNumber.value;
    if (roadNumber < 0) {
      roadNumber = fields.roadNumber.defaultValue;
      console.error('\'roadNumber\' must be greater or equal to 0. Value reset to ' + roadNumber + '.');
    }
    let subdivision = fields.subdivision.value;
    if (subdivision < 8) {
      subdivision = fields.subdivision.defaultValue;
      console.error('\'subdivision\' must be greater than 8. Value reset to ' + subdivision + '.');
    }
    subdivision = subdivision * roadNumber;
    let startRoadsLength = fields.startRoadsLength.value;
    let useIndependentStartRoadLength = true;
    let startRoadsLengthNB = startRoadsLength.length;
    if (startRoadsLengthNB === 0) {
      useIndependentStartRoadLength = false;
      startRoadsLength[0] = 0;
    } else if (startRoadsLengthNB < roadNumber) {
      useIndependentStartRoadLength = false;
      if (startRoadsLengthNB !== 1)
        console.error('\'startRoadsLength\' should either have 1 item or \'roadNumber\' items.');
    }
    if (useIndependentStartRoadLength) {
      for (let i = 0; i < roadNumber; ++i)
        if (startRoadsLength[i] < 0) {
          startRoadsLength[i] = 0;
          console.error('\'startRoadsLength\' values should be greater or equal to 0.');
        }
    } else if (startRoadsLength[0] < 0) {
      startRoadsLength[0] = 0;
      console.error('\'startRoadsLength\' values should be greater or equal to 0.');
    }
    let roadsWidth = fields.startRoadsWidth.value;
    if (roadsWidth < 0) {
      roadsWidth = fields.startRoadsWidth.defaultValue;
      console.error('\'startRoadsWidth\' must be strictly positive. Value reset to ' + roadsWidth + '.');
    }
    const centerBO = fields.centerBoundingObject.value;
    const roadBO   = fields.roadBoundingObject.value;
    const borderBO = fields.borderBoundingObject.value;
    const border   = fields.border.value;
    const outerPoints       = wbgeometry.circle(outerRadius, subdivision, {x: 0, y: 0}, 0);
    const borderOuterPoints = wbgeometry.circle(outerRadius + borderWidth, subdivision, {x: 0, y: 0}, 0);
    const textureCoordinateRatio = 0.2;

    //  check radius, road width and road number constraints is feasible
    const miniumRadius = 1.2 * roadsWidth / (2 * Math.sin(Math.PI/roadNumber));
    let constraintsOk = true;
    if (miniumRadius > outerRadius) {
      console.error('Impossible to respect this set of parameters, try to increase \'outerRadius\', or to reduce \'startRoadsWidth\' or \'roadNumber\'.');
      constraintsOk = false;
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model "roundabout"
    children [
      %< if (constraintsOk) { >%
      # center
      %< if (fields.center.value) { >%
        Solid {
          children [
            Shape {
              appearance PBRAppearance {
                baseColorMap ImageTexture {
                  url IS centerTexture
                }
                textureTransform TextureTransform {
                  scale IS centerTextureScale
                }
                metalness 0
                roughness 1
              }
              geometry DEF CENTER_CYLINDER Cylinder {
                height %<= 0.001 >%
                radius %<= innerRadius - borderWidth >%
                subdivision %<= subdivision >%
                side FALSE
                bottom IS bottom
              }
              castShadows IS castShadows
            }
          ]
          name "center"
          %< if (centerBO) { >%
            boundingObject USE CENTER_CYLINDER
          %< } >%
        }
      %< } >%
      # for each road
      %< for (let i = 0; i <= roadNumber - 1; ++i) { >%
        %<
          let angle         = 2 * Math.PI * i / roadNumber + Math.PI / roadNumber;
          let x             = outerRadius * Math.cos(angle);
          let y             = outerRadius * Math.sin(angle);
          let rotationAngle = -2 * Math.PI * (i + 0.5) / roadNumber + Math.PI * 0.5;
          let theta = Math.atan2(roadsWidth * 0.5, outerRadius);
          let d = roadsWidth * 0.5 - Math.sin(theta) * outerRadius;
          let theta2 = Math.atan2(roadsWidth * 0.5 + 5 * d, outerRadius);
          let centralPoint = {x: x, y: y};
          centralPoint = wbgeometry.findClosestPoint2InArray(centralPoint, outerPoints);
          let point = {x: outerRadius * Math.cos(angle+theta2), y: outerRadius * Math.sin(angle+theta2)};
          point = wbgeometry.findClosestPoint2InArray(point, outerPoints);
          let centralIndex = 0;
          let pointIndex = 0;
          let pointsNumber = outerPoints.length;
          for (let i = 0; i < pointsNumber; ++i)
            if (wbvector2.equal(outerPoints[i], point))
              pointIndex = i;
            else if (wbvector2.equal(outerPoints[i], centralPoint))
              centralIndex = i;

          let numberOfIndex = Math.abs(pointIndex - centralIndex);
        >%
        # The border of the road
        %<
          let roadLength = startRoadsLength[0];
          if (useIndependentStartRoadLength)
            roadLength = startRoadsLength[i + 1];
        >%
        %< if (roadLength > 0) { >%
        Road {
          translation %<= centralPoint.x >% %<= centralPoint.y >% 0
          rotation 0 0 1 %<= 1.5708 - rotationAngle >%
          name "road border %<= i >%"
          width %<= roadsWidth >%
          numberOfLanes IS startRoadsNumberOfLanes
          lines IS startRoadsLine
          startLine IS startRoadsStartLine
          endLine IS startRoadsEndLine
          bottom IS bottom
          rightBorder IS border
          leftBorder IS border
          splineSubdivision -1
          appearance IS appearance
          contactMaterial IS contactMaterial
          roadBorderHeight %<= borderHeight >%
          roadBorderWidth %<= borderWidth >%
          roadBoundingObject IS roadBoundingObject
          rightBorderBoundingObject IS borderBoundingObject
          leftBorderBoundingObject IS borderBoundingObject
          castShadows IS castShadows
          wayPoints [
            0 0 0
            %<= roadLength >% 0 0
          ]
        }
        %< } >%
        # the corresponding part of the roundabout road
        CurvedRoadSegment {
          rotation 0 0 1 %<= 2 * Math.PI * ((centralIndex + numberOfIndex) / subdivision) - Math.PI * 0.5 >%
          name "curve road junction %<= i >%"
          totalAngle %<= 2 * Math.PI * (2 * numberOfIndex / subdivision) >%
          subdivision %<= 2 * Math.abs(centralIndex - pointIndex) >%
          %< if (fields.center.value) { >%
            rightBorder TRUE
          %< } else { >%
            rightBorder FALSE
          %< } >%
          rightBorderBoundingObject IS centerBoundingObject
          contactMaterial IS contactMaterial
          roadBorderHeight %<= borderHeight >%
          roadBorderWidth %<= borderWidth >%
          leftBorder FALSE
          bottom IS bottom
          roadBoundingObject IS roadBoundingObject
          curvatureRadius %<= (innerRadius + outerRadius) * 0.5 >%
          width %<= outerRadius - innerRadius >%
          numberOfLanes 1
          appearance IS appearance
          castShadows IS castShadows
        }
        # the part of the roundabout road the make the junction to the next one
        CurvedRoadSegment {
          rotation 0 0 1 %<= 2 * Math.PI * ((centralIndex - numberOfIndex) / subdivision) - Math.PI * 0.5 >%
          name "curve road %<= i >%"
          totalAngle %<= 2 * Math.PI / roadNumber - 2 * Math.PI * (2 * numberOfIndex / subdivision) >%
          subdivision %<= subdivision / roadNumber - 2 * numberOfIndex >%
          %< if (fields.center.value) { >%
            rightBorder TRUE
          %< } else { >%
            rightBorder FALSE
          %< } >%
          rightBorderBoundingObject IS centerBoundingObject
          leftBorderBoundingObject IS borderBoundingObject
          roadBorderHeight %<= borderHeight >%
          roadBorderWidth %<= borderWidth >%
          leftBorder IS border
          bottom IS bottom
          roadBoundingObject IS roadBoundingObject
          contactMaterial IS contactMaterial
          curvatureRadius %<= (innerRadius + outerRadius) * 0.5 >%
          width %<= outerRadius - innerRadius >%
          numberOfLanes 1
          appearance IS appearance
          castShadows IS castShadows
        }
        # left junction (road)
        Solid {
          rotation 0 0 1 -1.5708
          children [
            Shape {
              appearance IS appearance
              geometry DEF LEFT_ROAD_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %<= outerPoints[centralIndex].y - (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x - (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% 0
                    %< for (let i = 0; i <= numberOfIndex; ++i) { >%
                      %<= outerPoints[centralIndex + i].y >% %<= outerPoints[centralIndex + i].x >% 0
                    %< } >%
                  ]
                }
                texCoord TextureCoordinate {
                  point [
                    %<= (outerPoints[centralIndex].x - (roadsWidth * 0.5) * Math.cos(-rotationAngle)) * textureCoordinateRatio >% %<= (outerPoints[centralIndex].y - (roadsWidth * 0.5) * Math.sin(-rotationAngle)) * textureCoordinateRatio >%
                    %< for (let i = 0; i <= numberOfIndex; ++i) { >%
                      %<= outerPoints[centralIndex + i].x * textureCoordinateRatio >% %<= outerPoints[centralIndex + i].y * textureCoordinateRatio >%
                    %< } >%
                  ]
                }
                coordIndex [
                 %< for (let i = 0; i <= numberOfIndex - 1; ++i) { >%
                  0 %<= i + 1 >% %<= i + 2 >% -1
                 %< } >%
                ]
                texCoordIndex [
                 %< for (let i = 0; i <= numberOfIndex - 1; ++i) { >%
                  0 %<= i + 1 >% %<= i + 2 >% -1
                 %< } >%
                ]
                creaseAngle 0.2
              }
              castShadows IS castShadows
            }
          ]
          name "left junction %<= i >%"
          %< if (roadBO) { >%
            contactMaterial IS contactMaterial
            boundingObject USE LEFT_ROAD_GEOM
          %< } >%
        }
        # left junction (border)
        %< if (border) { >%
        Solid {
          rotation 0 0 1 -1.5708
          children [
            Shape {
              appearance DEF BORDER_APPEARANCE Pavement {
              }
              geometry DEF LEFT_BORDER_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %<= outerPoints[centralIndex].y - (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x - (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% 0
                    %<= outerPoints[centralIndex + numberOfIndex].y >% %<= outerPoints[centralIndex + numberOfIndex].x >% 0

                    %<= outerPoints[centralIndex].y - (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x - (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% %<= borderHeight >%
                    %<= outerPoints[centralIndex + numberOfIndex].y >% %<= outerPoints[centralIndex + numberOfIndex].x >% %<= borderHeight >%

                    %<= outerPoints[centralIndex].y - (roadsWidth * 0.5 + borderWidth) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x - (roadsWidth * 0.5 + borderWidth) * Math.cos(-rotationAngle) >% %<= borderHeight >%
                    %<= borderOuterPoints[centralIndex + numberOfIndex].y >% %<= borderOuterPoints[centralIndex + numberOfIndex].x >% %<= borderHeight >%

                    %<= outerPoints[centralIndex].y - (roadsWidth * 0.5 + borderWidth) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x - (roadsWidth * 0.5 + borderWidth) * Math.cos(-rotationAngle) >% 0
                    %<= borderOuterPoints[centralIndex + numberOfIndex].y >% %<= borderOuterPoints[centralIndex + numberOfIndex].x >% 0
                  ]
                }
                texCoord DEF BORDER_TEXCOORD TextureCoordinate {
                  point [
                    %<= 0 >% %<= 0 >%
                    %<= 1 >% %<= 0 >%
                    %<= 0 >% %<= 0 >%
                    %<= 1 >% %<= 0 >%
                    %<= 0 >% %<= borderWidth >%
                    %<= 1 >% %<= borderWidth >%
                    %<= 0 >% %<= borderWidth >%
                    %<= 1 >% %<= borderWidth >%
                  ]
                }
                coordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                texCoordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
              }
              castShadows IS castShadows
            }
          ]
          name "left junction border %<= i >%"
          %< if (borderBO) { >%
            contactMaterial IS contactMaterial
            boundingObject USE LEFT_BORDER_GEOM
          %< } >%
        }
        %< } >%
        # right junction (road)
        Solid {
          rotation 0 0 1 -1.5708
          children [
            Shape {
              appearance IS appearance
              geometry DEF RIGHT_ROAD_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %<= outerPoints[centralIndex].y + (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x + (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% 0
                    %< for (let i = 0; i <= numberOfIndex; ++i) { >%
                      %<= outerPoints[centralIndex - i].y >% %<= outerPoints[centralIndex - i].x >% 0
                    %< } >%
                  ]
                }
                texCoord TextureCoordinate {
                  point [
                    %<= (outerPoints[centralIndex].x + (roadsWidth * 0.5) * Math.cos(-rotationAngle)) * textureCoordinateRatio >% %<= (outerPoints[centralIndex].y + (roadsWidth * 0.5) * Math.sin(-rotationAngle)) * textureCoordinateRatio >%
                    %< for (let i = 0; i <= numberOfIndex; ++i) { >%
                      %<= outerPoints[centralIndex - i].x * textureCoordinateRatio >% %<= outerPoints[centralIndex - i].y * textureCoordinateRatio >%
                    %< } >%
                  ]
                }
                coordIndex [
                 %< for (let i = 0; i <= numberOfIndex - 1; ++i) { >%
                  0 %<= i + 1 >% %<= i + 2 >% -1
                 %< } >%
                ]
                texCoordIndex [
                  %< for (let i = 0; i <= numberOfIndex - 1; ++i) { >%
                   0 %<= i + 1 >% %<= i + 2 >% -1
                  %< } >%
                ]
                creaseAngle 0.2
                ccw FALSE
              }
              castShadows IS castShadows
            }
          ]
          name "right junction %<= i >%"
          %< if (roadBO) { >%
            contactMaterial IS contactMaterial
            boundingObject USE RIGHT_ROAD_GEOM
          %< } >%
        }
        # right junction (border)
        %< if (border) { >%
        Solid {
          rotation 0 0 1 -1.5708
          children [
            Shape {
              appearance USE BORDER_APPEARANCE
              geometry DEF RIGHT_BORDER_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %<= outerPoints[centralIndex].y + (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x + (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% 0
                    %<= outerPoints[centralIndex - numberOfIndex].y >% %<= outerPoints[centralIndex - numberOfIndex].x >% 0

                    %<= outerPoints[centralIndex].y + (roadsWidth * 0.5) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x + (roadsWidth * 0.5) * Math.cos(-rotationAngle) >% %<= borderHeight >%
                    %<= outerPoints[centralIndex - numberOfIndex].y >% %<= outerPoints[centralIndex - numberOfIndex].x >% %<= borderHeight >%

                    %<= outerPoints[centralIndex].y + (roadsWidth * 0.5 + borderWidth) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x + (roadsWidth * 0.5 + borderWidth) * Math.cos(-rotationAngle) >% %<= borderHeight >%
                    %<= borderOuterPoints[centralIndex - numberOfIndex].y >% %<= borderOuterPoints[centralIndex - numberOfIndex].x >% %<= borderHeight >%

                    %<= outerPoints[centralIndex].y + (roadsWidth * 0.5 + borderWidth) * Math.sin(-rotationAngle) >% %<= outerPoints[centralIndex].x + (roadsWidth * 0.5 + borderWidth) * Math.cos(-rotationAngle) >% 0
                    %<= borderOuterPoints[centralIndex - numberOfIndex].y >% %<= borderOuterPoints[centralIndex - numberOfIndex].x >% 0
                  ]
                }
                texCoord USE BORDER_TEXCOORD
                coordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                texCoordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                ccw FALSE
              }
              castShadows IS castShadows
            }
          ]
          name "right junction border %<= i >%"
          %< if (borderBO) { >%
            contactMaterial IS contactMaterial
            boundingObject USE RIGHT_BORDER_GEOM
          %< } >%
        }
        %< } >%
      %< } >%
    %< } >%
    ]
    locked IS locked
  }
}
