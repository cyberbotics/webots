#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A simple and customizable roundabout, all the roads are equally separated in orientation.

PROTO Roundabout [
  field        SFVec3f              translation              0 0 0
  field        SFRotation           rotation                 0 1 0 0
  field        SFString             name                     "roundabout"                          # Defines the roundabout name.
  field        SFString             id                       ""                                    # Optionally defines a unique ID. A unique ID is required to use the SUMO exporter.
  field        MFString             connectedRoadIDs         []                                    # Optionally defines a list of the identifiers of the connected Road. This is required to use the SUMO exporter.
  field        SFInt32              subdivision              16
  field        SFFloat              speedLimit               -1.0                                  # Optionally defines the speed limit. The recommended unit is meter per seconds.
  field        SFBool               bottom                   FALSE                                 # Defines whether the road bottom should be displayed (useful in case of bridge).
  field        SFBool               border                   TRUE                                  # Defines whether the roundabout should have sidewalks.
  field        SFFloat              borderWidth              0.8                                   # Defines the width of the sidewalks.
  field        SFFloat              borderHeight             0.2                                   # Defines the height of the sidewalks.
  field        SFFloat              innerRadius              4                                     # Defines the inner radius of the roundabout.
  field        SFFloat              outerRadius              8                                     # Defines the outer radius of the roundabout.
  field        SFBool               center                   TRUE                                  # Defines whether the roundabout should have a central sidewalk.
  field        MFString             centerTexture            "textures/grass.jpg"                  # Defines the texture to be used for the central part of the roundabout.
  field        SFVec2f              centerTextureScale       4 4                                   # Defines the scale of the texture used for the central part of the roundabout.
  field        SFInt32              roadNumber               4                                     # Defines the number of roads connected to the roundabout.
  field        MFFloat              startRoadsLength         [5]                                   # Defines the length of the roads connected to the roundabout. The same length is used for all the roads if this field has only one item.
  field        SFFloat              startRoadsWidth          7                                     # Defines the width of the roads connected to the roundabout.
  field        SFInt32              startRoadsNumberOfLanes  2                                     # Defines the number of lanes of the roads (used for the texture mapping).
  field        MFString             startRoadsStartLine      [ "textures/road_line_dashed.png",    # Optionally defines the texture used for the road line at the first way-point for each lane. If the string is empty, no road line will be added for the corresponding lane. The two textures `textures/road_line_dashed.png` and `textures/road_line_triangle.png` may be used in this field.
                                                                  "textures/road_line_triangle.png" ]
  field        MFString             startRoadsEndLine        []                                    # Optionally defines the texture used for the road line at the last way-point for each lane. If the string is empty, no road line will be added for the corresponding lane.
  field        MFNode{RoadLine {}}  startRoadsLine           [ RoadLine { } ]                      # Defines the property of each line separating two lanes.
  field        SFBool               roadBoundingObject       FALSE                                 # Defines whether the road should have a bounding object.
  field        SFBool               borderBoundingObject     FALSE                                 # Defines whether the outer sidewalks should have a bounding object.
  field        SFBool               centerBoundingObject     FALSE                                 # Defines whether the central sidewalk should have a bounding object.
  field        SFBool               castShadows              FALSE                                 # Defines whether the road should cast shadows.
  field        SFString             contactMaterial          "default"                             # Is `Solid.contactMaterial`.
  field        SFBool               locked                   TRUE                                  # Is `Solid.locked`.
  field        SFNode               appearance               Asphalt { }                           # Defines the appearance of the road.

  hiddenField  SFFloat              startRoadsWith       7                                   # Deprecated in Webots R2018b
  hiddenField  MFBool               startRoadsDashedLine FALSE                               # Deprecated in Webots R2018c.
]
{
  %{
    local wbgeometry = require('wbgeometry')
    local wbvector2  = require('wbvector2')
    local wbcore     = require('wbcore')

    -- fields checks
    local innerRadius = fields.innerRadius.value
    if innerRadius < 1 then
      io.stderr:write("'innerRadius' must be greater than 1\n")
      innerRadius = fields.innerRadius.defaultValue
    end
    local outerRadius = fields.outerRadius.value
    if outerRadius < innerRadius then
      io.stderr:write("'outerRadius' must be greater than 'innerRadius'\n")
      outerRadius = 2 * innerRadius
    end
    local borderHeight = fields.borderHeight.value
    if borderHeight < 0 then
      io.stderr:write("'borderHeight' must be positive\n")
      borderHeight = fields.borderHeight.defaultValue
    end
    local borderWidth = fields.borderWidth.value
    if borderWidth < 0 then
      io.stderr:write("'borderWidth' must be positive\n")
      borderWidth = fields.borderWidth.defaultValue
    end
    local roadNumber = fields.roadNumber.value
    if roadNumber < 0 then
      io.stderr:write("'roadNumber' must be positive\n")
      roadNumber = fields.roadNumber.defaultValue
    end
    local subdivision = fields.subdivision.value
    if subdivision < 8 then
      io.stderr:write("'subdivision' must be greater than 8\n")
      subdivision = fields.subdivision.defaultValue
    end
    subdivision = subdivision * roadNumber
    local startRoadsLength = fields.startRoadsLength.value
    local useIndependentStartRoadLength = true
    local startRoadsLengthNB = wbcore.tablelength(startRoadsLength)
    if startRoadsLengthNB == 0 then
      useIndependentStartRoadLength = false
      startRoadsLength[1] = 0
    elseif startRoadsLengthNB < roadNumber then
      useIndependentStartRoadLength = false
      if startRoadsLengthNB ~= 1 then
        io.stderr:write("'startRoadsLength' should either have 1 item or 'roadNumber' items.\n")
      end
    end
    if useIndependentStartRoadLength then
      for i = 1, roadNumber do
        if startRoadsLength[i] < 0 then
          io.stderr:write("'startRoadsLength' values should be greater or equal to 0.\n")
          startRoadsLength[i] = 0
        end
      end
    elseif startRoadsLength[1] < 0 then
      io.stderr:write("'startRoadsLength' values should be greater or equal to 0.\n")
      startRoadsLength[1] = 0
    end
    local roadsWidth = fields.startRoadsWidth.value
    if roadsWidth == fields.startRoadsWidth.defaultValue then
      roadsWidth = fields.startRoadsWith.value
      if roadsWidth ~= fields.startRoadsWith.defaultValue then
        io.stderr:write("Deprecated 'startRoadsWith' field, use 'startRoadsWidth' instead\n")
      end
    end
    if roadsWidth < 0 then
      io.stderr:write("'startRoadsWidth' must be positive\n")
      roadsWidth =  fields.startRoadsWidth.defaultValue
    end
    local centerBO = fields.centerBoundingObject.value
    local roadBO   = fields.roadBoundingObject.value
    local borderBO = fields.borderBoundingObject.value
    local border   = fields.border.value
    local outerPoints       = wbgeometry.circle(outerRadius, subdivision, 0, 0, 0)
    local borderOuterPoints = wbgeometry.circle(outerRadius + borderWidth, subdivision, 0, 0, 0)
    local textureCoordinateRatio = 0.2

    --  check radius, road width and road number constraints is feasible
    local miniumRadius = 1.2 * roadsWidth / (2 * math.sin(math.pi/roadNumber))
    local constraintsOk = true
    if miniumRadius > outerRadius then
      io.stderr:write("Impossible to respect this set of parameters, try to increase 'outerRadius', or to reduce 'startRoadsWidth' or 'roadNumber'.\n")
      constraintsOk = false
    end
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model "roundabout"
    children [
      %{ if constraintsOk then }%
      # center
      %{ if fields.center.value then }%
        Solid {
          children [
            Shape {
              appearance PBRAppearance {
                baseColorMap ImageTexture {
                  url IS centerTexture
                }
                textureTransform TextureTransform {
                  scale IS centerTextureScale
                }
                metalness 0
                roughness 1
              }
              geometry DEF CENTER_CYLINDER Cylinder {
                height %{= 0.001 }%
                radius %{= innerRadius - borderWidth }%
                subdivision %{= subdivision }%
                side FALSE
                bottom IS bottom
              }
              castShadows IS castShadows
            }
          ]
          name "center"
          %{ if centerBO then }%
            boundingObject USE CENTER_CYLINDER
          %{ end }%
        }
      %{ end }%
      # for each roads
      %{ for i = 0, roadNumber - 1 do }%
        %{
          local angle         = 2 * math.pi * i / roadNumber + math.pi / roadNumber
          local x             = outerRadius * math.cos(angle)
          local z             = outerRadius * math.sin(angle)
          local rotationAngle = -2 * math.pi * (i + 0.5) / roadNumber + math.pi / 2
          local theta = math.atan2( roadsWidth/2, outerRadius)
          local d = roadsWidth/2 - math.sin(theta) * outerRadius
          local theta2 = math.atan2( roadsWidth/2 + 5 * d, outerRadius)
          local centralPoint = { x = x, y = z }
          centralPoint = wbgeometry.findclosest2Dpointinarray(centralPoint, outerPoints)
          local point = { x = outerRadius * math.cos(angle+theta2), y = outerRadius * math.sin(angle+theta2) }
          point = wbgeometry.findclosest2Dpointinarray(point, outerPoints)
          local centralIndex = 0
          local pointIndex = 0
          local pointsNumber = wbcore.tablelength(outerPoints)
          for i = 1, pointsNumber do
            if wbvector2.equal(outerPoints[i], point) then
              pointIndex = i
            elseif wbvector2.equal(outerPoints[i], centralPoint) then
              centralIndex = i
            end
          end
          numberOfIndex = math.abs(pointIndex - centralIndex)
        }%
        # The border of the road
        %{
          local roadLength = startRoadsLength[1]
          if useIndependentStartRoadLength then
            roadLength = startRoadsLength[i + 1]
          end
        }%
        %{ if roadLength > 0 then }%
        Road {
          translation %{= centralPoint.x }% 0 %{= centralPoint.y }%
          rotation 0 1 0 %{= rotationAngle }%
          name "road border %{=i}%"
          width %{= roadsWidth }%
          numberOfLanes IS startRoadsNumberOfLanes
          dashedLine IS startRoadsDashedLine
          lines IS startRoadsLine
          startLine IS startRoadsStartLine
          endLine IS startRoadsEndLine
          bottom IS bottom
          rightBorder IS border
          leftBorder IS border
          splineSubdivision -1
          appearance IS appearance
          contactMaterial IS contactMaterial
          roadBorderHeight %{= borderHeight }%
          roadBorderWidth %{= borderWidth }%
          roadBoundingObject IS roadBoundingObject
          rightBorderBoundingObject IS borderBoundingObject
          leftBorderBoundingObject IS borderBoundingObject
          castShadows IS castShadows
          wayPoints [
            0 0 0
            0 0 %{= roadLength }%
          ]
        }
        %{ end }%
        # the corresponding part of the roundabout road
        CurvedRoadSegment {
          rotation 0 1 0 %{= 2 * math.pi * ((centralIndex + numberOfIndex - 1) / subdivision) }%
          name "curve road junction %{=i}%"
          totalAngle %{= 2 * math.pi * (2 * numberOfIndex / subdivision) }%
          subdivision %{= 2 * math.abs(centralIndex - pointIndex) }%
          %{ if fields.center.value then }%
            rightBorder TRUE
          %{ else }%
            rightBorder FALSE
          %{ end }%
          rightBorderBoundingObject IS centerBoundingObject
          contactMaterial IS contactMaterial
          roadBorderHeight %{= borderHeight }%
          roadBorderWidth %{= borderWidth }%
          leftBorder FALSE
          bottom IS bottom
          roadBoundingObject IS roadBoundingObject
          curvatureRadius %{= (innerRadius + outerRadius) / 2 }%
          width %{= outerRadius - innerRadius }%
          numberOfLanes 1
          appearance IS appearance
          castShadows IS castShadows
        }
        # the part of the roundabout road the make the junction to the next one
        CurvedRoadSegment {
          rotation 0 1 0 %{= 2 * math.pi * ((centralIndex - numberOfIndex - 1) / subdivision) }%
          name "curve road %{=i}%"
          totalAngle %{= 2 * math.pi / roadNumber - 2 * math.pi * (2 * numberOfIndex / subdivision) }%
          subdivision %{= subdivision / roadNumber - 2 * numberOfIndex }%
          %{ if fields.center.value then }%
            rightBorder TRUE
          %{ else }%
            rightBorder FALSE
          %{ end }%
          rightBorderBoundingObject IS centerBoundingObject
          leftBorderBoundingObject IS borderBoundingObject
          roadBorderHeight %{= borderHeight }%
          roadBorderWidth %{= borderWidth }%
          leftBorder IS border
          bottom IS bottom
          roadBoundingObject IS roadBoundingObject
          contactMaterial IS contactMaterial
          curvatureRadius %{= (innerRadius + outerRadius) / 2 }%
          width %{= outerRadius - innerRadius }%
          numberOfLanes 1
          appearance IS appearance
          castShadows IS castShadows
        }
        # left junction (road)
        Solid {
          children [
            Shape {
              appearance IS appearance
              geometry DEF LEFT_ROAD_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %{= outerPoints[centralIndex].x - (roadsWidth/2) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y - (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{ for i = 0, numberOfIndex do }%
                      %{= outerPoints[centralIndex + i].x }% 0 %{= outerPoints[centralIndex + i].y }%
                    %{ end }%
                  ]
                }
                texCoord TextureCoordinate {
                  point [
                    %{= (outerPoints[centralIndex].x - (roadsWidth/2) * math.cos(-rotationAngle)) * textureCoordinateRatio }% %{= (outerPoints[centralIndex].y - (roadsWidth/2) * math.sin(-rotationAngle)) * textureCoordinateRatio }%
                    %{ for i = 0, numberOfIndex do }%
                      %{= outerPoints[centralIndex + i].x * textureCoordinateRatio }% %{= outerPoints[centralIndex + i].y * textureCoordinateRatio }%
                    %{ end }%
                  ]
                }
                coordIndex [
                 %{ for i = 0, numberOfIndex - 1 do }%
                  0 %{= i + 1 }% %{= i + 2 }% -1
                 %{ end }%
                ]
                texCoordIndex [
                 %{ for i = 0, numberOfIndex - 1 do }%
                  0 %{= i + 1 }% %{= i + 2 }% -1
                 %{ end }%
                ]
                creaseAngle 0.2
              }
              castShadows IS castShadows
            }
          ]
          name "left junction %{=i}%"
          %{ if roadBO then }%
            contactMaterial IS contactMaterial
            boundingObject USE LEFT_ROAD_GEOM
          %{ end }%
        }
        # left junction (border)
        %{ if border then }%
        Solid {
          children [
            Shape {
              appearance DEF BORDER_APPEARANCE StonePavement {
              }
              geometry DEF LEFT_BORDER_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %{= outerPoints[centralIndex].x - (roadsWidth/2) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y - (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{= outerPoints[centralIndex + numberOfIndex].x }% 0 %{= outerPoints[centralIndex + numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x - (roadsWidth/2) * math.cos(-rotationAngle) }% %{= borderHeight }% %{= outerPoints[centralIndex].y - (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{= outerPoints[centralIndex + numberOfIndex].x }% %{= borderHeight }% %{= outerPoints[centralIndex + numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x - (roadsWidth/2 + borderWidth) * math.cos(-rotationAngle) }% %{= borderHeight }% %{= outerPoints[centralIndex].y - (roadsWidth/2 + borderWidth) * math.sin(-rotationAngle) }%
                    %{= borderOuterPoints[centralIndex + numberOfIndex].x }% %{= borderHeight }% %{= borderOuterPoints[centralIndex + numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x - (roadsWidth/2 + borderWidth) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y - (roadsWidth/2 + borderWidth) * math.sin(-rotationAngle) }%
                    %{= borderOuterPoints[centralIndex + numberOfIndex].x }% 0 %{= borderOuterPoints[centralIndex + numberOfIndex].y }%
                  ]
                }
                texCoord DEF BORDER_TEXCOORD TextureCoordinate {
                  point [
                    %{= 0 }% %{= 0 }%
                    %{= 1 }% %{= 0 }%
                    %{= 0 }% %{= 0 }%
                    %{= 1 }% %{= 0 }%
                    %{= 0 }% %{= borderWidth }%
                    %{= 1 }% %{= borderWidth }%
                    %{= 0 }% %{= borderWidth }%
                    %{= 1 }% %{= borderWidth }%
                  ]
                }
                coordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                texCoordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
              }
              castShadows IS castShadows
            }
          ]
          name "left junction border %{=i}%"
          %{ if borderBO then }%
            contactMaterial IS contactMaterial
            boundingObject USE LEFT_BORDER_GEOM
          %{ end }%
        }
        %{ end }%
        # right junction (road)
        Solid {
          children [
            Shape {
              appearance IS appearance
              geometry DEF RIGHT_ROAD_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %{= outerPoints[centralIndex].x + (roadsWidth/2) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y + (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{ for i = 0, numberOfIndex do }%
                      %{= outerPoints[centralIndex - i].x }% 0 %{= outerPoints[centralIndex - i].y }%
                    %{ end }%
                  ]
                }
                texCoord TextureCoordinate {
                  point [
                    %{= (outerPoints[centralIndex].x + (roadsWidth/2) * math.cos(-rotationAngle)) * textureCoordinateRatio }% %{= (outerPoints[centralIndex].y + (roadsWidth/2) * math.sin(-rotationAngle)) * textureCoordinateRatio }%
                    %{ for i = 0, numberOfIndex do }%
                      %{= outerPoints[centralIndex - i].x * textureCoordinateRatio }% %{= outerPoints[centralIndex - i].y * textureCoordinateRatio }%
                    %{ end }%
                  ]
                }
                coordIndex [
                 %{ for i = 0, numberOfIndex - 1 do }%
                  0 %{= i + 1 }% %{= i + 2 }% -1
                 %{ end }%
                ]
                texCoordIndex [
                  %{ for i = 0, numberOfIndex - 1 do }%
                   0 %{= i + 1 }% %{= i + 2 }% -1
                  %{ end }%
                ]
                creaseAngle 0.2
                ccw FALSE
              }
              castShadows IS castShadows
            }
          ]
          name "right junction %{=i}%"
          %{ if roadBO then }%
            contactMaterial IS contactMaterial
            boundingObject USE RIGHT_ROAD_GEOM
          %{ end }%
        }
        # right junction (border)
        %{ if border then }%
        Solid {
          children [
            Shape {
              appearance USE BORDER_APPEARANCE
              geometry DEF RIGHT_BORDER_GEOM IndexedFaceSet {
                coord Coordinate {
                  point [
                    %{= outerPoints[centralIndex].x + (roadsWidth/2) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y + (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{= outerPoints[centralIndex - numberOfIndex].x }% 0 %{= outerPoints[centralIndex - numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x + (roadsWidth/2) * math.cos(-rotationAngle) }% %{= borderHeight }% %{= outerPoints[centralIndex].y + (roadsWidth/2) * math.sin(-rotationAngle) }%
                    %{= outerPoints[centralIndex - numberOfIndex].x }% %{= borderHeight }% %{= outerPoints[centralIndex - numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x + (roadsWidth/2 + borderWidth) * math.cos(-rotationAngle) }% %{= borderHeight }% %{= outerPoints[centralIndex].y + (roadsWidth/2 + borderWidth) * math.sin(-rotationAngle) }%
                    %{= borderOuterPoints[centralIndex - numberOfIndex].x }% %{= borderHeight }% %{= borderOuterPoints[centralIndex - numberOfIndex].y }%

                    %{= outerPoints[centralIndex].x + (roadsWidth/2 + borderWidth) * math.cos(-rotationAngle) }% 0 %{= outerPoints[centralIndex].y + (roadsWidth/2 + borderWidth) * math.sin(-rotationAngle) }%
                    %{= borderOuterPoints[centralIndex - numberOfIndex].x }% 0 %{= borderOuterPoints[centralIndex - numberOfIndex].y }%
                  ]
                }
                texCoord USE BORDER_TEXCOORD
                coordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                texCoordIndex [
                 0 1 3 2 -1
                 2 3 5 4 -1
                 4 5 7 6 -1
                ]
                ccw FALSE
              }
              castShadows IS castShadows
            }
          ]
          name "right junction border %{=i}%"
          %{ if borderBO then }%
            contactMaterial IS contactMaterial
            boundingObject USE RIGHT_BORDER_GEOM
          %{ end }%
        }
        %{ end }%
      %{ end }%
    %{ end }%
    ]
    locked IS locked
  }
}
