#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A simple segment of road allowing to divide a road into two smaller ones (or to assemble two roads into a bigger one).
# The number of lanes of each of the two smaller roads is independently configurable as well as a lot of others parameters of a regular road.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).
# template language: javascript

PROTO LaneSeparation [
  field        SFVec3f              translation                 0 0 0
  field        SFRotation           rotation                    0 0 1 0
  field        SFString             name                        "road"                   # Defines the junction name.
  field        SFString             id                          ""                       # Optionally defines a unique ID. A unique ID is required to use the SUMO exporter.
  field        MFString             connectedRoadIDs            []                       # Optionally defines a list of the identifiers of the connected Road. This is required to use the SUMO exporter.
  field        SFFloat              width                       14                       # Defines the total width of the road (excluding sidewalk).
  field        SFFloat              length                      5                        # Defines the length of the segment.
  field        SFInt32              numberOfLanes               4                        # Defines the total number of lanes (used for the texture mapping).
  field        SFInt32              numberOfleavingLanes        2                        # Defines the number of lanes leaving the road.
  field        SFFloat              speedLimit                -1.0                       # Optionally defines the speed limit. The recommended unit is meter per seconds.
  field        SFBool               newLaneLeft                 TRUE                     # Defines on which sied the lanes are leaving the road.
  field        MFNode{RoadLine {}}  lines                       [ RoadLine { } ]         # Defines the property of each line separating two lanes.
  field        SFFloat              roadBorderHeight            0.15                     # Defines the height of the sidewalk.
  field        SFFloat              roadBorderWidth             0.8                      # Defines the width of the sidewalk.
  field        SFBool               rightBorder                 TRUE                     # Defines whether the road should have a right sidewalk.
  field        SFBool               leftBorder                  TRUE                     # Defines whether the road should have a left sidewalk.
  field        SFBool               centralBorder               TRUE                     # Defines whether the road should have a central sidewalk.
  field        SFBool               rightBarrier                FALSE                    # Defines whether the road should have a right barrier.
  field        SFBool               leftBarrier                 FALSE                    # Defines whether the road should have a left barrier.
  field        SFBool               bottom                      FALSE                    # Defines whether the road bottom should be displayed (useful in case of bridge).
  field        MFString             startLine                   []                       # Optionally defines the texture used for the road line at the first way-point for each lane. If the string is empty, no road line will be added for the corresponding lane. The two textures `textures/road_line_dashed.png` and `textures/road_line_triangle.png` may be used in this field.
  field        MFString             endLine                     []                       # Optionally defines the texture used for the road line at the last way-point for each lane. If the string is empty, no road line will be added for the corresponding lane.
  field        SFNode               appearance                  Asphalt { }              # Defines the appearance of the road.
  field        SFNode               pavementAppearance          Pavement { }             # Defines the appearance of the sidewalk.
  field        MFString             bottomTexture               []                       # Defines the texture to be used for the bottom of the road.
  field        SFBool               locked                      TRUE                     # Is `Solid.locked`.
  field        SFBool               roadBoundingObject          FALSE                    # Defines whether the road should have a bounding object.
  field        SFBool               rightBorderBoundingObject   FALSE                    # Defines whether the right sidewalk should have a bounding object.
  field        SFBool               leftBorderBoundingObject    FALSE                    # Defines whether the left sidewalk should have a bounding object.
  field        SFBool               centralBorderBoundingObject FALSE                    # Defines whether the central sidewalk should have a bounding object.
  field        SFBool               rightBarrierBoundingObject  TRUE                     # Defines whether the right crash barrier (if any) should have a bounding object.
  field        SFBool               leftBarrierBoundingObject   TRUE                     # Defines whether the left crash barrier (if any) should have a bounding object.
  field        SFBool               castShadows                 FALSE                    # Defines whether the road should cast shadows.
  field        SFString             contactMaterial             "default"                # Is `Solid.contactMaterial`.
]
{
  %<
    // fields checks
    let width = fields.width.value;
    if (width <= 0.0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be strictly positive. Value reset to ' + width + '.');
    }
    let length = fields.length.value;
    if (length <= 0.0) {
      length = fields.length.defaultValue;
      console.error('\'length\' must be strictly positive. Value reset to ' + length + '.');
    }
    let numberOfleavingLanes = fields.numberOfleavingLanes.value;
    if (numberOfleavingLanes < 1) {
      numberOfleavingLanes = fields.numberOfleavingLanes.defaultValue;
      console.error('\'numberOfleavingLanes\' must be greater than 1. Value reset to ' + numberOfleavingLanes + '.');
    }
    let lanes = fields.numberOfLanes.value;
    if (lanes < 1) {
      lanes = fields.numberOfLanes.defaultValue;
      console.error('\'numberOfLanes\' must be greater than 1. Value reset to ' + lanes + '.');
    }
    let borderHeight = fields.roadBorderHeight.value;
    if (borderHeight < 0) {
      borderHeight = fields.roadBorderHeight.defaultValue;
      console.error('\'roadBorderHeight\' must be greater or equal to zero. Value reset to ' + borderHeight + '.');
    }
    let borderWidth = fields.roadBorderWidth.value;
    if (borderWidth < 0) {
      borderWidth = fields.roadBorderWidth.defaultValue;
      console.error('\'roadBorderWidth\' must be greater or equal to zero. Value reset to ' + borderWidth + '.');
    }

    const newLaneLeft = fields.newLaneLeft.value;
    const sideSign    = newLaneLeft ? 1 : -1;
    let roadLines = fields.lines.value;
    for (let i = 0; i < roadLines.length; ++i) {
      if (roadLines[i].node_name !== 'RoadLine') {
        roadLines[i] = undefined;
        console.error('Only \'RoadLine\' nodes should be added in the \'lines\' field.');
      }
    }
    const startLine       = fields.startLine.value;
    const endLine         = fields.endLine.value;
    const centralBorder   = fields.centralBorder.value;
    const centralBorderBO = fields.centralBorderBoundingObject.value;
    const bottom          = fields.bottom.value;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model "lane separation"
    children [
      Group {
        children IS lines
      }
      StraightRoadSegment {
        translation 0 %<= -sideSign * (width/2) * (1 - numberOfleavingLanes/lanes) >% 0
        name "road 1"
        width %<= width * (1 - numberOfleavingLanes/lanes) >%
        numberOfLanes %<= lanes - numberOfleavingLanes >%
        %< if (newLaneLeft) { >%
          rightBorder IS leftBorder
          rightBarrier IS rightBarrier
          rightBarrierBoundingObject IS rightBarrierBoundingObject
          leftBorder FALSE
          lines IS lines
          startLine [
          %< for (let i = 0; i < lanes - numberOfleavingLanes; ++i) { >%
            %< if (startLine[i]) { >%
              %<= '"' + startLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
          endLine [
          %< for (let i = 0; i < lanes - numberOfleavingLanes; ++i) { >%
            %< if (endLine[i]) { >%
              %<= '"' + endLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
        %< } else { >%
          leftBorder IS rightBorder
          rightBorder FALSE
          leftBarrier IS leftBarrier
          leftBarrierBoundingObject IS leftBarrierBoundingObject
          lines [
          %< for (let i = numberOfleavingLanes; i <= lanes; ++i) { >%
            %< if (roadLines[i]) { >%
              RoadLine {
                color %<= roadLines[i].fields.color.value.r >% %<= roadLines[i].fields.color.value.g >% %<= roadLines[i].fields.color.value.b >%
                type %<=  '"' + roadLines[i].fields.type.value  + '"' >%
                width %<= roadLines[i].fields.width.value >%
             }
            %< } >%
          %< } >%
          ]
          startLine [
          %< for (let i = numberOfleavingLanes + 1; i <= lanes; ++i) { >%
            %< if (startLine[i]) { >%
              %<= '"' + startLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
          endLine [
          %< for (let i = numberOfleavingLanes + 1; i <= lanes; ++i) { >%
            %< if (endLine[i]) { >%
              %<= '"' + endLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
        %< } >%
        bottom IS bottom
        roadBorderHeight IS roadBorderHeight
        startingRoadBorderWidth IS roadBorderWidth
        endingRoadBorderWidth IS roadBorderWidth
        appearance IS appearance
        pavementAppearance IS pavementAppearance
        roadBoundingObject IS roadBoundingObject
        rightBorderBoundingObject IS rightBorderBoundingObject
        leftBorderBoundingObject IS leftBorderBoundingObject
        contactMaterial IS contactMaterial
        length IS length
        castShadows IS castShadows
      }
      Road {
        translation 0 %<= sideSign * (width/2) * (numberOfleavingLanes/lanes) >% 0
        name "road 2"
        width %<= width * (numberOfleavingLanes/lanes) >%
        numberOfLanes IS numberOfleavingLanes
        %< if (newLaneLeft) { >%
          rightBorder FALSE
          leftBorder IS leftBorder
          leftBarrier IS leftBarrier
          leftBarrierBoundingObject IS leftBarrierBoundingObject
          lines [
          %< for (let i = lanes - numberOfleavingLanes; i <= lanes; ++i) { >%
            %< if (roadLines[i]) { >%
              RoadLine {
                color %<= roadLines[i].fields.color.value.r >% %<= roadLines[i].fields.color.value.g >% %<= roadLines[i].fields.color.value.b >%
                type %<= '"' + roadLines[i].fields.type.value + '"' >%
                width %<= roadLines[i].fields.width.value >%
             }
            %< } >%
          %< } >%
          ]
          startLine [
          %< for (let i = lanes - numberOfleavingLanes + 1; i <= lanes; ++i) { >%
            %< if (startLine[i]) { >%
              %<= '"' + startLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
          endLine [
          %< for (let i = lanes - numberOfleavingLanes + 1; i <= lanes; ++i) { >%
            %< if (endLine[i]) { >%
              %<= '"' + endLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
        %< } else { >%
          leftBorder FALSE
          rightBorder IS rightBorder
          rightBarrier IS rightBarrier
          rightBarrierBoundingObject IS rightBarrierBoundingObject
          lines [
          %< for (let i = 0; i < numberOfleavingLanes - 1; ++i) { >%
            %< if (roadLines[i]) { >%
              RoadLine {
                color %<= roadLines[i].fields.color.value.r >% %<= roadLines[i].fields.color.value.g >% %<= roadLines[i].fields.color.value.b >%
                type %<= '"' +  roadLines[i].fields.type.value  + '"' >%
                width %<= roadLines[i].fields.width.value >%
              }
            %< } >%
          %< } >%
          ]
          startLine [
          %< for (let i = 0; i < numberOfleavingLanes; ++i) { >%
            %< if (startLine[i]) { >%
              %<= '"' + startLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
          endLine [
          %< for (let i = 0; i < numberOfleavingLanes; ++i) { >%
            %< if (endLine[i]) { >%
              %<= '"' + endLine[i] + '"' >%
            %< } >%
          %< } >%
          ]
        %< } >%
        bottom IS bottom
        roadBorderHeight IS roadBorderHeight
        roadBorderWidth [
          %<= borderWidth >%
        ]
        appearance IS appearance
        pavementAppearance IS pavementAppearance
        roadBoundingObject IS roadBoundingObject
        rightBorderBoundingObject IS rightBorderBoundingObject
        leftBorderBoundingObject IS leftBorderBoundingObject
        contactMaterial IS contactMaterial
        castShadows IS castShadows
        wayPoints [
          0 0 0
          %<= length >% %<= sideSign * borderWidth * 2 >% 0
        ]
        startingAngle [
          0
        ]
        endingAngle [
          0
        ]
        splineSubdivision 0
      }
      # Central border
      %< if (centralBorder) { >%
        Solid {
          children [
            Shape {
              appearance IS pavementAppearance
              geometry DEF CENTRAL_BORDER_GEOMETRY IndexedFaceSet {
                coord Coordinate {
                  point [
                    0 0                                           0
                    0 0                                 %<= borderHeight >%
                    %<= length >% 0                                           0
                    %<= length >% 0                                 %<= borderHeight >%
                    %<= length >% %<= sideSign * borderWidth * 2 >%           0
                    %<= length >% %<= sideSign * borderWidth * 2 >% %<= borderHeight >%
                  ]
                }
                texCoord TextureCoordinate {
                  point [
                    0             0
                    0             0
                    %<= length >% 0
                    %<= length >% 0
                    %<= length >% %<= 2 * borderWidth >%
                    %<= length >% %<= 2 * borderWidth >%
                  ]
                }
                coordIndex [
                %< if (newLaneLeft) { >%
                  1 0 2 3 -1
                  0 1 5 4 -1
                  1 3 5 -1
                %< } else { >%
                  0 1 3 2 -1
                  1 0 4 5 -1
                  1 5 3 -1
                %< } >%
                ]
                texCoordIndex [
                %< if (newLaneLeft) { >%
                  1 0 2 3 -1
                  0 1 5 4 -1
                  1 3 5 -1
                %< } else { >%
                  0 1 3 2 -1
                  1 0 4 5 -1
                  1 5 3 -1
                %< } >%
                ]
                creaseAngle 0.2
              }
              castShadows IS castShadows
            }
            # Central bottom
            %< if (bottom) { >%
              Shape {
                appearance PBRAppearance {
                  metalness 0
                  roughness 1
                }
                geometry DEF CENTRAL_BOTTOM_GEOMETRY IndexedFaceSet {
                coord Coordinate {
                  point [
                    0 0                                           0
                    %<= length >%  0                                           0
                    %<= length >%  %<= sideSign * borderWidth * 2 >%           0
                  ]
                }
                coordIndex [
                %< if (newLaneLeft) { >%
                  0 2 1 -1
                %< } else { >%
                  0 1 2 -1
                %< } >%
                ]
                creaseAngle 0.2
              }
              castShadows IS castShadows
            }
            %< } >%
          ]
          %< if (centralBorderBO) { >%
            contactMaterial IS contactMaterial
            boundingObject Shape {
              geometry USE CENTRAL_BORDER_GEOMETRY
            }
          %< } >%
          recognitionColors [ 0.6 0.6 0.6 ]
          model "road border"
        }
      %< } >%
    ]
    locked IS locked
  }
}
