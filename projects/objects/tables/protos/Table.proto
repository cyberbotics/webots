#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# Customizable table.

PROTO Table [
  field SFVec3f    translation    0 0 0
  field SFRotation rotation       0 1 0 0
  field SFString   name           "table"
  field SFVec3f    size           1.8 0.74 1                                                           # Defines the size of the table.
  field SFVec2f    feetSize       0.1 0.1                                                              # Defines the size of the feet.
  field SFFloat    feetPadding    0                                                                    # Defines the padding of the feet.
  field SFFloat    frameThickness 0.05                                                                 # Defines the thickness of the frame.
  field SFNode     trayAppearance VarnishedPine { textureTransform TextureTransform { scale 10 10 } }  # Defines the appearance of the tray.
  field SFNode     legAppearance  VarnishedPine { textureTransform TextureTransform { scale 4 5 } }    # Defines the appearance of the feet.
]
{
  %{
    -- parameters check
    local size = fields.size.value
    if size.x <= 0.0 or size.y <= 0.0 or size.z <= 0.0 then -- avoid a negative values
      size = fields.size.defaultValue
      io.stderr:write("'size' must contain positive values\n")
    end

    local feetSize = fields.feetSize.value
    if feetSize.x < 0.0 or feetSize.y < 0.0 then -- avoid a negative values
      feetSize = fields.feetSize.defaultValue
      io.stderr:write("'feetSize' must contain positive values\n")
    end

    local feetPadding = fields.feetPadding.value
    if feetPadding < 0.0 then
      io.stderr:write("'feetPadding' must be positive\n")
      feetPadding = fields.feetPadding.defaultValue
    end

    local frameThickness = fields.frameThickness.value
    if frameThickness <= 0.0 then
      io.stderr:write("'frameThickness' must be positive\n")
      frameThickness = fields.frameThickness.defaultValue
    end

    -- global stuff
    local mainFrameSize = { x = size.x; y = frameThickness; z = size.z }
    local feetTextureFactor = math.max(feetSize.x, feetSize.y)
    local feetTranslation = { x = 0.5 * size.x - feetPadding - 0.5 * feetSize.x; y = 0.5 * (size.y - frameThickness); z = 0.5 * size.z - feetPadding - 0.5 * feetSize.y }
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      # Main frame
      SolidBox {
        translation 0 %{= size.y - 0.5 * frameThickness }% 0
        name "main frame"
        size %{= mainFrameSize.x }% %{= mainFrameSize.y }% %{= mainFrameSize.z }%
        appearance IS trayAppearance
      }
      %{ if feetSize.x ~= 0.0 and feetSize.y ~= 0.0 then }%
        # Foot 1
        SolidBox {
          translation %{= feetTranslation.x }% %{= feetTranslation.y }% %{= feetTranslation.z }%
          name "foot 1"
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance IS legAppearance
        }
        # Foot 2
        SolidBox {
          translation %{= -feetTranslation.x }% %{= feetTranslation.y }% %{= feetTranslation.z }%
          name "foot 2"
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance IS legAppearance
        }
        # Foot 3
        SolidBox {
          translation %{= feetTranslation.x }% %{= feetTranslation.y }% %{= -feetTranslation.z }%
          name "foot 3"
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance IS legAppearance
        }
        # Foot 4
        SolidBox {
          translation %{= -feetTranslation.x }% %{= feetTranslation.y }% %{= -feetTranslation.z }%
          name "foot 4"
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance IS legAppearance
        }
      %{ end }%
    ]
    name IS name
    model "table"
  }
}
