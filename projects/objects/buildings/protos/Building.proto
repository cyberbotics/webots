#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A customizable building, the size, appearance and geometry can fully be defined.
# template language: javascript

PROTO Building [
  field SFVec3f     translation            0 0 0
  field SFRotation  rotation               0 0 1 0
  field SFString    name                   "building"                                 # Defines the name of the building.
  field SFFloat     floorHeight            3                                          # Defines the height of one floor.
  field SFInt32     floorNumber            3                                          # Defines the number of floors (excluding roof).
  field SFInt32     startingFloor          0                                          # Defines the floor number for the "ground floor" of the building, as not all buildings start at the ground floor.
  field MFVec2f     corners                [10 10, 10 -10, -10 -10, -10 10 ]          # Defines the 2D geometry of the building (2D ground footprint of the building).
  field SFNode      wallAppearance         PBRAppearance { metalness 0 roughness 1 }  # Defines the appearance used for the walls of the building.
  field MFString    groundFloor            []                                         # Defines the texture to be used for the first floor (optional).
  field MFFloat     groundFloorScale       []                                         # Defines the horizontal scale of the ground texture.
  field MFFloat     groundFloorTranslation []                                         # Defines the translation of the ground floor textures.
  field SFNode      roofAppearance         PBRAppearance { metalness 0 roughness 1 }  # Defines the appearance used for the roof of the building.
  field SFString{"flat roof", "pyramidal roof", "gabled roof", "hipped roof"}
                    roofShape              "pyramidal roof"                           # Defines the geometry of the roof.
  field SFFloat     roofHeight             3                                          # Defines the height of the roof (used only in the case of pyramidal roof).
  field SFBool      enableBoundingObject   TRUE                                       # Defines whether the building should have a bounding object.
  field SFBool      bottom                 FALSE                                      # Defines whether the bottom face of the building should be displayed.
  field SFString    model                  "building"                                 # Is `Solid.model`.
  field MFColor     recognitionColors      []                                         # Is `Solid.recognitionColors`.
]
{
  %<
    import * as wbvector2 from 'wbvector2.js';
    import * as wbgeometry from 'wbgeometry.js';
    import * as wbutility from 'wbutility.js';

    // compute distance for the first floors with a shift
    function distanceArray(corners, nbCorners, shift) {
      let distance = [shift];
      if (nbCorners > 0) {
        for (let i = 1; i < nbCorners; ++i)
          distance[i] = distance[i-1] - wbvector2.norm({x: corners[i].x - corners[i-1].x, y: corners[i].y - corners[i-1].y});

        distance.push(distance[nbCorners - 1] - wbvector2.norm({x: corners[nbCorners - 1].x - corners[0].x, y: corners[nbCorners - 1].y - corners[0].y}));
      }
      return distance;
    }

    // parameter checking
    let floorHeight = fields.floorHeight.value;
    if (floorHeight <= 0) {
      floorHeight = fields.floorHeight.defaultValue;
      console.error('\'floorHeight\' must be strictly positive. Value reset to ' + floorHeight + '.');
    }

    let roofHeight = fields.roofHeight.value;
    if (roofHeight <= 0) {
      roofHeight = fields.roofHeight.defaultValue;
      console.error('\'roofHeight\' must be strictly positive. Value reset to ' + roofHeight + '.');
    }

    let floorNumber = fields.floorNumber.value;
    if (floorNumber <= 0) {
      floorNumber = fields.floorNumber.defaultValue;
      console.error('\'floorNumber\' must be strictly positive. Value reset to ' + floorNumber + '.');
    }

    let startingFloor = fields.startingFloor.value;
    if (startingFloor < 0) {
      startingFloor = fields.startingFloor.defaultValue;
      console.error('\'startingFloor\' must be strictly positive. Value reset to ' + startingFloor + '.');
    }

    if (startingFloor > floorNumber) {
      startingFloor = fields.startingFloor.defaultValue;
      console.error('\'startingFloor\' must not be greater than \'floorNumber\'. Value reset to ' + startingFloor + '.');
    }

    let roofShape = fields.roofShape.value;
    if (roofShape !== 'flat roof' && roofShape !== 'pyramidal roof' && roofShape !== 'gabled roof' && roofShape !== 'hipped roof') {
      console.error('\'roofShape\' must be \'flat roof\', \'pyramidal roof\', \'gabled roof\' or \'hipped roof\'.');
      roofShape = fields.roofShape.defaultValue;
    }

    const height = floorHeight * floorNumber;

    let corners = fields.corners.value;
    let nbCorners = corners.length;
    if (!wbgeometry.isPoint2ArrayClockwise(corners))
      corners = corners.reverse();

    if (roofShape === 'gabled roof' && nbCorners !== 4) {
      roofShape = fields.roofShape.defaultValue;
      console.error('\'gabled roof\' must have 4 corners. Shape reset to ' + roofShape + '.');
    }

    if (roofShape === 'hipped roof' && nbCorners !== 4) {
      roofShape = fields.roofShape.defaultValue;
      console.error('\'hipped roof\' must have 4 corners. Shape reset to ' + roofShape + '.');
    }

    // in case of pyramidal roof we compute the 'center' of the roof to be the point of the pyramid
    let center = {x: 0, y: 0};
    if (roofShape === 'pyramidal roof' && nbCorners > 0) {
      for (let i = 0; i < nbCorners; ++i) {
        center.x += corners[i].x
        center.y += corners[i].y
      }
      center.x /= nbCorners;
      center.y /= nbCorners;

      // we check for each center(point of pyramid)->corner segment that it does not intersect
      // any upper edges, if it does => print warning and use flat roof instead
      for (let i = 0; i < nbCorners; ++i) {
        for (let j = 0; j < nbCorners - 1; ++j) {
          const intersection = wbvector2.intersection(center, corners[i], corners[j], corners[j+1]);
          if (intersection !== null && Math.abs(intersection.x - center.x) > 0.01 &&
              Math.abs(intersection.x - corners[i].x) > 0.01 &&
              Math.abs(intersection.x - corners[j].x) > 0.01 &&
              Math.abs(intersection.x - corners[j+1].x) > 0.01) {
            console.log('The geometry of this building is too complex for a pyramidal roof, a flat roof will be used instead.');
            roofShape = 'flat roof';
            break;
          }
        }
        if (roofShape === 'flat roof')
          break;
      }
    }

    // in case of gabled roof we determine the shortest sides and we compute 2 points of the roof to be the middle points of those sides
    let middlePoint1 = {x: 0, y: 0};
    let middlePoint2 = {x: 0, y: 0};
    let hippedPoint1 = {x: 0, y: 0};
    let hippedPoint2 = {x: 0, y: 0};
    if (roofShape === 'gabled roof' || roofShape === 'hipped roof') {
      if (wbvector2.norm(wbvector2.minus(corners[1], corners[0])) >= wbvector2.norm(wbvector2.minus(corners[2], corners[1]))) {
        let tmpCorners = [];
        for (let i = 0; i < nbCorners - 1; ++i)
          tmpCorners[i] = corners[i+1];

        tmpCorners[3] = corners[0];
        corners = tmpCorners;
      }
      for (let i = 0; i < nbCorners * 0.5; ++i) {
        middlePoint1.x += corners[i].x;
        middlePoint1.y += corners[i].y;
      }
      middlePoint1.x = middlePoint1.x / nbCorners * 2;
      middlePoint1.y = middlePoint1.y / nbCorners * 2;
      for (let i = nbCorners * 0.5; i < nbCorners; ++i) {
        middlePoint2.x += corners[i].x;
        middlePoint2.y += corners[i].y;
      }
      middlePoint2.x = middlePoint2.x / nbCorners * 2;
      middlePoint2.y = middlePoint2.y / nbCorners * 2;
      // in case of hipped roof we use the middle points to calculate 2 points in the middle of the roof
      if (roofShape === 'hipped roof') {
        hippedPoint1.x = middlePoint1.x + (corners[2].x + corners[3].x - corners[0].x - corners[1].x) * 0.125;
        hippedPoint1.y = middlePoint1.y + (corners[2].y + corners[3].y - corners[0].y - corners[1].y) * 0.125;
        hippedPoint2.x = middlePoint2.x - (corners[2].x + corners[3].x - corners[0].x - corners[1].x) * 0.125;
        hippedPoint2.y = middlePoint2.y - (corners[2].y + corners[3].y - corners[0].y - corners[1].y) * 0.125;
      }
    }

    // determine ground floor texture parameters
    let groundFloorTexture = [];
    const groundFloor = fields.groundFloor.value;
    for (let i = 0; i < groundFloor.length; ++i) {
      if (groundFloor[i] !== '')
        groundFloorTexture.push(groundFloor[i]);
    }
    const groundFloorNumber = groundFloorTexture.length;

    // determine ground floor texture scale parameters
    let realScale = [];
    let groundFloorScale = fields.groundFloorScale.value;
    for (let i = 0; i < groundFloorScale.length; ++i) {
      if (groundFloorScale[i] === 0)
        realScale.push(1);
      else
        realScale.push(groundFloorScale[i]);
    }

    let realScaleSize = realScale.length;
    for (let i = realScaleSize; i < groundFloorNumber; ++i)
      realScale[i] = 1;

    // determine the ground floor texture translation parameters
    let groundFloorShift = fields.groundFloorTranslation.value;
    for (let i = groundFloorShift.length; i < groundFloorNumber; ++i)
      groundFloorShift[i] = 0;

    // compute distance from the first corner for the texture (we also make sure to not cut a window at a corner)
    let distance = [0];
    if (nbCorners > 0) {
      for (let i = 1; i < nbCorners; ++i)
        distance[i] = distance[i-1] - wbvector2.norm(wbvector2.minus(corners[i], corners[i-1]));

      distance[nbCorners] = distance[nbCorners - 1] - wbvector2.norm(wbvector2.minus(corners[nbCorners - 1], corners[0]));
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    model IS model
    recognitionColors IS recognitionColors
    children [
      %< if (nbCorners > 0) { >%
      %< if (startingFloor !== floorNumber) { >%
        # Ground Floors
        %< for (let j = 0; j < groundFloorNumber; j++) { >%
          DEF %<= 'FLOOR' + j >% Shape {
            appearance PBRAppearance {
              baseColorMap ImageTexture {
                url [ %<= '"' + groundFloorTexture[j] + '"' >% ]
              }
              metalness 0
              roughness 1
            }
            geometry IndexedFaceSet {
              coord Coordinate {
                point [
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    # bottom
                    %<= corners[i].x >% %<= corners[i].y >% %<= (j + startingFloor - 1)*floorHeight >%
                    # top
                    %<= corners[i].x >% %<= corners[i].y >% %<= (j + startingFloor)*floorHeight >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %< let floorDistance = distanceArray(corners, nbCorners, groundFloorShift[j]); >%
                  %< for (let i = 0; i < nbCorners + 1; ++i) { >%
                    %<= floorDistance[i] /  realScale[j] >% 0
                    %<= floorDistance[i] /  realScale[j] >% 1
                  %< } >%
                ]
              }
              coordIndex [
                # Sides
                %< for (let i = 0; i <= nbCorners - 2; ++i) { >%
                  %<= i * 2 + 1 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% %<= i * 2 >% -1
                %< } >%
                0 1 %<= (nbCorners - 1) * 2 + 1 >% %<= (nbCorners - 1) * 2 >% -1
              ]
              texCoordIndex [
                # Sides
                %< for (let i = 0; i <= nbCorners - 1; ++i) { >%
                  %<= i * 2 >% %<= i * 2 + 1 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% -1
                %< } >%
              ]
            }
          }
          %< } >%
          # Walls
          DEF WALL Shape {
            appearance IS wallAppearance
            geometry IndexedFaceSet {
              coord Coordinate {
                point [
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    # bottom
                    %<= corners[i].x >% %<= corners[i].y >% %<= (groundFloorNumber + startingFloor) * floorHeight >%
                    # top
                    %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                  %< } >%
                  %< if (roofShape === 'gabled roof') { >%
                    # In case of gabled roof we need to add 2 points for the walls
                    %<= middlePoint1.x >% %<= middlePoint1.y >% %<= height + roofHeight >%
                    %<= middlePoint2.x >% %<= middlePoint2.y >% %<= height + roofHeight >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %< for (let i = 0; i <= nbCorners; ++i) { >%
                    %<= distance[i] >% 0
                    %<= distance[i] >% %<= floorNumber - groundFloorNumber - startingFloor >%
                  %< } >%
                  %< if (roofShape === 'gabled roof') { >%
                    %<= (distance[0] + distance[1]) * 0.5 >% %<= floorNumber - groundFloorNumber - startingFloor + roofHeight / floorHeight >%
                    %<= (distance[2] + distance[3]) * 0.5 >% %<= floorNumber - groundFloorNumber - startingFloor + roofHeight / floorHeight >%
                  %< } >%
                ]
              }
              coordIndex [
                # Sides
                %< for (let i = 0; i <= nbCorners - 2; ++i) { >%
                  %< if (roofShape === 'gabled roof') { >%
                    # In case of gabled roof, 2 sides have 5 points
                    %< if (i === 0) { >%
                      %<= i * 2 + 2 >% %<= i * 2 + 3 >% 8 %<= i * 2 + 1 >% %<= i * 2 >% -1
                    %< } else if (i === 2) { >%
                      %<= i * 2 + 2 >% %<= i * 2 + 3 >% 9 %<= i * 2 + 1 >% %<= i * 2 >% -1
                    %< } else { >%
                      %<= i * 2 + 2 >% %<= i * 2 + 3 >% %<= i * 2 + 1 >% %<= i * 2 >% -1
                    %< } >%
                  %< } else { >%
                    %<= i * 2 + 2 >% %<= i * 2 + 3 >% %<= i * 2 + 1 >% %<= i * 2 >% -1
                  %< } >%
                %< } >%
                0 1 %<= (nbCorners - 1) * 2 + 1 >% %<= (nbCorners - 1) * 2 >% -1
              ]
              texCoordIndex [
                # Sides
                %< for (let i = 0; i <= nbCorners - 1; ++i) { >%
                  %< if (roofShape === 'gabled roof') { >%
                    # In case of gabled roof, 2 sides have 5 points
                    %< if (i === 0) { >%
                      %<= i * 2 >% %<= i * 2 + 1 >% %<= 10 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% -1
                    %< } else if (i === 2) { >%
                      %<= i * 2 >% %<= i * 2 + 1 >% %<= 11 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% -1
                    %< } else { >%
                      %<= i * 2 >% %<= i * 2 + 1 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% -1
                    %< } >%
                  %< } else { >%
                    %<= i * 2 >% %<= i * 2 + 1 >% %<= i * 2 + 3 >% %<= i * 2 + 2 >% -1
                  %< } >%
                %< } >%
              ]
            }
          }
        %< } >%
        # Roof
        DEF ROOF Shape {
          appearance IS roofAppearance
          geometry IndexedFaceSet {
            # Flat roof
            %< if (roofShape === 'flat roof') { >%
              coord Coordinate {
                point [
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    %<= corners[i].x - corners[0].x >% %<= corners[i].y - corners[0].y >%
                  %< } >%
                ]
              }
              coordIndex [
                %< for (let i = 0; i < nbCorners; ++i) { >%
                  %<= i >%
                %< } >%
                -1
              ]
              texCoordIndex [
                %< for (let i = 0; i < nbCorners; ++i) { >%
                  %<= (nbCorners - i) >%
                %< } >%
                -1
              ]
            # Pyramidal roof
            %< } else if (roofShape === 'pyramidal roof') { >%
              coord Coordinate {
                point [
                    %<= center.x >% %<= center.y >% %<= height + roofHeight >%
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %< for (let i = 0; i < nbCorners - 1; ++i) { >%
                    %<= wbvector2.norm(wbvector2.minus(corners[i+1], corners[i])) * 0.5 >% %<= wbvector2.norm({x: ((corners[i+1].x + corners[i].x) * 0.5) - center.x, y: ((corners[i+1].y + corners[i].y) * 0.5) - center.y}) >%
                    %<= wbvector2.norm(wbvector2.minus(corners[i+1], corners[i])) >% 0
                    0 0
                  %< } >%
                  %<= wbvector2.norm(wbvector2.minus(corners[0], corners[nbCorners - 1])) * 0.5  >% %<= wbvector2.norm({x: ((corners[0].x + corners[nbCorners - 1].x) * 0.5) - center.x, y: ((corners[0].y + corners[nbCorners - 1].y) * 0.5) - center.y}) >%
                  %<= wbvector2.norm(wbvector2.minus(corners[0], corners[nbCorners - 1])) >% 0
                  0 0
                ]
              }
              coordIndex [
                %< for (let i = 1; i <= nbCorners - 1; ++i) { >%
                  %<= i >% %<= i + 1 >% 0 -1
                %< } >%
                %<= nbCorners >% 1 0 -1
              ]
              texCoordIndex [
                %< for (let i = 0; i <= nbCorners - 1; ++i) { >%
                  %<= i * 3 >% %<= i * 3 + 1 >% %<= i * 3 + 2 >% -1
                %< } >%
              ]
            # Hipped roof
            %< } else if (roofShape === 'hipped roof') { >%
              coord Coordinate {
                point [
                    %<= hippedPoint1.x >% %<= hippedPoint1.y >% %<= height + roofHeight >%
                    %<= hippedPoint2.x >% %<= hippedPoint2.y >% %<= height + roofHeight >%
                  %< for (let i = 0; i < nbCorners; ++i) { >%
                    %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %<= wbvector2.norm(wbvector2.minus(hippedPoint1, middlePoint2)) >% %<= wbvector2.norm({x: corners[3].x - middlePoint2.x, y: corners[3].y - middlePoint2.y}) >%
                  %<= wbvector2.norm(wbvector2.minus(hippedPoint1, middlePoint1)) >% %<= wbvector2.norm({x: corners[0].x - middlePoint1.x, y: corners[0].y - middlePoint1.y}) >%
                  0 0
                  %<= wbvector2.norm(wbvector2.minus(middlePoint1, middlePoint2)) >% 0
                  %<= wbvector2.norm(wbvector2.minus(hippedPoint1, middlePoint2)) >% %<= wbvector2.norm({x: corners[3].x - middlePoint2.x, y: corners[3].y - middlePoint2.y}) >%
                  %<= wbvector2.norm(wbvector2.minus(hippedPoint2, middlePoint2)) >% %<= wbvector2.norm({x: corners[3].x - middlePoint2.x, y: corners[3].y - middlePoint2.y}) >%
                  %<= wbvector2.norm({x: corners[1].x - corners[0].x, y: corners[1].y - corners[0].y}) >% 0
                  %<= wbvector2.norm({x: corners[3].x - corners[2].x, y: corners[3].y - corners[2].y}) >% 0
                  %<= wbvector2.norm({x: corners[0].x - middlePoint1.x, y: corners[0].y - middlePoint1.y}) >% %<= wbvector2.norm(wbvector2.minus(hippedPoint1, middlePoint1)) >%
                  %<= wbvector2.norm({x: corners[1].x - middlePoint1.x, y: corners[1].y - middlePoint1.y}) >% %<= wbvector2.norm(wbvector2.minus(hippedPoint1, middlePoint1)) >%
                ]
              }
              coordIndex [
                5 2 0 1 -1
                3 4 1 0 -1
                2 3 0 -1
                4 5 1 -1
              ]
              texCoordIndex [
                %<= 0 >% %<= 1 >% %<= 2 >% %<= 3 >% -1
                %<= 4 >% %<= 5 >% %<= 2 >% %<= 3 >% -1
                %<= 9 >% %<= 2 >% %<= 6 >% -1
                %<= 8 >% %<= 2 >% %<= 7 >% -1

              ]
            # Gabled roof
            %< } else if (roofShape === 'gabled roof') { >%
              coord Coordinate {
                point [
                    %<= middlePoint1.x >% %<= middlePoint1.y >% %<= height + roofHeight >%
                    %<= middlePoint2.x >% %<= middlePoint2.y >% %<= height + roofHeight >%
                  %< for (let i = 0 ; i < nbCorners; ++i) { >%
                    %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                %<= wbvector2.norm(wbvector2.minus(middlePoint1, middlePoint2)) >% %<= wbvector2.norm({x: corners[3].x - middlePoint2.x, y: corners[3].y - middlePoint2.y}) >%
                0 %<= wbvector2.norm({x: corners[0].x - middlePoint1.x, y: corners[0].y - middlePoint1.y}) >%
                0 0
                %<= wbvector2.norm(wbvector2.minus(middlePoint1, middlePoint2)) >% 0
                %<= wbvector2.norm(wbvector2.minus(middlePoint1, middlePoint2)) >% %<= wbvector2.norm({x: corners[1].x - middlePoint1.x, y: corners[1].y - middlePoint1.y}) >%
                0 %<= wbvector2.norm({x: corners[2].x - middlePoint2.x, y: corners[2].y - middlePoint2.y}) >%
                ]
              }
              coordIndex [
                5 2 0 1 -1
                3 4 1 0 -1
              ]
              texCoordIndex [
                0 1 2 3 -1
                4 5 2 3 -1
              ]
            %< } >%
          }
        }
        # bottom
        %< if (fields.bottom.value) { >%
          DEF FLOOR Shape {
          appearance PBRAppearance {
            baseColor 0.2 0.2 0.2
            metalness 0
            roughness 1
          }
          geometry IndexedFaceSet {
            coord Coordinate {
              point [
                %< for (let i = 0; i < nbCorners; ++i) { >%
                  %<= corners[i].x >% %<= corners[i].y >% %<= startingFloor * floorHeight >%
                %< } >%
              ]
            }
            coordIndex [
              %< for (let i = 0; i <= nbCorners - 1; ++i) { >%
                %<= (nbCorners - i) - 1 >%
              %< } >%
              -1
            ]
          }
        }
        %< } >%
      %< } >%
    ]
    %< if (fields.enableBoundingObject.value && nbCorners > 0) { >%
      boundingObject Group {
        children [
          IndexedFaceSet {
            coord Coordinate {
              point [
                %< for (let i = 0; i < nbCorners; ++i) { >%
                  # bottom
                  %<= corners[i].x >% %<= corners[i].y >% %<= startingFloor * floorHeight >%
                  # top
                  %<= corners[i].x >% %<= corners[i].y >% %<= height >%
                %< } >%
              ]
            }
            coordIndex [
              # Sides
              %< for (let i = 0; i <= nbCorners - 2; ++i) { >%
                %<= i * 2 + 2 >% %<= i * 2 + 3 >% %<= i * 2 + 1 >% %<= i * 2 >% -1
              %< } >%
              0 1 %<= (nbCorners - 1) * 2 + 1 >% %<= (nbCorners - 1) * 2 >% -1
            ]
          }
          USE ROOF
        ]
      }
    %< } >%
  }
}
