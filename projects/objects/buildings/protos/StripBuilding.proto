#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: nonDeterministic
# A strip of buildings of variable length.
# template language: javascript

PROTO StripBuilding [
  field SFVec3f    translation           0 0 0
  field SFRotation rotation              0 0 1 0
  field SFString   name                  "strip building"
  field SFFloat    length                100              # Defines the minimum length of the strip (actual length is slightly bigger because buildings are not cut).
  field SFInt32    randomSeed            1                # Defines the seed of the random number generator. A value smaller or equal to 0 sets a random seed.
  field SFBool     enableBoundingObject  TRUE             # Defines whether the buildings should have bounding objects.
]
{
  %<
    import * as wbrandom from 'wbrandom.js';

    if (fields.randomSeed.value <= 0)
      wbrandom.seed(Date.now());
    else
      wbrandom.seed(fields.randomSeed.value);

    let buildings = {
      'OldResidentialBuilding': {coefficient: 3, width: 11.84, yOffset: 0, xOffset: 13.94, colors: ['red grey', 'dark grey', 'light grey', 'red', 'braun']},
      'ResidentialBuildingWithRoundFront': {coefficient: 3, width: 12.19, yOffset: 2.225, xOffset: 10.5, colors: ['dark grey', 'orange', 'green', 'dark braun', 'light grey', 'light braun']},
      'SmallResidentialBuilding': {coefficient: 3, width: 9.67, yOffset: 0, xOffset: 13.56, colors: ['white', 'braun black', 'red']},
      'ResidentialTower': {coefficient: 1, width: 8.14, yOffset: 0, xOffset: 2.99, maxFloor: 3, minFloor: 1},
      'SmallResidentialTower': {coefficient: 1, width: 5.42, yOffset: 0, xOffset: 1.72, maxFloor: 4, minFloor: 1}};

    let buildingListFix = ['OldResidentialBuilding', 'ResidentialBuildingWithRoundFront', 'SmallResidentialBuilding', 'ResidentialTower', 'SmallResidentialTower'];
    let buildingsList = [];
    for (let k = 0; k < buildingListFix.length; ++k) {
      let item = buildingListFix[k];
      for (let j = 0; j < buildings[item].coefficient; ++j)
        buildingsList.push(item);
    }

    let currentPosition = 0;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    children [
      %<
        let i = 0;
        let j = 0;
        let building;
        while (currentPosition < fields.length.value) {
          i = wbrandom.integer(0, buildingsList.length - 1);
          building = buildings[buildingsList[i]];
      >%
      %<= buildingsList[i] >% {
        translation %<= -building.xOffset >% %<= -currentPosition - 0.5 * building.width - building.yOffset >% 0
        %< if (building.colors) { >%
          type "%<= building.colors[wbrandom.integer(0, building.colors.length - 1)] >%"
        %< } >%
        %< if (building.maxFloor && building.minFloor) { >%
          numberOfFloors %<= wbrandom.integer(building.minFloor, building.maxFloor) >%
        %< } >%
        name "building(%<= j >%)"
        enableBoundingObject IS enableBoundingObject
      }
      %<
          j = j + 1;
          currentPosition = currentPosition + buildings[buildingsList[i]].width;
        }
      >%
    ]
  }
}
