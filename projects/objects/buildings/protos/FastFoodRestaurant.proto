#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A customizable fast food restaurant.
# template language: javascript

PROTO FastFoodRestaurant [
  field SFVec3f       translation   0 0 0
  field SFRotation    rotation      0 0 1 0
  field SFString      name          "fast food restaurant"
  field SFFloat       height        4                       # Defines the height of the building.
  field SFFloat       length        10                      # Defines the length of the building.
  field SFFloat       width         10                      # Defines the width of the building.
  field SFString{"KFC", "FFC", "subway", "momo"}
                      brand         "KFC"                   # Defines the brand of the restaurant.
  field SFInt32{1, 2} numberOfSides 1                       # Defines whether it is a two sided restaurant.
]
{
  %<
    let height = fields.height.value;
    if (height < 4.0) {
      height = fields.height.defaultValue;
      console.error('\'height\' must be greater or equal to 4. Value reset to ' + height + '.');
    }
    const numberOfSides = fields.numberOfSides.value;
    let width = fields.width.value;
    if (width < 10.0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be greater or equal to 10. Value reset to ' + width + '.');
    }
    let length = fields.length.value;
    // allow different minimal sizes depending on the number of sides demanded
    if (numberOfSides === 1)
      if (length < 3.0) {
        length = fields.length.defaultValue;
        console.error('\'length\' must be greater or equal to 3. Value reset to ' + length + '.');
      }
    else if (numberOfSides === 2)
      if (length < 10.0) {
        length = fields.length.defaultValue;
        console.error('\'length\' should be greater or equal to 10 because of the second side. Value reset to ' + length + '.');
      }

    const halfLength = length * 0.5;

    const brand = fields.brand.value;
    // used to avoid depth fighting between the inner textures and the building structure.
    let depthFightingOffset = 0.05;
    // used to prevent planes from colliding with the boxes.
    let planeOffset = 0.005;
    // used to further adjust the front plane when two sides are demanded.
    let frontAdjust = 0;
    // another adjustment required when two sides are demanded on Subway ( or momo ).
    let subwayFrontAdjust = 0;
    // used to adjust the front plane height.
    let frontPlaneHeight = 4.47;
    // used to adjust the front plane position on the Y axis.
    let frontPlaneY = 2.23;
    // used to set the size of the front plane for the four brands.
    let frontBrandSize = 10;
    // provides correct alignment of the planes when two sides are demanded.
    let frontTransform = 0.0;
    if (numberOfSides === 2)
      frontTransform =  5.4 - ( width * 0.5 );
    if (brand === 'subway' || brand === 'momo') {
      frontPlaneHeight = 4;
      frontPlaneY = 2;
      frontBrandSize = 6.8;
    }
    if ((brand === 'subway' || brand === 'momo') && numberOfSides === 2) {
      subwayFrontAdjust = 0.5;
      frontBrandSize = 9;
    }
    let outerWallTexture;
    if (brand === 'subway' || brand === 'momo')
      outerWallTexture = '"webots://projects/objects/buildings/protos/textures/subway_outer_wall.jpg"';
    else
      outerWallTexture = '"webots://projects/objects/buildings/protos/textures/KFC_outer_wall.jpg"';
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    %< if (brand === 'subway' || brand === 'momo') { >%
      recognitionColors [ 0.81 0 0 ]
    %< } else { >%
      recognitionColors [ 0.57 0.68 0.8 ]
    %< } >%
    children [
    Transform {
      translation 0 %<= -frontTransform >% 0
      rotation 1 0 0 1.570796
      children [
        DEF LEFT_INNER_WALL Transform {
          translation %<= halfLength - 1 >% 1.4 %<= 3.4 - planeOffset - depthFightingOffset >%
          rotation 0 1 0 -3.141591
          children [
            DEF INNER_WALL Shape {
              appearance PBRAppearance {
                baseColorMap ImageTexture {
                  url [
                    "webots://projects/objects/buildings/protos/textures/fastfood_inner_wall.jpg"
                  ]
                }
                roughness 1
                metalness 0
                textureTransform TextureTransform {
                  scale 1 1
                }
              }
              geometry Plane {
                size 2 2.8
              }
            }
          ]
        }
        DEF RIGHT_INNER_WALL Transform {
          %< if (numberOfSides === 1) { >%
              translation %<= halfLength - 1 >% 1.4 %<= -3.4 + planeOffset + depthFightingOffset >%
          %< } else if (numberOfSides === 2) { >%
              translation %<= halfLength - 8.8 + planeOffset + depthFightingOffset >% 1.4 -4.4
              rotation 0 1 0 1.5708
          %< } >%
          children USE INNER_WALL
        }
        %< for (let i = 1; i <= numberOfSides; ++i) { >%
            DEF %<= 'BACK_' + i >% Transform {
              %< if (numberOfSides === 1 || (numberOfSides === 2 && i === 1)) { >%
                  translation %<= halfLength - 2 + planeOffset + depthFightingOffset >% 1.4 0
                  rotation 0 1 0 1.570797
              %< } else { >%
                  translation %<= halfLength - 5.4 >% 1.4 %<= -3.4 - planeOffset - depthFightingOffset >%
                  rotation 0 1 0 3.141591
              %< } >%
              children [
                Shape {
                  appearance PBRAppearance {
                    baseColorMap ImageTexture {
                      url [
                        "webots://projects/objects/buildings/protos/textures/fastfood_counter.jpg"
                      ]
                    }
                    emissiveColorMap ImageTexture {
                      url [
                        "webots://projects/objects/buildings/protos/textures/fastfood_counter.jpg"
                      ]
                    }
                    roughness 1
                    metalness 0
                  }
                  geometry Plane {
                    size %<= 6.8 + 2 * planeOffset >% 2.8
                  }
                }
              ]
            }
            %<
              if (numberOfSides === 2 && i === 1) {
                frontAdjust = -0.4;
              }
            >%
            DEF %<= 'FRONT_' + i >% Transform {
              %< if (numberOfSides === 1 || (numberOfSides === 2 && i === 1)) { >%
                  translation %<= halfLength + planeOffset >% %<= frontPlaneY >% %<= frontAdjust - subwayFrontAdjust >%
                  rotation 0 1 0 1.570797
              %< } else { >%
                  translation %<= halfLength - 5 + subwayFrontAdjust >% %<= frontPlaneY >% %<= -5.4 - planeOffset >%
                  rotation 0 1 0 3.141591
              %< } >%
              children [
                DEF FRONT_WALL_SHAPE Shape {
                  appearance PBRAppearance {
                    baseColorMap DEF FRONT_TEXTURE ImageTexture {
                      %< if (numberOfSides === 2 && (brand === 'subway' || brand === 'momo')) { >%
                          url [
                            %<= '"webots://projects/objects/buildings/protos/textures/' + brand + '_front.png"' >%
                          ]
                      %< } else { >%
                          url [
                            %<= '"webots://projects/objects/buildings/protos/textures/' + brand + '.png"' >%
                          ]
                      %< } >%
                      filtering 0
                    }
                    roughness 1
                    metalness 0
                  }
                  geometry DEF FRONT_SIDE Plane {
                    size %<= frontBrandSize + 4 * planeOffset >% %<= frontPlaneHeight >%
                  }
                }
              ]
            }
            DEF %<= 'REVERSE_FRONT_' + i >% Transform {
              %< if (i === 1) { >%
                translation %<= halfLength + planeOffset >% %<= frontPlaneY >% %<= frontAdjust - subwayFrontAdjust >%
                rotation 0 -1.0 0 1.570795
              %< } else if (i === 2) { >%
                translation %<= halfLength - 5 + subwayFrontAdjust >% %<= frontPlaneY >% %<= -5.4 - planeOffset >%
                rotation 1 0 0 0
              %< } >%
              children [
                Shape {
                  appearance PBRAppearance {
                    baseColorMap USE FRONT_TEXTURE
                    roughness 1
                    metalness 0
                    textureTransform TextureTransform {
                      scale -1 1
                    }
                  }
                  geometry USE FRONT_SIDE
                }
              ]
            }
            DEF %<= 'ROOF_' + i >% Transform {
              %< if (numberOfSides === 1 || (numberOfSides === 2 && i === 1)) { >%
                  translation %<= halfLength - 1 >% %<= 2.8 - planeOffset >% 0
                  rotation 0 0.707107 -0.707107 -3.141591
              %< } else { >%
                  translation %<= halfLength - 4.4 >% %<= 2.8 - planeOffset >% -4.4
                  rotation 0.577351 -0.57735 0.57735 2.094397
              %< } >%
              children [
                Shape {
                  appearance PBRAppearance {
                    baseColorMap ImageTexture {
                      url [
                        "webots://projects/objects/buildings/protos/textures/fastfood_ceiling.jpg"
                      ]
                    }
                    roughness 1
                    metalness 0
                    textureTransform TextureTransform {
                      scale 2 5
                      translation 0.05 0
                    }
                  }
                  geometry DEF ROOF Plane {
                    %< if (numberOfSides === 1 || (numberOfSides === 2 && i === 1)) { >%
                        size 2 6.8
                    %< } else { >%
                        size 2 8.8
                    %< } >%
                  }
                }
              ]
            }
            DEF %<= 'FLOOR_' + i >% Transform {
              %< if (numberOfSides === 1 || (numberOfSides === 2 && i === 1)) { >%
                  translation %<= halfLength - 1 >% %<= depthFightingOffset >% 0
                  rotation 1 0 0 -1.570796
              %< } else { >%
                  translation %<= halfLength - 4.4 >% %<= depthFightingOffset >% -4.4
                  rotation -0.577349 0.577351 0.577351 2.094397
              %< } >%
              children [
                Shape {
                  appearance PBRAppearance {
                    baseColorMap ImageTexture {
                      url [
                        "webots://projects/objects/buildings/protos/textures/fastfood_floor.jpg"
                      ]
                    }
                    roughness 1
                    metalness 0
                    textureTransform TextureTransform {
                      scale 3 5
                      translation 0 0.05
                    }
                  }
                  geometry USE ROOF
                }
              ]
            }
        %< } >%
      ]
    }
      DEF LEFT_SIDE Transform {
        %< if (numberOfSides === 1) { >%
            translation 0 %<= -(width * 0.25) - ( 3.4 * 0.5 ) >% 1.4
            rotation 0 0 1 1.570796
            children [
              DEF SIDE_WALL Shape {
                appearance PBRAppearance {
                  baseColorMap DEF SIDE_TEXTURE ImageTexture {
                    url %<= outerWallTexture >%
                  }
                  roughness 1
                  metalness 0
                }
                geometry Box {
                  size %<= (width * 0.5) - 3.4 >% %<= length >% 2.8
                }
              }
            ]
        %< } else if (numberOfSides === 2) { >%
            translation 0 -4.4 1.4
            rotation 0 0 1 1.570796
            children [
              DEF SIDE_WALL Shape {
                appearance DEF SIDE_APPEARANCE PBRAppearance {
                  baseColorMap DEF SIDE_TEXTURE ImageTexture {
                    url %<= outerWallTexture >%
                  }
                  roughness 1
                  metalness 0
                }
                geometry Box {
                  size %<= width - 8.8 >% %<= length >% 2.8
                }
              }
            ]
        %< } >%
      }
      DEF RIGHT_SIDE Transform {
        %< if (numberOfSides === 1) { >%
            translation 0 %<= (width * 0.25) + ( 3.4 * 0.5 ) >% 1.4
            children USE SIDE_WALL
        %< } else if (numberOfSides === 2) { >%
            translation -4.4 %<= (width * 0.5) - 1 >% 1.4
            children [
              Shape {
                appearance USE SIDE_APPEARANCE
                geometry Box {
                  size 2 %<= length - 8.8 >% 2.8
                }
              }
            ]
        %< } >%
        rotation 0 0 1 1.570796
      }
      DEF TOP_SIDE Transform {
        translation 0 0 %<= height * 0.5 + 1.4 >%
        rotation 0 0 1 1.5708
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap USE SIDE_TEXTURE
              roughness 1
              metalness 0
              textureTransform TextureTransform {
                # Allows correct alignement of the texture from the SIDE to TOP
                scale 1 %<= ( height / 2.8 ) - 1 >%
                translation 0 %<= height >%
              }
            }
            geometry TexturedBox {
              size %<= width >% %<= length >% %<= height - 2.8 >%
              mapping "default"
              top FALSE
              bottom FALSE
            }
          }
        ]
      }
      DEF BACK_SIDE Transform {
        %< if (numberOfSides === 1) { >%
            translation -1 0 1.4
        %< } else if (numberOfSides === 2) { >%
            translation -1 %<= width * 0.5 - 5.4 >% 1.4
        %< } >%
        rotation 0 0 1 1.570796
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap DEF SIDE_TEXTURE ImageTexture {
                url %<= outerWallTexture >%
              }
              roughness 1
              metalness 0
              textureTransform TextureTransform {
                scale -0.9 1
                translation 0.01 0
              }
            }
            geometry Box {
              size 6.8 %<= length - 2 >% 2.8
            }
          }
        ]
      }
      DEF TOP_WALL Transform {
        translation 0 0 %<= height >%
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap ImageTexture {
                url [
                  "webots://projects/objects/buildings/protos/textures/gravel.jpg"
                ]
              }
              roughness 1
              metalness 0
              textureTransform TextureTransform {
                scale %<= 0.6 * length >% %<= 0.6 * width >%
              }
            }
            geometry Plane {
              size %<= length >% %<= width >%
            }
          }
        ]
      }
    ]
    name IS name
    model %<= '"' + brand + '"' >%
    boundingObject Transform {
      translation 0 0 %<= height * 0.5 >%
      children [
        Box {
          size %<= length >% %<= width >% %<= height >%
        }
      ]
    }
  }
}
