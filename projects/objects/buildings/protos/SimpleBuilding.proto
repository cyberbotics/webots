#VRML_SIM R2021c utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A customizable building, the size and geometry can fully be defined.
# The texture of the wall and roof can be selected using the fields 'wallType' and 'roofType'.
# template language: javascript

PROTO SimpleBuilding [
  field SFVec3f     translation            0 0 0
  field SFRotation  rotation               0 1 0 0
  field SFString    name                   "building"
  field SFFloat     floorHeight            3                                  # Defines the height of one floor.
  field SFInt32     floorNumber            3                                  # Defines the number of floors (excluding roof).
  field SFInt32     startingFloor          0                                  # Defines the floor number for the "ground floor" of the building, as not all buildings start at the ground floor.
  field MFVec2f     corners                [10 10, 10 -10, -10 -10, -10 10 ]  # Defines the 2D geometry of the building (2D ground footprint of the building).
  field SFString{"glass building", "classic building", "orange building", "gray glass building", "blue glass building", "arcade-style building", "transparent highrise", "windowed building", "old brick building", "red and white building", "construction building", "stone brick", "stone wall", "glass highrise", "old house", "old building", "highrise", "brick building", "residential building", "old office building", "factory building", "tall house", "office building", "concrete building"}
                    wallType               "windowed building"                # Defines the wall type.
  field MFColor     wallColor              []                                 # Defines the wall color.
  field MFString    groundFloor            []                                 # Defines the texture to be used for the first floor (optional).
  field MFFloat     groundFloorScale       []                                 # Defines the horizontal scale of the ground texture.
  field MFFloat     groundFloorTranslation []                                 # Defines the translation of the ground floor textures.
  field SFString{"tiled", "gravel", "slate", "old tiles", "sheet metal", "metal tiles", "bitumen"}
                    roofType               "tiled"                            # Defines roof type.
  field MFColor     roofColor              []                                 # Defines the roof color.
  field SFString{"flat roof", "pyramidal roof", "gabled roof", "hipped roof"}
                    roofShape              "pyramidal roof"                   # Defines the geometry of the roof.
  field SFBool      snowOnRoof             FALSE                              # Defines whether the texture with or without snow should be used.
  field SFFloat     roofHeight             3                                  # Defines the height of the roof.
  field SFBool      enableBoundingObject   TRUE                               # Defines whether the building should have a bounding object or not.
  field SFBool      bottom                 FALSE                              # Defines whether the bottom face of the building should be displayed.
]
{
  %<
    const roofTypes = {
      'tiled'       : {textureSize: 2},
      'gravel'      : {textureSize: 1},
      'slate'       : {textureSize: 2},
      'old tiles'   : {textureSize: 2},
      'sheet metal' : {textureSize: 2},
      'metal tiles' : {textureSize: 2},
      'bitumen'     : {textureSize: 2}
    };

    // the wallType is the texture's name (ex. "glass building"'s texture name is "glass_building.jpg")
    const wallTypes = {
      'glass building'         : {textureFloorNumber: 4,   textureWidth: 12,  textureLateralWindowNumber: 4,  colors: [[0.44, 0.56, 0.7]], pbr: true},
      'classic building'       : {textureFloorNumber: 4,   textureWidth: 12,  textureLateralWindowNumber: 8,  colors: [[0.62, 0.56, 0.49]], pbr: true},
      'orange building'        : {textureFloorNumber: 3,   textureWidth: 12,  textureLateralWindowNumber: 5,  colors: [[0.83, 0.48, 0.36]], pbr: true},
      'gray glass building'    : {textureFloorNumber: 12,  textureWidth: 15,  textureLateralWindowNumber: 4,  colors: [[0.85, 0.88, 0.91]], pbr: false},
      'blue glass building'    : {textureFloorNumber: 4,   textureWidth: 12,  textureLateralWindowNumber: 8,  colors: [[0.31, 0.58, 0.9], [0.22, 0.23, 0.26]], pbr: true},
      'arcade-style building'  : {textureFloorNumber: 2,   textureWidth: 6,   textureLateralWindowNumber: 2,  colors: [[0.57, 0.57, 0.55]], pbr: false},
      'transparent highrise'   : {textureFloorNumber: 3,   textureWidth: 9,   textureLateralWindowNumber: 3,  colors: [[0.37, 0.62, 0.77]], pbr: true},
      'windowed building'      : {textureFloorNumber: 4,   textureWidth: 12,  textureLateralWindowNumber: 3,  colors: [[0.76, 0.79, 0.84]], pbr: true},
      'old brick building'     : {textureFloorNumber: 8,   textureWidth: 20,  textureLateralWindowNumber: 5,  colors: [[0.53, 0.48, 0.42], [0.85, 0.86, 0.84]], pbr: false},
      'red and white building' : {textureFloorNumber: 3,   textureWidth: 15,  textureLateralWindowNumber: 5,  colors: [[0.75, 0.8, 0.77], [0.62, 0.12, 0.12]], pbr: false},
      'construction building'  : {textureFloorNumber: 8,   textureWidth: 12,  textureLateralWindowNumber: 8,  colors: [[0.38, 0.38, 0.40]], pbr: true},
      'stone brick'            : {textureFloorNumber: 0.5, textureWidth: 1,   textureLateralWindowNumber: 1,  colors: [[0.7, 0.6, 0.51]], pbr: false},
      'stone wall'             : {textureFloorNumber: 0.8, textureWidth: 3,   textureLateralWindowNumber: 1,  colors: [[0.47, 0.5, 0.53]], pbr: false},
      'glass highrise'         : {textureFloorNumber: 7,   textureWidth: 20,  textureLateralWindowNumber: 13, colors: [[0.19, 0.25, 0.29], [0.29, 0.38, 0.48]], pbr: false},
      'old house'              : {textureFloorNumber: 2,   textureWidth: 6,   textureLateralWindowNumber: 3,  colors: [[0.74, 0.54, 0.35]], pbr: false},
      'old building'           : {textureFloorNumber: 4,   textureWidth: 12,  textureLateralWindowNumber: 5,  colors: [[0.85, 0.63, 0.53]], pbr: false},
      'highrise'               : {textureFloorNumber: 5,   textureWidth: 12,  textureLateralWindowNumber: 3,  colors: [[0.83, 0.78, 0.73]], pbr: false},
      'brick building'         : {textureFloorNumber: 3,   textureWidth: 8,   textureLateralWindowNumber: 4,  colors: [[0.58, 0.35, 0.27]], pbr: false},
      'residential building'   : {textureFloorNumber: 6,   textureWidth: 18,  textureLateralWindowNumber: 3,  colors: [[0.75, 0.71, 0.68], [0.34, 0.32, 0.31]], pbr: false},
      'old office building'    : {textureFloorNumber: 4,   textureWidth: 15,  textureLateralWindowNumber: 9,  colors: [[0.65, 0.61, 0.54], [0.66, 0.51, 0.39]], pbr: false},
      'factory building'       : {textureFloorNumber: 5,   textureWidth: 16,  textureLateralWindowNumber: 4,  colors: [[0.88, 0.87, 0.86]], pbr: false},
      'tall house'             : {textureFloorNumber: 2,   textureWidth: 6,   textureLateralWindowNumber: 2,  colors: [[0.72, 0.72, 0.72]], pbr: false},
      'office building'        : {textureFloorNumber: 2,   textureWidth: 8,   textureLateralWindowNumber: 4,  colors: [[0.77, 0.81, 0.82]], pbr: false},
      'concrete building'      : {textureFloorNumber: 3,   textureWidth: 8,   textureLateralWindowNumber: 2,  colors: [[0.92, 0.87, 0.86]], pbr: false}
    };

    const availableWallColors = [
      [0.5, 0, 0], [1, 0, 0], [0.5, 0.5, 0], [1, 1, 0], [0, 0.5, 0], [0, 1, 0], [0, 0.5, 0.5],
      [0, 1, 1], [0, 0, 0.5], [0, 0, 1], [0.5, 0, 0.5], [1, 0, 1], [0.545, 0.27, 0.073]
    ];

    // list of textures supporting colors
    const coloredWallTypes = {
      'old house': {},
      'brick building': {},
      'factory building': {},
      'tall house': {},
      'office building': {},
      'concrete building': {},
      'transparent highrise': {}
    };

    const availableRoofColors = [[1, 0, 0], [0.75, 0.75, 0.75], [0, 0, 0]];

    // list of roof textures supporting colors
    const coloredRoofTypes = {'tiled': {}, 'bitumen': {}};

    // convert 'availableColors' in hexadecimal
    function toHex (value) {
      const digits = '0123456789ABCDEF';
      let sign = '';

      for (let i = 0; i < value.length; ++i) {
        let n = Math.ceil(value[i] * 255);
        for (let j = 0; j <= 1; ++j) {
          let d = (n % 16);
          n = Math.floor(n / 16);
          sign += digits[d];
        }
      }

      return sign;
    }

    // determine wall texture parameters
    const wallType = fields.wallType.value
    // determine wall color
    let wallColorPrefix = '';
    let wallColor = fields.wallColor.value;
    if (wallColor.length > 0) {
      if (typeof coloredWallTypes[wallType] === 'undefined') {
        wallColor = fields.wallColor.defaultValue;
        let list = '';
        for (let i = 0; i < coloredWallTypes.length; ++i) {
          list += '\'' + coloredWallTypes[i] + '\'';

          if (i !== coloredWallTypes.length -1)
            list += ', '
        }
        console.error('\'WallTypes\' with a \'WallColor\' must be a value in the list: ' + list + '.');
      } else {
        let minDifference = 3;
        let k;
        let hue = 0;
        let value = 0;
        let saturation = 0;
        // we calculate HSV values with RGB
        let maxValue = Math.max(wallColor[0].r, wallColor[0].g, wallColor[0].b);
        let minValue = Math.min(wallColor[0].r, wallColor[0].g, wallColor[0].b);
        if (maxValue === wallColor[0].r) {
          hue = (wallColor[0].g - wallColor[0].b) / (maxValue - minValue) * 60;
          if (hue < 0)
            hue = hue + 360;
        } else if (maxValue === wallColor[0].g)
          hue = ((wallColor[0].b - wallColor[0].r) / (maxValue - minValue) + 2) * 60;
        else if (maxValue === wallColor[0].b)
          hue = ((wallColor[0].r - wallColor[0].g) / (maxValue - minValue) + 4) * 60;

        if (maxValue === 0)
          saturation = 0;
        else
          saturation = (maxValue - minValue) / maxValue * 255;

        value = maxValue * 255;
        // we define specific colors with HSV
        if (value <= 80)
          k = '000000';
        else if (saturation > 20 && saturation < 85 && hue > 20 && hue < 78 && value > 165)
          k = 'F5DEB3';
        else if (saturation > 20 && hue >= 78 && hue < 140 && value > 165)
          k = '00FF00';
        else if (saturation < 25 && value > 230)
          k = 'FFFFFF';
        else if (saturation < 30 && value > 150)
          k = 'C0C0C0';
        else if (saturation < 35 && value > 80)
          k = '808080';
        else {
          // we calculate the smallest RGB difference to define the other colors
          for (let i = 0; i < availableWallColors.length; ++i) {
            let difference = Math.abs(wallColor[0].r - availableWallColors[i][0]) + Math.abs(wallColor[0].g - availableWallColors[i][1]) + Math.abs(wallColor[0].b - availableWallColors[i][2]);
            if (minDifference > difference) {
              minDifference = difference;
              k = toHex(availableWallColors[i]);
            }
          }
        }
        wallColorPrefix = '_' + k;
      }
    }

    let wallTexture;
    if (wallColorPrefix !== '') {
      wallTexture = 'colored_textures/' + wallType + wallColorPrefix + '.jpg';
    } else {
      if (wallTypes[wallType].pbr)
        wallTexture = wallType + '_base_color.jpg';
      else
        wallTexture = wallType + '.jpg';
    }
    wallTexture = wallTexture.replace(/\s/g, '_');

    const wallTextureWidth = wallTypes[wallType].textureWidth;
    const wallTextureFloorNumber = wallTypes[wallType].textureFloorNumber;
    const wallTextureLateralWindowNumber = wallTypes[wallType].textureLateralWindowNumber;

    // determine roof texture parameters
    const roofType = fields.roofType.value;
    // determine roof color
    let roofColorPrefix = '';
    let roofColor = fields.roofColor.value;
    if (roofColor.length > 0) {
      if (typeof coloredRoofTypes[roofType] === 'undefined') {
        roofColor = fields.roofColor.defaultValue;
        let list = '';
        for (let i = 0; i < coloredRoofTypes.length; ++i) {
          list += '\'' + coloredRoofTypes[i] + '\'';

          if (i !== coloredWallTypes.length -1)
            list += ', '
        }
        console.error('\'coloredRoofTypes\' must be a value in the list: ' + list + '.');
      } else {
        let minDifference = 3;
        let k;
        // we calculate the smallest RGB difference to define the color
        for (let i = 0; i < availableRoofColors.length; ++i) {
          let difference = Math.abs(roofColor[0].r - availableRoofColors[i][0]) + Math.abs(roofColor[0].g - availableRoofColors[i][1]) + Math.abs(roofColor[0].b - availableRoofColors[i][2]);
          if (minDifference > difference) {
            minDifference = difference;
            k = toHex(availableRoofColors[i]);
          }
        }
        roofColorPrefix = '_' + k;
      }
    }

    let roofTexture;
    if (fields.snowOnRoof.value)
      roofTexture = roofType + '_with_snow.jpg';
    else if (roofColorPrefix !== '')
      roofTexture = 'colored_textures/' + roofType + roofColorPrefix + '.jpg'
    else
      roofTexture = roofType + '.jpg';

    roofTexture = roofTexture.replace(/\s/g, '_');
    let roofTextureSize = roofTypes[roofType].textureSize;

    let model = '"' +  wallType + '"';
    if (wallType.substring(wallType.length - 'buildings'.length) !== 'buildings')
      model = '"' + wallType + " building" + '"';
  >%
  Building {
    translation IS translation
    rotation IS rotation
    name IS name
    floorHeight IS floorHeight
    floorNumber IS floorNumber
    startingFloor IS startingFloor
    corners IS corners
    groundFloor IS groundFloor
    groundFloorScale IS groundFloorScale
    groundFloorTranslation IS groundFloorTranslation
    roofShape IS roofShape
    roofHeight IS roofHeight
    enableBoundingObject IS enableBoundingObject
    bottom IS bottom
    model %<= model >%
    recognitionColors [
    %< for (let i = 0; i < wallTypes[wallType].colors.length; ++i) { >%
      %<= wallTypes[wallType].colors[i][0] >% %<= wallTypes[wallType].colors[i][1] >% %<= wallTypes[wallType].colors[i][2] >%
    %< } >%
    ]
    wallAppearance PBRAppearance {
      baseColorMap ImageTexture {
        url [ %<= '"webots://projects/objects/buildings/protos/textures/' + wallTexture + '"' >% ]
      }
      metalness 0
      roughness 1
      textureTransform TextureTransform {
        scale %<= 1 / wallTextureWidth >% %<= 1 / wallTextureFloorNumber >%
      }
    }
    roofAppearance PBRAppearance {
      baseColorMap ImageTexture {
        url [ %<= '"webots://projects/objects/buildings/protos/textures/' + roofTexture + '"' >% ]
      }
      metalness 0
      roughness 1
      textureTransform TextureTransform {
        scale %<= 1 / roofTextureSize >% %<= 1 / roofTextureSize >%
      }
    }
  }
}
