#VRML_SIM R2019a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A customizable building, the size and geometry can fully be defined.
# The texture of the wall and roof can be selected using the fields 'wallType' and 'roofType'.
# Available wall types are:
#  - `glass building`
#  - `classic building`
#  - `orange building`
#  - `gray glass building`
#  - `blue glass building`
#  - `arcade-style building`
#  - `transparent highrise`
#  - `windowed building`
#  - `old brick building`
#  - `red and white building`
#  - `construction building`
#  - `red brick wall`
#  - `old brick wall`
#  - `stone brick`
#  - `stone wall`
#  - `glass highrise`
#  - `old house`
#  - `old building`
#  - `highrise`
#  - `brick building`
#  - `residential building`
#  - `old office building`
#  - `factory building`
#  - `tall house`
#  - `office building`
#  - `concrete building`
#
# Available roof types are:
#  - `tiled`
#  - `gravel`
#  - `slate`
#  - `old tiles`
#  - `sheet metal`
#  - `metal tiles`
#  - `bitumen`
#
# The roof shape can be either 'flat' or 'pyramidal' (in case of pyramidal roof it is possible to define the height).

PROTO SimpleBuilding [
  field SFVec3f     translation            0 0 0
  field SFRotation  rotation               0 1 0 0
  field SFString    name                   "building"
  field SFFloat     floorHeight            3                                  # Defines the height of one floor.
  field SFInt32     floorNumber            3                                  # Defines the number of floors (excluding roof).
  field SFInt32     startingFloor          0                                  # Defines the floor number for the "ground floor" of the building, as not all buildings start at the ground floor.
  field MFVec2f     corners                [10 10, 10 -10, -10 -10, -10 10 ]  # Defines the 2D geometry of the building (2D ground footprint of the building).
  field SFString{"glass building", "classic building", "orange building", "gray glass building", "blue glass building", "arcade-style building", "transparent highrise", "windowed building", "old brick building", "red and white building", "construction building", "red brick wall", "old brick wall", "stone brick", "stone wall", "glass highrise", "old house", "old building", "highrise", "brick building", "residential building", "old office building", "factory building", "tall house", "office building", "concrete building"}
                    wallType               "windowed building"                # Defines the wall type.
  field MFColor     wallColor              []                                 # Defines the wall color.
  field MFString    groundFloor            []                                 # Defines the texture to be used for the first floor (optional).
  field MFFloat     groundFloorScale       []                                 # Defines the horizontal scale of the ground texture.
  field MFFloat     groundFloorTranslation []                                 # Defines the translation of the ground floor textures.
  field SFString{"tiled", "gravel", "slate", "old tiles", "sheet metal", "metal tiles", "bitumen"}
                    roofType               "tiled"                            # Defines roof type.
  field MFColor     roofColor              []                                 # Defines the roof color.
  field SFString{"flat roof", "pyramidal roof", "gabled roof", "hipped roof"}
                    roofShape              "pyramidal roof"                   # Defines the geometry of the roof. Supported geometry are `flat roof`, `pyramidal roof`, `gabled roof` and `hipped roof`.
  field SFBool      snowOnRoof             FALSE                              # Defines whether the texture with or without snow should be used.
  field SFFloat     roofHeight             3                                  # Defines the height of the roof.
  field SFBool      enableBoundingObject   TRUE                               # Defines whether the building should have a bounding object or not.
  field SFBool      bottom                 FALSE                              # Defines whether the bottom face of the building should be displayed.
]
{
  %{
    local wbcore = require('wbcore')
    local wbrandom = require('wbrandom')
    wbrandom.seed(context.id)

    local roofTypes = {
      ["tiled"]  =      { textureSize = 2 },
      ["gravel"] =      { textureSize = 1 },
      ["slate"]  =      { textureSize = 2 },
      ["old tiles"] =   { textureSize = 2 },
      ["sheet metal"] = { textureSize = 2 },
      ["metal tiles"] = { textureSize = 2 },
      ["bitumen"] =     { textureSize = 2 }
    }

    -- the wallType is the texture's name (ex. "glass building"'s texture name is "glass_building.jpg")
    local wallTypes = {
      ["glass building"]         = { textureFloorNumber = 4,   textureWidth = 12,  textureLateralWindowNumber = 4, colors = {{0.44, 0.56, 0.7}}, pbr = true },
      ["classic building"]       = { textureFloorNumber = 4,   textureWidth = 12,  textureLateralWindowNumber = 8, colors = {{0.62, 0.56, 0.49}}, pbr = true },
      ["orange building"]        = { textureFloorNumber = 3,   textureWidth = 12,  textureLateralWindowNumber = 5, colors = {{0.83, 0.48, 0.36}}, pbr = true },
      ["gray glass building"]    = { textureFloorNumber = 12,  textureWidth = 15,  textureLateralWindowNumber = 4, colors = {{0.85, 0.88, 0.91}} },
      ["blue glass building"]    = { textureFloorNumber = 4,   textureWidth = 12,  textureLateralWindowNumber = 8, colors = {{0.31, 0.58, 0.9}, {0.22, 0.23, 0.26}}, pbr = true },
      ["arcade-style building"]  = { textureFloorNumber = 2,   textureWidth = 6,   textureLateralWindowNumber = 2, colors = {{0.57, 0.57, 0.55}} },
      ["transparent highrise"]   = { textureFloorNumber = 3,   textureWidth = 9,   textureLateralWindowNumber = 3, colors = {{0.37, 0.62, 0.77}}, pbr = true },
      ["windowed building"]      = { textureFloorNumber = 4,   textureWidth = 12,  textureLateralWindowNumber = 3, colors = {{0.76, 0.79, 0.84}}, pbr = true },
      ["old brick building"]     = { textureFloorNumber = 8,   textureWidth = 20,  textureLateralWindowNumber = 5, colors = {{0.53, 0.48, 0.42}, {0.85, 0.86, 0.84}} },
      ["red and white building"] = { textureFloorNumber = 3,   textureWidth = 15,  textureLateralWindowNumber = 5, colors = {{0.75, 0.8, 0.77}, {0.62, 0.12, 0.12}} },
      ["construction building"]  = { textureFloorNumber = 8,   textureWidth = 12,  textureLateralWindowNumber = 8, colors = {{0.38, 0.38, 0.40}}, pbr = true },
      ["red brick wall"]         = { textureFloorNumber = 0.3, textureWidth = 0.3, textureLateralWindowNumber = 1, colors = {{0.77, 0.33, 0.23}} },
      ["old brick wall"]         = { textureFloorNumber = 0.3, textureWidth = 0.6, textureLateralWindowNumber = 1, colors = {{0.53, 0.48, 0.33}} },
      ["stone brick"]            = { textureFloorNumber = 0.5, textureWidth = 1,   textureLateralWindowNumber = 1, colors = {{0.7, 0.6, 0.51}} },
      ["stone wall"]             = { textureFloorNumber = 0.8, textureWidth = 3,   textureLateralWindowNumber = 1, colors = {{0.47, 0.5, 0.53}} },
      ["glass highrise"]         = { textureFloorNumber = 7,   textureWidth = 20,  textureLateralWindowNumber = 13, colors = {{0.19, 0.25, 0.29}, {0.29, 0.38, 0.48}} },
      ["old house"]              = { textureFloorNumber = 2,   textureWidth = 6,   textureLateralWindowNumber = 3, colors = {{0.74, 0.54, 0.35}} },
      ["old building"]           = { textureFloorNumber = 4,   textureWidth = 12,  textureLateralWindowNumber = 5, colors = {{0.85, 0.63, 0.53}} },
      ["highrise"]               = { textureFloorNumber = 5,   textureWidth = 12,  textureLateralWindowNumber = 3, colors = {{0.83, 0.78, 0.73}} },
      ["brick building"]         = { textureFloorNumber = 3,   textureWidth = 8,   textureLateralWindowNumber = 4, colors = {{0.58, 0.35, 0.27}} },
      ["residential building"]   = { textureFloorNumber = 6,   textureWidth = 18,  textureLateralWindowNumber = 3, colors = {{0.75, 0.71, 0.68}, {0.34, 0.32, 0.31}} },
      ["old office building"]    = { textureFloorNumber = 4,   textureWidth = 15,  textureLateralWindowNumber = 9, colors = {{0.65, 0.61, 0.54}, {0.66, 0.51, 0.39}} },
      ["factory building"]       = { textureFloorNumber = 5,   textureWidth = 16,  textureLateralWindowNumber = 4, colors = {{0.88, 0.87, 0.86}} },
      ["tall house"]             = { textureFloorNumber = 2,   textureWidth = 6,   textureLateralWindowNumber = 2, colors = {{0.72, 0.72, 0.72}} },
      ["office building"]        = { textureFloorNumber = 2,   textureWidth = 8,   textureLateralWindowNumber = 4, colors = {{0.77, 0.81, 0.82}} },
      ["concrete building"]      = { textureFloorNumber = 3,   textureWidth = 8,   textureLateralWindowNumber = 2, colors = {{0.92, 0.87, 0.86}} }
    }

    local availableWallColors = {
      {0.5, 0, 0}, {1, 0, 0}, {0.5, 0.5, 0}, {1, 1, 0}, {0, 0.5, 0}, {0, 1, 0}, {0, 0.5, 0.5},
      {0, 1, 1}, {0, 0, 0.5}, {0, 0, 1}, {0.5, 0, 0.5}, {1, 0, 1}, {0.545, 0.27, 0.073}
    }

    -- List of textures supporting colors
    local coloredWallTypes = {
      ["old house"] = {},
      ["brick building"] = {},
      ["factory building"] = {},
      ["tall house"] = {},
      ["office building"] = {},
      ["concrete building"] = {},
      ["transparent highrise"] = {}
    }

    local availableRoofColors = {
      {1, 0, 0}, {0.75, 0.75, 0.75}, {0, 0, 0},
    }

    -- List of roof textures supporting colors
    local coloredRoofTypes = {
      ["tiled"] = {},
      ["bitumen"] = {}
    }

    -- convert 'availableColors' in hexadecimal
    function toHex(value)
      local digits = "0123456789ABCDEF"
      local t = {}
      local sign = ""
      local p = 1
      for i, v in ipairs(value) do
        n = math.ceil(value[i] * 255)
        for i = 0, 1 do
          local d = (n % 16) + 1
          n = math.floor(n / 16)
          table.insert(t, p, digits:sub(d,d))
        end
        p = p + 2
      end
      return sign .. table.concat(t,"")
    end

    -- determine wall texture parameters
    local wallType = fields.wallType.value
    -- determine wall's color
    local wallColorPrefix = ""
    local wallColor = fields.wallColor.value
    if wbcore.tablelength(wallColor) > 0 then
      if coloredWallTypes[wallType] == nil then
        wallColor = fields.wallColor.defaultValue
        list = " "
        for k, v in pairs(coloredWallTypes) do
          list = list .. '"' .. k .. '"' .. ", "
          end
      io.stderr:write("'WallTypes' with a 'WallColor' must be a value in the list: " .. list .. "\n")
      else
        local minDifference = 3
        local k = ""
        local hue = 0
        local value = 0
        local saturation = 0
        -- We calculate HSV values with RGB
        local maxValue = math.max(wallColor[1].r, wallColor[1].g, wallColor[1].b)
        local minValue = math.min(wallColor[1].r, wallColor[1].g, wallColor[1].b)
        if maxValue == wallColor[1].r then
          hue = (wallColor[1].g - wallColor[1].b) / (maxValue - minValue) * 60
          if hue < 0 then
            hue = hue + 360
          end
        elseif maxValue == wallColor[1].g then
          hue = ((wallColor[1].b - wallColor[1].r) / (maxValue - minValue) + 2) * 60
        elseif maxValue == wallColor[1].b then
          hue = ((wallColor[1].r - wallColor[1].g) / (maxValue - minValue) + 4) * 60
        end
        if maxValue == 0 then
          saturation = 0
        else
          saturation = (maxValue - minValue) / maxValue * 255
        end
        value = maxValue * 255
        -- We define specific colors with HSV
        if value <= 80 then
          k = "000000"
        elseif saturation > 20 and saturation < 85 and hue > 20 and hue < 78 and value > 165 then
          k = "F5DEB3"
        elseif saturation > 20 and hue >= 78 and hue < 140 and value > 165 then
          k = "00FF00"
        elseif saturation < 25 and value > 230 then
          k = "FFFFFF"
        elseif saturation < 30 and value > 150 then
          k = "C0C0C0"
        elseif saturation < 35 and value > 80 then
          k = "808080"
        else
          -- We calculate the smallest RGB difference to define the other colors
          for i, value in pairs(availableWallColors) do
            local difference = math.abs(tonumber(wallColor[1].r) - value[1]) + math.abs(wallColor[1].g - value[2]) + math.abs(wallColor[1].b - value[3])
            if minDifference > difference then
              minDifference = difference
              k = toHex(value)
            end
          end
        end
        wallColorPrefix = "_" .. k
      end
    end
    if wallColorPrefix ~= "" then
      wallTexture = string.gsub("colored_textures/" .. wallType .. wallColorPrefix .. ".jpg"," ","_")
    else
      if wallTypes[wallType].pbr then
        wallTexture = string.gsub(wallType .. "_base_color.jpg"," ","_")
      else
        wallTexture = string.gsub(wallType .. ".jpg"," ","_")
      end
    end
    wallTextureWidth = wallTypes[wallType].textureWidth
    wallTextureFloorNumber = wallTypes[wallType].textureFloorNumber
    wallTextureLateralWindowNumber = wallTypes[wallType].textureLateralWindowNumber

    -- determine roof texture parameters
    local roofType = fields.roofType.value
    -- determine roof's color
    local roofColorPrefix = ""
    local roofColor = fields.roofColor.value
    if wbcore.tablelength(roofColor) > 0 then
      if coloredRoofTypes[roofType] == nil then
        roofColor = fields.roofColor.defaultValue
        list = " "
        for k, v in pairs(coloredRoofTypes) do
          list = list .. '"' .. k .. '"' .. ", "
        end
        io.stderr:write("'coloredRoofTypes' must be a value in the list: " .. list .. "\n")
      else
        local minDifference = 3
        local k = ""
        -- We calculate the smallest RGB difference to define the color
        for i, value in pairs(availableRoofColors) do
          local difference = math.abs(roofColor[1].r - value[1]) + math.abs(roofColor[1].g - value[2]) + math.abs(roofColor[1].b - value[3])
          if minDifference > difference then
            minDifference = difference
            k = toHex(value)
          end
        end
        roofColorPrefix = "_" .. k
      end
    end
    if fields.snowOnRoof.value then
      roofTexture = string.gsub(roofType .. "_with_snow.jpg"," ","_")
    elseif roofColorPrefix ~= "" then
      roofTexture = string.gsub("colored_textures/" .. roofType .. roofColorPrefix .. ".jpg"," ","_")
    else
      roofTexture = string.gsub(roofType .. ".jpg"," ","_")
    end
    roofTextureSize = roofTypes[roofType].textureSize

    local model = '"'..  wallType .. '"'
    if string.sub(wallType,-string.len("building")) ~= "building" then
      model = '"' .. wallType .. " building" .. '"'
    end
  }%
  Building {
    translation IS translation
    rotation IS rotation
    name IS name
    floorHeight IS floorHeight
    floorNumber IS floorNumber
    startingFloor IS startingFloor
    corners IS corners
    groundFloor IS groundFloor
    groundFloorScale IS groundFloorScale
    groundFloorTranslation IS groundFloorTranslation
    roofShape IS roofShape
    roofHeight IS roofHeight
    enableBoundingObject IS enableBoundingObject
    bottom IS bottom
    model %{= model }%
    recognitionColors [
    %{ for i = 1, wbcore.tablelength(wallTypes[wallType].colors) do }%
      %{= wallTypes[wallType].colors[i][1] }% %{= wallTypes[wallType].colors[i][2] }% %{= wallTypes[wallType].colors[i][3] }%
    %{ end }%
    ]
    wallAppearance PBRAppearance {
      baseColorMap ImageTexture {
        url [ %{= '"textures/' .. wallTexture .. '"' }% ]
      }
      metalness 0
      roughness 1
      textureTransform TextureTransform {
        scale %{= 1 / wallTextureWidth }% %{= 1 / wallTextureFloorNumber }%
      }
    }
    roofAppearance PBRAppearance {
      baseColorMap ImageTexture {
        url [ %{= '"textures/' .. roofTexture .. '"' }% ]
      }
      metalness 0
      roughness 1
      textureTransform TextureTransform {
        scale %{= 1 / roofTextureSize }% %{= 1 / roofTextureSize }%
      }
    }
  }
}
