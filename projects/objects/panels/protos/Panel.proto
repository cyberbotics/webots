#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Customizable simple panel.
# template language: javascript

PROTO Panel [
  field SFVec3f    translation      0 0 0
  field SFRotation rotation         0 0 1 0
  field SFString   name             "panel"
  field SFVec3f    size             0.05 1.2 1.5                                                       # Defines the size of the panel.
  field SFFloat    borderHeight     0.05                                                               # Defines the height of the border.
  field SFFloat    internalWidth    0.02                                                               # Defines the width of the panel (without border).
  field SFInt32    panelsCount      2                                                                  # Defines the number of panels.
  field SFNode     appearance       VarnishedPine { textureTransform TextureTransform { scale 5 5 } }  # Defines the appearance of the panel body.
  field SFNode     borderAppearance BrushedAluminium {}                                                # Defines the appearance of the panel border(s).
]
{
  %<
    let internalWidth = fields.internalWidth.value;
    let borderHeight = fields.borderHeight.value;
    let size = fields.size.value;

    if (internalWidth <= 0) {
      internalWidth = fields.internalWidth.defaultValue;
      console.error('\'internalWidth\' should be greater than 0. Value reset to ' + internalWidth + '.');
    }
    if (borderHeight < 0) {
      borderHeight = fields.borderHeight.defaultValue;
      console.error('\'borderHeight\' should be greater than 0. Value reset to ' + borderHeight + '.');
    }
    if (size.x <= 0 || size.y <= 0 || size.z <= 0) {
      size.x = fields.size.defaultValue.x;
      size.y = fields.size.defaultValue.y;
      size.z = fields.size.defaultValue.z;
      console.error('all dimensions of \'size\' should be greater than 0. Value reset to reset to (' + size.x + ', ' + size.y + ', ' + size.z + ').');
    }

    let panelsCount = fields.panelsCount.value;
    if (panelsCount <= 0) {
      panelsCount = fields.panelsCount.defaultValue;
      console.error('\'panelsCount\' should be greater than 0. Value reset to ' + panelsCount + '.');
    }

    if (size.y <= borderHeight * (panelsCount + 1)) {
      panelsCount = 1
      console.error('cumulative size of separators exceeds total size: reset to single panel.');
    }

    const halfSizeY = 0.5 * size.y;
    const halfSizeZ = 0.5 * size.z;
    const nSeparations = panelsCount - 1;
    const panelSizeY = (size.y - borderHeight * (1 + panelsCount)) / panelsCount;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Transform {
        translation 0 %<= halfSizeY >% %<= halfSizeZ >%
        children [
          Shape {
            appearance IS appearance
            geometry Box {
              size %<= internalWidth >% %<= size.y - 2 * borderHeight >% %<= size.z - 2 * borderHeight >%
            }
          }
        ]
      }
      %< if (borderHeight > 0) { >%
        Shape {
          appearance IS borderAppearance
          geometry IndexedFaceSet {
            coord Coordinate {
              point [
                # external frame
                %< for (let dx = 0.5; dx >= -0.5; --dx) {
                    let x = dx * size.x;
                >%
                    %<= x >% %<= 0 >% %<= 0 >%
                    %<= x >% %<= size.y >% %<= 0 >%
                    %<= x >% %<= size.y >% %<= size.z >%
                    %<= x >% %<= 0 >% %<= size.z >%
                    %<= x >% %<= borderHeight >% %<= borderHeight >%
                    %<= x >% %<= size.y - borderHeight >% %<= borderHeight >%
                    %<= x >% %<= size.y - borderHeight >% %<= size.z - borderHeight >%
                    %<= x >% %<= borderHeight >% %<= size.z - borderHeight >%
                %< } >%
                # internal panel separations
                %<
                  if (nSeparations > 0) {
                    let offsetY = 1.5 * borderHeight + panelSizeY; // halfSizeY
                    for (let i = 1; i <= nSeparations; ++i) {
                      for (let dx = -0.5; dx <= 0.5; ++dx) {
                        let x = dx * size.x;
                        for (let dz = -0.5; dz <= 0.5; ++dz) {
                          const z = halfSizeZ + dz * (size.z - 2 * borderHeight);
                          for (let dy = -0.5; dy <= 0.5; ++dy) {
                  >%
                            %<= x >% %<= offsetY + dy * borderHeight >% %<= z >%
                  %<
                          }
                        }
                      }
                      offsetY = offsetY + panelSizeY + borderHeight;
                    }
                  }
                >%
              ]
            }
            texCoord TextureCoordinate {
              point [
              %<
                const borderY = borderHeight / size.y;
                const borderZ = borderHeight / size.z;
              >%
                0.0 0.0
                1.0 0.0
                0.0 1.0
                1.0 1.0
                %<= borderY >% %<= borderZ >%
                %<= 1 - borderY >% %<= borderZ >%
                %<= borderY >% %<= 1 - borderZ >%
                %<= 1- borderY >% %<= 1 - borderZ >%
              %<
                let y = panelSizeY + borderHeight;
                for (let i = 1; i <= nSeparations; i++) {
                  const texU1 = y / size.y;
                  const texU2 = (y + borderHeight) / size.y;
              >%
                  %<= texU1 >% %<= borderZ >%
                  %<= texU2 >% %<= borderZ >%
                  %<= texU1 >% %<= 1 - borderZ >%
                  %<= texU2 >% %<= 1 - borderZ >%
              %<
                  y = y + panelSizeY + borderHeight;
                }
              >%
              ]
            }
            coordIndex [
              # external frame
              0 5 4 -1 0 1 5 -1
              1 6 5 -1 1 2 6 -1
              2 7 6 -1 2 3 7 -1
              3 4 7 -1 3 0 4 -1
              8 12 13 -1 8 13 9 -1
              9 13 14 -1 9 14 10 -1
              10 14 15 -1 10 15 11 -1
              11 15 12 -1 11 12 8 -1
              0 11 8 -1 0 3 11 -1
              1 9 10 -1 1 10 2 -1
              2 11 3 -1 2 10 11 -1
              0 8 9 -1 0 9 1 -1
              4 12 15 -1 4 15 7 -1
              5 14 13 -1 5 6 14 -1
              6 15 14 -1 6 7 15 -1
              4 13 12 -1 4 5 13 -1
              # internal panel separations
              %<
              if (nSeparations > 0) {
                let pointCount = 16;
                for (let i = 1; i <= nSeparations; ++i) {
              >%
                  %<= pointCount + 1 >% %<= pointCount + 2 >% %<= pointCount + 3 >% -1
                  %<= pointCount + 1 >% %<= pointCount + 0 >% %<= pointCount + 2 >% -1
                  %<= pointCount + 0 >% %<= pointCount + 6 >% %<= pointCount + 2 >% -1
                  %<= pointCount + 0 >% %<= pointCount + 4 >% %<= pointCount + 6 >% -1
                  %<= pointCount + 4 >% %<= pointCount + 7 >% %<= pointCount + 6 >% -1
                  %<= pointCount + 4 >% %<= pointCount + 5 >% %<= pointCount + 7 >% -1
                  %<= pointCount + 5 >% %<= pointCount + 3 >% %<= pointCount + 7 >% -1
                  %<= pointCount + 5 >% %<= pointCount + 1 >% %<= pointCount + 3 >% -1
              %<
                  pointCount = pointCount + 8;
                  }
                }
              >%
            ]
            texCoordIndex [
              # faces (aligned with panel)
              0 5 4 -1 0 1 5 -1
              1 7 5 -1 1 3 7 -1
              3 6 7 -1 3 2 6 -1
              2 4 6 -1 2 0 4 -1
              0 4 5 -1 0 5 1 -1
              1 5 7 -1 1 7 3 -1
              3 7 6 -1 3 6 2 -1
              2 6 4 -1 2 4 0 -1
              # edges
              0 3 2 -1 0 2 3 -1
              0 2 3 -1 0 3 2 -1
              0 3 2 -1 0 2 3 -1
              0 2 3 -1 0 3 2 -1
              0 2 3 -1 0 3 2 -1
              0 3 2 -1 0 2 3 -1
              0 3 2 -1 0 2 3 -1
              0 3 2 -1 0 2 3 -1
              %< if (nSeparations > 0) {
                let pointCount = 8;
                for (let i = 1; i <= nSeparations; ++i) { >%
                  %<= pointCount + 1 >% %<= pointCount + 2 >% %<= pointCount + 3 >% -1
                  %<= pointCount + 1 >% %<= pointCount + 0 >% %<= pointCount + 2 >% -1
                  0 3 2 -1 0 2 3 -1
                  %<= pointCount + 0 >% %<= pointCount + 3 >% %<= pointCount + 2 >% -1
                  %<= pointCount + 0 >% %<= pointCount + 1 >% %<= pointCount + 3 >% -1
                  0 3 2 -1 0 2 3 -1
              %<
                  pointCount = pointCount + 4;
                  }
                }
              >%
            ]
          }
        }
      %< } >%
    ]
    name IS name
    model "panel"
    boundingObject Transform {
      translation 0 %<= halfSizeY >% %<= halfSizeZ >%
      children [
        Box {
          size IS size
        }
      ]
    }
  }
}
