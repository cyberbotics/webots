#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A customizable fence.
# Dimensions, path and appearance of the fence can be set.
# If subdivision is bigger than 1, B-Splines are used to interpolate path of the fence.
# This model was sponsored by the CTI project RO2IVSim (http://transport.epfl.ch/simulator-for-mobile-robots-and-intelligent-vehicles).

PROTO Fence [
  field SFVec3f      translation             0 0 0
  field SFRotation   rotation                0 1 0 0
  field SFString     name                    "fence"
  field SFString     model                   "fence"
  field MFColor      recognitionColors       [0.8 0.8 0.8]
  field SFFloat      height                  1.5                                                          # Defines the height of the fence.
  field SFFloat      poleGap                 0.5                                                          # Defines the distance between two consecutives poles.
  field SFFloat      poleRadius              0.04                                                         # Defines the radius of the poles.
  field SFString{"cylinder", "square", "diamond", "H"}
                     poleShape               "cylinder"                                                   # Defines the shape of the poles. The value should be either `cylinder`, `square`, `diamond` or `H`.
  field SFNode       poleAppearance          PBRAppearance {}                                             # Defines the appearance of the poles.
  field MFVec3f      path                    [0 0 0, 5 0 0]                                               # Defines the 3D path of the fence.
  field SFInt32      subdivision             -1                                                           # Defines the degree of interpolation using B-Splines (if the value is lower than 0, the interpolation is disabled).
  field SFInt32      horizontalBarsNumber    2                                                            # Defines the number of horizontal bars.
  field MFVec2f      horizontalBarShape      [0.06 0.02, 0.06 -0.02, -0.06 -0.02, -0.06 0.02, 0.06 0.02]  # Defines the shape 2D of the horizontal bars.
  field SFNode       horizontalBarAppearance PBRAppearance {}                                             # Defines the appearance of the horizontal bars.
  field SFNode       boundingObject          NULL                                                         # Is `Solid.boundingObject`.
  field SFFloat      creaseAngle             0.3                                                          # Defines the creaseAngle of the horizontal bar.
  hiddenField SFNode appearance              NULL                                                         # For backward compatibility warning.
]
{
  %{
    local wbgeometry = require('wbgeometry')
    local wbcore = require('wbcore')
    local wbvector2 = require('wbvector2')

    -- parameter checking
    local poleGap = fields.poleGap.value
    if poleGap <= 0 then
      io.stderr:write("'poleGap' must be greater than 0\n")
      poleGap = fields.poleGap.defaultValue
    end
    local height = fields.height.value
    if height <= 0 then
      io.stderr:write("'height' must be greater than 0\n")
      height = fields.height.defaultValue
    end
    local poleRadius = fields.poleRadius.value
    if poleRadius <= 0 then
      io.stderr:write("'poleRadius' must be greater than 0\n")
      poleRadius = fields.poleRadius.defaultValue
    end
    local path = fields.path.value
    if wbcore.tablelength(path) < 2 then
      io.stderr:write("'path' must have at least two components\n")
      path = fields.path.defaultValue
    end
    local poleShape = fields.poleShape.value
    if fields.appearance.value ~= fields.appearance.defaultValue then
      io.stderr:write("Deprecated 'appearance' field, please use 'poleAppearance' and 'horizontalBarAppearance' instead.\n")
    end
    local horizontalBarsNumber = fields.horizontalBarsNumber.value
    local subdivision = fields.subdivision.value

    -- use B-Spline interpolation if subdivision is greater than 1
    if subdivision > 0 then
      path = wbgeometry.bspline3D(path, subdivision)
    end
    local nbPath = wbcore.tablelength(path)

    -- compute pole positions
    local polePositions = {}
    local offset = -poleRadius
    for i = 1, nbPath - 1 do
      local distance = wbvector2.distance({x = path[i].x, y = path[i].z}, {x = path[i+1].x, y = path[i+1].z})
      local distanceTotal = offset + distance
      local poleNb = math.floor(distanceTotal / poleGap)
      local start = 1
      if i == 1 then  -- make sure first pole starts at beginning
        start = 0
      end
      for j = start, poleNb do
        local ratio = (poleGap * j - offset) / distance
        local point = {x = (1 - ratio) * path[i].x + ratio * path[i+1].x, y= (1 - ratio) * path[i].y + ratio * path[i+1].y, z = (1 - ratio) * path[i].z + ratio * path[i+1].z}
        point.y = point.y + height / 2
        table.insert(polePositions, point)
      end
      offset = distanceTotal - poleNb * poleGap
    end
    local nbPoles = wbcore.tablelength(polePositions)
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    recognitionColors [
    %{ if fields.horizontalBarAppearance.value ~= nil then }%
      %{ if fields.horizontalBarAppearance.value.fields.baseColor ~= nilen then }%
        %{ local color = fields.horizontalBarAppearance.value.fields.baseColor.value }%
        %{= color.r }% %{= color.g }% %{= color.b }%
      %{ elseif fields.horizontalBarAppearance.value.fields.material ~= nil and fields.horizontalBarAppearance.value.fields.material.value ~= nil then }%
        %{ local color = fields.horizontalBarAppearance.value.fields.material.value.fields.diffuseColor.value }%
        %{= color.r }% %{= color.g }% %{= color.b }%
      %{ end }%
    %{ end }%
    %{ if fields.poleAppearance.value ~= nil then }%
      %{ if fields.poleAppearance.value.fields.baseColor ~= nilen then }%
        %{ local color = fields.poleAppearance.value.fields.baseColor.value }%
        %{= color.r }% %{= color.g }% %{= color.b }%
      %{ elseif fields.poleAppearance.value.fields.material ~= nil and fields.poleAppearance.value.fields.material.value ~= nil then }%
        %{ local color = fields.poleAppearance.value.fields.material.value.fields.diffuseColor.value }%
        %{= color.r }% %{= color.g }% %{= color.b }%
      %{ end }%
    %{ end }%
    ]
    children [
      # horizontal bars
      %{ for j = 0, horizontalBarsNumber - 1 do }%
        %{
          local horizontalBarsHeight = height / 2
          if horizontalBarsNumber > 1 then
            horizontalBarsHeight = height * ((j / (horizontalBarsNumber - 1)) * 0.8 + 0.1)
          end
        }%
        Transform {
          translation 0 %{= horizontalBarsHeight }% 0
          children [
            %{ if j == 0 then }%
              DEF HORIZONTALE_BAR Shape {
                appearance IS horizontalBarAppearance
                geometry Extrusion {
                  spine IS path
                  splineSubdivision IS subdivision
                  creaseAngle IS creaseAngle
                  crossSection IS horizontalBarShape
                }
              }
            %{ else }%
              USE HORIZONTALE_BAR
            %{ end }%
          ]
        }
      %{ end }%
      # poles
      Shape {
        appearance IS poleAppearance
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
              %{
                local circleSubdivision = 4
                local angleOffset = 0
                if poleShape == "cylinder" or poleShape == "H" then
                  circleSubdivision = 12
                elseif poleShape == "square" then
                  angleOffset = 0.7854
                end
                local circle = wbgeometry.circle(poleRadius, circleSubdivision, 0, 0, angleOffset)
                if poleShape == "H" then
                  circle = {}
                  table.insert(circle, {x = -0.25 * poleRadius; y = 0.5 * poleRadius})
                  table.insert(circle, {x = -0.25 * poleRadius; y = -0.5 * poleRadius})
                  table.insert(circle, {x = -poleRadius; y = -0.5 * poleRadius})
                  table.insert(circle, {x = -poleRadius; y = -poleRadius})
                  table.insert(circle, {x = poleRadius; y = -poleRadius})
                  table.insert(circle, {x = poleRadius; y = -0.5 * poleRadius})
                  table.insert(circle, {x = 0.25 * poleRadius; y = -0.5 * poleRadius})
                  table.insert(circle, {x = 0.25 * poleRadius; y = 0.5 * poleRadius})
                  table.insert(circle, {x = poleRadius; y = 0.5 * poleRadius})
                  table.insert(circle, {x = poleRadius; y = poleRadius})
                  table.insert(circle, {x = -poleRadius; y = poleRadius})
                  table.insert(circle, {x = -poleRadius; y = 0.5 * poleRadius})
                  table.insert(circle, {x = -0.25 * poleRadius; y = 0.5 * poleRadius})
                end
              }%
              %{ for i = 1, nbPoles do }%
                %{
                  local dx = 0
                  local dy = 0
                  if i == 1 then
                    if nbPoles > 2 then
                      dx = polePositions[2].x - polePositions[1].x
                      dy = polePositions[2].z - polePositions[1].z
                    else
                      dx = path[2].x - path[1].x
                      dy = path[2].z - path[1].z
                    end
                  elseif i == nbPoles then
                    dx = polePositions[nbPoles].x - polePositions[nbPoles - 1].x
                    dy = polePositions[nbPoles].z - polePositions[nbPoles - 1].z
                  else
                    dx = polePositions[i + 1].x - polePositions[i - 1].x
                    dy = polePositions[i + 1].z - polePositions[i - 1].z
                  end
                  local angle = math.atan2(dy, dx)
                }%
                # Top part
                %{ for key, value in ipairs(circle) do }%
                  %{= polePositions[i].x + value.x * math.cos(angle) - value.y * math.sin(angle) }% %{= polePositions[i].y + 0.5 * height }% %{= polePositions[i].z + value.x * math.sin(angle) + value.y * math.cos(angle) }%
                %{ end }%
                # Bottom part
                %{ for key, value in ipairs(circle) do }%
                  %{= polePositions[i].x + value.x * math.cos(angle) - value.y * math.sin(angle) }% %{= polePositions[i].y - 0.5 * height }% %{= polePositions[i].z + value.x * math.sin(angle) + value.y * math.cos(angle) }%
                %{ end }%
              %{ end }%
            ]
          }
          texCoord TextureCoordinate {
            point [
              # Top part of sides
              %{ for j, value in ipairs(circle) do }%
                %{= 2 * poleRadius * math.pi * j / circleSubdivision }% %{= 0.5 * height }%
              %{ end }%
              # Bottom part of sides
              %{ for j, value in ipairs(circle) do }%
                %{= 2 * poleRadius * math.pi * j / circleSubdivision }% %{= - 0.5 * height }%
              %{ end }%
              # Top and bottom faces
              %{ for i = 0, circleSubdivision do }%
                %{= poleRadius * math.cos(2 * math.pi * i / circleSubdivision) }% %{= poleRadius * math.sin(2 * math.pi * i / circleSubdivision) }%
              %{ end }%
            ]
          }
          coordIndex [
            %{ local skip = 2 * (circleSubdivision + 1) }%
            %{ for i = 0, (nbPoles - 1) do }%
              # Top part
              %{ for j = 0, circleSubdivision do }% %{= i * skip + circleSubdivision - j }% %{ end }% -1
              # Bottom part
              %{ for j = 0, circleSubdivision do }% %{= i * skip + j + circleSubdivision + 1 }% %{ end }% -1
              # Sides
              %{ for j = 0, circleSubdivision - 1 do }%
                %{= i * skip + j }% %{= i * skip + j + 1 }% %{= i * skip + j + circleSubdivision + 2 }% %{= i * skip + j + circleSubdivision + 1 }% -1
              %{ end }%
            %{ end }%
          ]
          texCoordIndex [
            %{ for i = 0, (nbPoles - 1) do }%
              # Top part
              %{ for j = 0, circleSubdivision do }% %{= j + 2 * (circleSubdivision + 1) }% %{ end }% -1
              # Bottom part
              %{ for j = 0, circleSubdivision do }% %{= j + 2 * (circleSubdivision + 1) }% %{ end }% -1
              # Sides
              %{ for j = 0, circleSubdivision - 1 do }%
                %{= j }% %{= j + 1 }% %{= j + circleSubdivision + 2 }% %{= j + circleSubdivision + 1 }% -1
              %{ end }%
            %{ end }%
          ]
          creaseAngle 0.6
        }
      }
    ]
    name IS name
    model IS model
    recognitionColors IS recognitionColors
    boundingObject IS boundingObject
  }
}
