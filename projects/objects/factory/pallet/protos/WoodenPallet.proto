#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Simple and configurable wooden pallet.
# template language: javascript

PROTO WoodenPallet [
  field SFVec3f    translation    0 0 0
  field SFRotation rotation       0 0 1 0
  field SFString   name           "wooden pallet"
  field SFVec3f    size           1.2 0.8 0.14     # Defines the size of the pallet.
  field SFInt32    lathNumber     6                # Defines the number of lath of the pallet.
  field SFFloat    lathWidth      0.08             # Defines the width of one lath.
  field SFFloat    mass           0                # Defines the mass of the pallet in kg. A value smaller or equal to 0 remove the physics of the pallet.
  field SFBool     boundingObject TRUE             # Defines whether the bounding object should be enabled.
  field SFBool     locked         FALSE            # Is `Solid.locked`.
]
{
%<
  let size = fields.size.value;
  if (size.x <= 0 || size.y <= 0 || size.z <= 0) {
    size = fields.size.defaultValue;
    console.error('\'size\' should be strictly positive. Value reset to (' + size.x + ', ' + size.y + ', ' + size.z + ').');
  }

  let lathNumber = fields.lathNumber.value;
  if (lathNumber < 0) {
    lathNumber = 0;
    console.error('\'lathNumber\' must be positive or zero. Value reset to ' + lathNumber + '.');
  }

  let lathWidth = fields.lathWidth.value;
  if (lathWidth < 0) {
    lathWidth = 0;
    console.error('\'lathWidth\' must be positive or zero. Value reset to ' + lathWidth + '.');
  }
  if (lathWidth * lathNumber > size.x) {
    lathWidth = size.x / lathNumber;
    console.error('\'lathWidth\' x \'lathNumber\' cannot be bigger than the first component of \'size\'. Value of \'lathWidth\' reset to ' + lathWidth + '.');
  }
  const mass = fields.mass.value;
>%
Solid {
  translation IS translation
  rotation IS rotation
  children [
    # Cubes
    %< for (let i = -1; i <= 1; ++i) { >%
      %< for (let j = -1; j <= 1; ++j) { >%
        Transform {
          translation %<= size.x * j * 0.45 >% %<= 0.45 * size.y * i >% %<= size.z * 0.45 >%
          children [
            Shape {
              appearance RoughPine {
                textureTransform TextureTransform {
                  scale %<= 2 * size.x * 0.1 >% %<= 2 * size.y * 0.1 >%
                }
              }
              geometry Box {
                size %<= size.x * 0.1 >% %<= 0.1 * size.y >% %<= size.z * 0.7 >%
              }
            }
          ]
        }
      %< } >%
    %< } >%
    # Length boards
    %< for (let i = -1; i <= 1; ++i) { >%
      Transform {
        translation 0 %<= size.y * i * 0.45 >% %<= 0.05 * size.z >%
        children [
          Shape {
            appearance RoughPine {
              textureTransform TextureTransform {
                scale %<= 2 * size.x >% %<= 2 * size.z >%
              }
            }
            geometry Box {
              size %<= size.x >% %<= 0.1 * size.y >% %<= size.z * 0.1>%
            }
          }
        ]
      }
    %< } >%
    # width boards
    %< for (let i = -1; i <= 1; ++i) { >%
      Transform {
        translation %<= size.x * i * 0.45 >% 0 %<= 0.85 * size.z >%
        children [
          Shape {
            appearance RoughPine {
              textureTransform TextureTransform {
                scale %<= 2 * size.y >% %<= 2 * size.x * 0.1 >%
              }
            }
            geometry Box {
              size %<= 0.1 * size.x >% %<= size.y >% %<= size.z * 0.1 >%
            }
          }
        ]
      }
    %< } >%
    # Lath lathNumber
    %< for (let i = 0; i < lathNumber; ++i) { >%
      Transform {
        translation %<= 0 >% %<= (size.y - lathWidth) * (i / (lathNumber - 1) - 0.5) >% %<= 0.95 * size.z >%
        children [
          Shape {
            appearance RoughPine {
              textureTransform TextureTransform {
                scale %<= 2 * size.x >% %<= 2 * lathWidth >%
              }
            }
            geometry Box {
              size %<= size.x >% %<= lathWidth >% %<= 0.1 * size.z >%
            }
          }
        ]
      }
    %< } >%
  ]
  name IS name
  model "wooden pallet"
  %< if (fields.boundingObject.value) { >%
  boundingObject Group {
    children [
      %< for (let i = -1; i <= 1; ++i) { >%
        Transform {
          translation 0 %<= 0.45 * i * size.y >% %<= 0.4 * size.z >%
          children
          [
            Box {
              size %<=size.x >% %<= 0.1 * size.y >% %<= 0.8 * size.z >%
            }
          ]
        }
      %< } >%
      Transform {
        translation 0 0 %<= 0.9 * size.z >%
        children
        [
          Box {
            size %<= size.x >% %<= size.y >% %<= 0.2 * size.z >%
          }
        ]
      }
    ]
  }
  %< } >%
  %< if (mass > 0) { >%
  physics Physics {
    density -1
    mass %<= mass >%
  }
  %< } >%
  locked IS locked
}
}
