#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A wooden box.
# template language: javascript

PROTO WoodenBox [
  field SFVec3f    translation         0 0 0.3
  field SFRotation rotation            0 0 1 0
  field SFString   name                "wooden box"
  field SFVec3f    size                0.6 0.6 0.6  # Defines the size of the wooden box.
  field SFFloat    mass                0            # Defines the mass of the wooden box in kg. A value smaller or equal to 0 remove the physics of the wooden box.
  field MFNode     immersionProperties []           # Is `Solid.immersionProperties`.
  field SFBool     locked              FALSE        # Is `Solid.locked`.
]
{
%<
  let size = fields.size.value;
  let volume = size.x * size.y * size.z;
  let mass = fields.mass.value;

  let max_size = 3;
  let min_size = 0.01;

  if (size.x > max_size) {
    console.error('\'size.x\' greater than maximal size (' + max_size + '). Value clamped.');
    size.x = max_size;
  } else if (size.x < min_size) {
    console.error('\'size.x\' less than minimal size (' + min_size + '). Value clamped.');
    size.x = min_size;
  }

  if (size.y > max_size) {
    console.error('\'size.y\' greater than maximal size (' + max_size + '). Value clamped.');
    size.y = max_size;
  } else if (size.y < min_size) {
    console.error('\'size.y\' less than minimal size (' + min_size + '). Value clamped.');
    size.y = min_size;
  }

  if (size.z > max_size) {
    console.error('\'size.z\' greater than maximal size (' + max_size + '). Value clamped.');
    size.z = max_size;
  } else if (size.z < min_size) {
    console.error('\'size.z\' less than minimal size (' + min_size + '). Value clamped.');
    size.z = min_size;
  }

  // we want the mass for a 1000cm3 box be comprised between 0.01 and 10 kg inclusive,
  // hence the following min_mass and max_mass values:
  let min_mass = Math.pow(volume, 2/3);
  let max_mass = min_mass*1000;
  if (mass > 0 && mass < min_mass) {
    console.error('\'mass\' less than minimal value (' + min_mass + '). Value clamped.');
    mass = min_mass;
  } else if (mass > max_mass) {
    console.error('\'mass\' greater than maximal value (' + max_mass + '). Value clamped.');
    mass = max_mass;
  }
>%
Solid {
  translation IS translation
  rotation IS rotation
  children [
    DEF BOX_SHAPE Shape {
      appearance PBRAppearance {
        baseColorMap ImageTexture {
          url [
            "webots://projects/objects/factory/containers/protos/textures/wooden_box_base_color.jpg"
          ]
        }
        roughnessMap ImageTexture {
          url [
            "webots://projects/objects/factory/containers/protos/textures/wooden_box_roughness.jpg"
          ]
        }
        metalness 0
        normalMap ImageTexture {
          url [
            "webots://projects/objects/factory/containers/protos/textures/wooden_box_normal.jpg"
          ]
        }
        occlusionMap ImageTexture {
          url [
            "webots://projects/objects/factory/containers/protos/textures/wooden_box_occlusion.jpg"
          ]
        }
      }
      geometry Box {
        size %<= size.x >% %<= size.y >% %<= size.z >%
      }
    }
  ]
  name IS name
  model "wooden box"
  immersionProperties IS immersionProperties
  boundingObject USE BOX_SHAPE
  %< if (mass > 0) { >%
  physics Physics {
    density -1
    mass %<= mass>%
  }
  %< } >%
  locked IS locked
}
}
