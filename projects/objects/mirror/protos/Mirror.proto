#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A simple mirror made of a display attached to a camera.
# The reflected image does not depend on the viewpoint position.
# template language: javascript

PROTO Mirror [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "mirror"
  field SFString   controller      "mirror"          # Defines the controller of the mirror. This controller should simply enable the camera and attach it to the display.
  field SFBool     supervisor      FALSE             # Is `Robot.supervisor`.
  field SFFloat    fieldOfView     0.785398          # Defines the field of view of the mirror camera.
  field SFFloat    width           0.5               # Defines the width of the mirror.
  field SFFloat    height          0.8               # Defines the height of the mirror.
  field SFFloat    frameThickness  0.02              # Defines the thickness of the mirror frame.
  field SFNode     physics         NULL              # Is `Solid.physics`.
  field SFNode     frameAppearance VarnishedPine {}  # Defines the appearance of the mirror frame.

  # Deprecated in Webots R2019a
  hiddenField MFString   frameTexture    ["webots://projects/default/worlds/textures/wood.jpg"]
]
{
  %<
    let fieldOfView = fields.fieldOfView.value;
    if (fieldOfView <= 0.0) {
      fieldOfView = fields.fieldOfView.defaultValue;
      console.error('\'fieldOfView\' must be strictly positive. Value reset to ' + fieldOfView + '.');
    }
    if (fieldOfView > Math.PI) {
      fieldOfView = fields.fieldOfView.defaultValue;
      console.error('\'fieldOfView\' should not be bigger than pi. Value reset to ' + fieldOfView + '.');
    }

    let width = fields.width.value;
    if (width <= 0.0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be strictly positive. Value reset to ' + width + '.');
    }
    let height = fields.height.value;
    if (height <= 0.0) {
      height = fields.height.defaultValue;
      console.error('\'height\' must be strictly positive. Value reset to ' + height + '.');
    }
    let frameThickness = fields.frameThickness.value;
    if (frameThickness <= 0.0) {
      frameThickness = fields.frameThickness.defaultValue;
      console.error('\'frameThickness\' must be strictly positive. Value reset to ' + frameThickness + '.');
    }

    let frameTexture = fields.frameTexture.value[0];
    if (frameTexture !== fields.frameTexture.defaultValue[0])
      console.error('The \'frameTexture\' field is deprecated, using the new \'frameAppearance\' field instead.');

    const cameraWidth = 256;
    const cameraHeight = Math.ceil(256 * height / width);
  >%
  Robot {
    translation IS translation
    rotation IS rotation
    controller IS controller
    supervisor IS supervisor
    children [
      %< const camera_distance = (width * 0.5) / Math.tan(fieldOfView * 0.5); >%
      Camera {
        translation 0 %<= height * 0.5 + frameThickness >% %<= -camera_distance >%
        rotation 0.5773509358554485 0.5773509358554485 0.5773489358556708 -2.094395307179586
        fieldOfView IS fieldOfView
        width %<= cameraWidth >%
        height %<= cameraHeight >%
        near %<= (1 + 0.0001 * Math.max(width, height)) * camera_distance >%
        antiAliasing TRUE
      }
      DEF FRONT Display {
        translation 0 %<= height * 0.5 + frameThickness >% 0
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap ImageTexture {
               filtering 0
              }
              textureTransform TextureTransform {
                scale -1 1
              }
              metalness 0
              roughness 1
            }
            geometry Plane {
              size %<= width >% %<= height >%
            }
          }
        ]
        width %<= cameraWidth >%
        height %<= cameraHeight >%
      }
      DEF BACK Transform {
        translation 0 %<= height * 0.5 + frameThickness >% 0
        rotation 0 1 0 -3.14159
        children [
          Shape {
            appearance PBRAppearance {
              metalness 0
              baseColor 0.6 0.6 0.6
              roughness 0.8
            }
            geometry Plane {
              size %<= width >% %<= height >%
            }
          }
        ]
      }
      DEF UPPER_FRAME Transform {
        translation 0 %<= height + 1.5 * frameThickness >% 0
        children [
          Shape {
            appearance IS frameAppearance
            geometry Box {
              size %<= width >% %<= frameThickness >% %<= frameThickness >%
            }
          }
        ]
      }
      DEF LOWER_FRAME Transform {
        translation 0 %<= frameThickness * 0.5 >% 0
        children [
          Shape {
            appearance IS frameAppearance
            geometry Box {
              size %<= width >% %<= frameThickness >% %<= frameThickness >%
            }
          }
        ]
      }
      DEF RIGHT_FRAME Transform {
        translation %<= 0.5 * (width + frameThickness) >% %<= height * 0.5 + frameThickness >% 0
        children [
          Shape {
            appearance IS frameAppearance
            geometry Box {
              size %<= frameThickness >% %<= height + 2 * frameThickness >% %<= frameThickness >%
            }
          }
        ]
      }
      DEF LEFT_FRAME Transform {
        translation %<= - 0.5 * (width + frameThickness) >% %<= height * 0.5 + frameThickness >% 0
        children [
          Shape {
            appearance IS frameAppearance
            geometry Box {
              size %<= frameThickness >% %<= height + 2 * frameThickness >% %<= frameThickness >%
            }
          }
        ]
      }
    ]
    name IS name
    model "mirror"
    boundingObject Transform {
      translation 0 %<= height * 0.5 + frameThickness >% 0
      children [
        Box {
          size %<= width + 2 * frameThickness >% %<= height + 2 * frameThickness >% %<= frameThickness >%
        }
      ]
    }
    physics IS physics
  }
}
