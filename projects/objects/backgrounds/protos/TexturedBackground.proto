#VRML_SIM R2021a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# TexturedBackground provides a set of background textures, and applies them to the background skybox and to the reflections on the 3D objects.
# It is designed to be used together with the TexturedBackgroundLight PROTO.
#
# Supported values for the `texture` field:
#
# - dusk
# - empty_office
# - entrance_hall
# - factory
# - mars
# - noon_building_overcast
# - noon_cloudy_countryside
# - noon_park_empty
# - mountains
# - stadium
#
# Deprecated backgrounds:
#
# - dawn_cloudy_empty
# - morning_cloudy_empty
# - noon_cloudy_empty
# - noon_cloudy_mountains
# - noon_stormy_empty
# - noon_sunny_empty
# - noon_sunny_garden
# - twilight_cloudy_empty

PROTO TexturedBackground [
  field SFString{"dawn_cloudy_empty", "dusk", "empty_office", "entrance_hall", "factory", "mars", "morning_cloudy_empty", "mountains", "noon_building_overcast", "noon_cloudy_countryside", "noon_cloudy_empty", "noon_cloudy_mountains", "noon_park_empty", "noon_stormy_empty", "noon_sunny_empty", "noon_sunny_garden", "stadium", "twilight_cloudy_empty"}
                 texture      "mountains"  # Defines the texture of the background.
  field SFFloat  luminosity   1            # Is `Background.luminosity`.
  field SFBool   skybox       TRUE         # Specifies if the `texture` field is used to define the skybox shown in the scene background.
  field SFBool   reflections  TRUE         # Specifies if the `texture` field is used in the reflections of the PBRAppearance nodes.
  field MFColor  skyColor     [0 0 0]      # Defines the background color in case the `skybox` field is `FALSE`.
]
{
  %{
    local hdrBackgrounds = {
      "dusk",
      "empty_office",
      "entrance_hall",
      "factory",
      "mars",
      "noon_building_overcast",
      "noon_cloudy_countryside",
      "noon_park_empty",
      "mountains",
      "stadium"
    }

    local texture = fields.texture.value

    local isHDR = false
    for _,v in pairs(hdrBackgrounds) do
      if texture == v then
        isHDR = true
        break
      end
    end

    local extension = isHDR and "png" or "jpg"
    local path = "textures/cubic"

    if not isHDR then
      io.stderr:write("Non-HDR backgrounds are deprecated. Please select one of the following 'TexturedBackground.texture': ")
      for _,v in pairs(hdrBackgrounds) do
        if v ~= hdrBackgrounds[1] then
          io.stderr:write(", ")
        end
        io.stderr:write("'" .. v .. "'")
      end
      io.stderr:write("\n")
    end
  }%
  Background {
    skyColor IS skyColor
    %{ if fields.skybox.value then }%
      backUrl [
        %{= "\"" .. path .. "/" .. texture .. "_back." .. extension .. "\"" }%
      ]
      bottomUrl [
        %{= "\"" .. path .. "/" .. texture .. "_bottom." .. extension .. "\"" }%
      ]
      frontUrl [
        %{= "\"" .. path .. "/" .. texture .. "_front." .. extension .. "\"" }%
      ]
      leftUrl [
        %{= "\"" .. path .. "/" .. texture .. "_left." .. extension .. "\"" }%
      ]
      rightUrl [
        %{= "\"" .. path .. "/" .. texture .. "_right." .. extension .. "\"" }%
      ]
      topUrl [
        %{= "\"" .. path .. "/" .. texture .. "_top." .. extension .. "\"" }%
      ]
    %{ end }%
    %{ if isHDR and fields.reflections.value then }%
      backIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_back.hdr\"" }%
      ]
      bottomIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_bottom.hdr\"" }%
      ]
      frontIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_front.hdr\"" }%
      ]
      leftIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_left.hdr\"" }%
      ]
      rightIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_right.hdr\"" }%
      ]
      topIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_top.hdr\"" }%
      ]
    %{ end }%
    luminosity IS luminosity
  }
}
