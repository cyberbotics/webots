#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: nonDeterministic
# Efficient (with only 8 polygones) and customizable outdoor tree.
# Tree types are:
#  - 'oak tree'
#  - 'crab apple tree'
#  - 'cherry tree'
#  - 'birch tree'
#  - 'palm tree'
#  - 'spruce'
#  - 'white pine'
#  - 'hackberry tree'
#  - 'hazel tree'
#
# The 'random' type choose randomly a tree type each time the node is regenerated.
# template language: javascript

PROTO SimpleTree [
  field SFVec3f    translation          0 0 0
  field SFRotation rotation             0 0 1 0
  field SFString   name                 "tree"          # Defines the name of the tree.
  field SFString{"random", "oak tree", "crab apple tree", "cherry tree", "birch tree", "palm tree", "spruce", "white pine", "hackberry tree", "hazel tree"}
                   type                 "cherry tree"   # Defines the texture to be used. If set to `random`, a type will be randomly selected in the list.
  field SFBool     withSnow             FALSE           # Defines if the texture used should have snow on top.
  field SFFloat    height               4               # Defines the height of the tree.
  field SFFloat    radius               2               # Defines the radius of the tree.
  field SFInt32    subdivision          2               # Defines the number of faces used to represent the tree.
  field SFBool     enableBoundingObject TRUE            # Defines if the tree should have a bounding object (the bounding object is made of a simple cylinder).
  field SFBool     locked               TRUE            # Is `Solid.locked`.
  field SFBool     isPickable           TRUE
]
{
%<
  import * as wbgeometry from 'wbgeometry.js';
  import * as wbrandom from 'wbrandom.js';
  wbrandom.seed(context.id)

  const treeType = {
    'crab apple tree': 'crab_apple_tree.png',
    'hackberry tree': 'hackberry_tree.png',
    'hazel tree': 'hazel_tree.png',
    'oak tree': 'oak_tree.png',
    'palm tree': 'palm_tree.png',
    'spruce': 'spruce.png',
    'white pine': 'white_pine.png',
    'cherry tree': 'cherry_tree.png',
    'birch tree': 'birch_tree.png'
  };

  let height = fields.height.value;
  if (height <= 0) {
    height = fields.height.defaultValue;
    console.error('\'height\' must be strictly positive. Value reset to ' + height + '.');
  }

  let radius = fields.radius.value;
  if (radius <= 0) {
    radius = fields.radius.defaultValue;
    console.error('\'radius\' must be strictly positive. Value reset to ' + radius + '.');
  }

  let subdivision = fields.subdivision.value;
  if (subdivision < 2) {
    subdivision = fields.subdivision.defaultValue;
    console.error('\'subdivision\' must be bigger or equal to 2. Value reset to ' + subdivision + '.');
  }

  let type = fields.type.value;
  const keys = Object.keys(treeType);
  if (type !== 'random' && !treeType.hasOwnProperty(type)) {
    type = fields.type.defaultValue;

    let candidates = '';
    for (let i = 0; i < keys.length; ++i)
      candidates += '\'' + keys[i] + '\', ';
    candidates += 'or \'random\'';
    console.error('\'type\' must be a value in the list: ' + candidates + '. Value reset to \'' + type + '\'.');
  } else if (type === 'random')
    type = keys[wbrandom.integer(keys.length) - 1];

  const boundingObject = fields.enableBoundingObject.value;
  const circle = wbgeometry.circle(radius, subdivision * 2, {x: 0, y: 0}, 0);
  const skip = subdivision * 2;
>%
Solid {
  translation IS translation
  rotation IS rotation
  children [
    Shape {
      appearance PBRAppearance {
        baseColorMap ImageTexture {
          url [
          %< if (fields.withSnow.value) { >%
            %<= '"' + "webots://projects/objects/trees/protos/textures/" + treeType[type].slice(0, treeType[type].length - 4) + "_with_snow" + treeType[type].slice(treeType[type].length - 4) + '"' >%
          %< } else { >%
            %<= '"' + "webots://projects/objects/trees/protos/textures/" + treeType[type] + '"' >%
          %< } >%
          ]
          repeatS FALSE
          repeatT FALSE
        }
        metalness 0
        roughness 1
      }
      geometry IndexedFaceSet {
        coord Coordinate {
          point [
            # bottom cylinder
            %< for (let i = 0; i <= skip - 1; ++i) { >%
              %<= circle[i].x >% %<= circle[i].y >% %<= 0 >%
            %< } >%
            
            # top cylinder
            %< for (let i = 0; i <= skip - 1; ++i) { >%
              %<= circle[i].x >% %<= circle[i].y >% %<= height >%
            %< } >%
          ]
        }
        texCoord TextureCoordinate {
          point [
            0 0
            1 0
            0 1
            1 1
          ]
        }
        coordIndex [
          # each face
          %< for (let i = 0; i <= subdivision - 1; ++i) { >%
            %<= subdivision * 2 + i >% %<= i >% %<= subdivision + i >% %<= subdivision * 3 + i >% -1
            %<= subdivision * 2 + i >% %<= subdivision * 3 + i >% %<= subdivision + i >% %<= i >%  -1
          %< } >%
        ]
        texCoordIndex [
          %< for (let i = 0; i <= subdivision - 1; ++i) { >%
            2, 0, 1, 3, -1, 3, 2, 0, 1, -1,
          %< } >%
        ]
      }
      isPickable IS isPickable
    }
  ]
  name IS name
  model %<= '"' + type + '"' >%
  recognitionColors [
    %< if (fields.withSnow.value) { >%
      0.82 0.82 0.84
    %< } else { >%
      %< if (type === 'crab apple tree') { >%
        0.85 0.49 0.57
      %< } else { >%
        0.1 0.4 0
      %< } >%
    %< } >%
  ]
  %< if (boundingObject) { >%
    boundingObject Transform {
      translation 0 0 %<= height * 0.5 >% 
      children [
        Cylinder {
          height %<= height >%
          radius 0.1
        }
      ]
    }
  %< } >%
  locked IS locked
}
}
