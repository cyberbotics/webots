#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Generic gear generator, inspired by Brian Paul's glxgears demo.
# template language: javascript

PROTO Gear [
  field SFVec3f         translation            0 0 0
  field SFRotation      rotation               0 0 1 0
  field SFNode          appearance             PBRAppearance{baseColor 0.533333, 0.541176, 0.521569, roughness 0.5}
  field SFString        name                   "gear"     # Defines the solid's name.
  field SFInt32         teeth                  8          # Defines number of teeth, [8, inf).
  field SFFloat         width                  0.01       # Defines gear thickness, (0, inf).
  field SFFloat         innerRadius            0.01       # Defines the radius of the center hole.
  field SFFloat         pitchRadius            0.04       # Defines the radius at center of the teeth.
  field SFFloat         toothDepth             0.01       # Defines depth of tooth.
  field SFFloat         density                0.001      # Defines the density of the gear. If zero, physics is disabled.
  field SFBool          bodyBoundingObject     TRUE       # Enables gear body collision area (cylinder).
  field SFBool          teethBoundingObject    FALSE      # Enables a boundingObject on each tooth.
]
{
  %<
    // parameter retrieval;
    let width = fields.width.value;
    let nbTeeth = fields.teeth.value;
    let innerRadius = fields.innerRadius.value;
    let pitchRadius = fields.pitchRadius.value;
    let toothDepth = fields.toothDepth.value;
    let density = fields.density.value;
    let bodyBoundingObject = fields.bodyBoundingObject.value;
    let teethBoundingObject = fields.teethBoundingObject.value;
    // parameter sanity check
    if (nbTeeth < 8) {
      nbTeeth = fields.teeth.defaultValue;
      console.error('\'teeth\' value must be greater than 8. Value reset to ' + nbTeeth + '.');
    }

    if (width <= 0.0) {
      width = fields.width.defaultValue;
      console.error('\'width\' must be strictly positive. Value reset to ' + width + '.');
    }
    let halfWidth = width * 0.5;

    if (density < 0) {
      density = fields.density.defaultValue;
      console.error('\'density\' must be zero or positive. Value reset to ' + density + '.');
    }

    if (innerRadius < 0) {
      innerRadius = fields.innerRadius.defaultValue;
      console.error('\innerRadius\' must be zero or positive. Value reset to ' + innerRadius + '.');
    }

    if (innerRadius >= pitchRadius || pitchRadius <= innerRadius) {
      innerRadius = fields.innerRadius.defaultValue;
      pitchRadius = fields.pitchRadius.defaultValue;
      console.error('\'innerRadius\' value must be smaller than \'pitchRadius\'. Values reset repectively to ' + innerRadius + ' and ' + pitchRadius + '.');
    }

    if (toothDepth >= pitchRadius) {
      toothDepth = fields.toothDepth.defaultValue;
      pitchRadius = fields.pitchRadius.defaultValue;
      console.error('\'toothDepth\' value must be smaller than \'pitchRadius\'. Values reset repectively to ' + toothDepth + ' and ' + pitchRadius + '.');
    } else if (toothDepth <= 0) {
      toothDepth = fields.toothDepth.defaultValue;
      console.error('\'toothDepth\' value must be strictly positive. Value reset to ' + toothDepth + '.');
    }

    // define vertices of the repeatable unit
    const r0 = innerRadius;
    const r1 = pitchRadius - toothDepth * 0.5;
    const r2 = pitchRadius + toothDepth * 0.5;
    const da = (2.0 * Math.PI / nbTeeth) / 4.0;

    const p0 = {x: r0, y: 0};
    const p1 = {x: r1, y: 0};
    const p2 = {x: r2 * Math.cos(0 + da), y: r2 * Math.sin(0 + da)};
    const p3 = {x: r2 * Math.cos(0 + 2*da), y: r2 * Math.sin(0 + 2*da)};
    const p4 = {x: r1 * Math.cos(0 + 3*da), y: r1 * Math.sin(0 + 3*da)};
    const p5 = {x: r1 * Math.cos(2.0 * Math.PI / nbTeeth), y: r1 * Math.sin(2.0 * Math.PI / nbTeeth)};
    const p6 = {x: r0 * Math.cos(2.0 * Math.PI / nbTeeth), y: r0 * Math.sin(2.0 * Math.PI / nbTeeth)};
    const tip_size = Math.sqrt((p3.x - p2.x) * (p3.x - p2.x) + (p3.y - p2.y) * (p3.y - p2.y));
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    name IS name
    children [
      Shape {
        appearance IS appearance
        geometry IndexedFaceSet {
            coord Coordinate {
              point [
                %<
                  let alpha, cosAlpha, sinAlpha;
                  for (let n = 0; n <= nbTeeth - 1; ++n) {
                    alpha = n * 2.0 * Math.PI / nbTeeth;
                    cosAlpha = Math.cos(alpha);
                    sinAlpha = Math.sin(alpha);
                >%
                  # top face
                  %<= halfWidth >% %<= p6.x * cosAlpha - p6.y * sinAlpha >% %<= p6.x * sinAlpha + p6.y * cosAlpha >% # 13
                  %<= halfWidth >% %<= p5.x * cosAlpha - p5.y * sinAlpha >% %<= p5.x * sinAlpha + p5.y * cosAlpha >% # 12
                  %<= halfWidth >% %<= p4.x * cosAlpha - p4.y * sinAlpha >% %<= p4.x * sinAlpha + p4.y * cosAlpha >% # 11
                  %<= halfWidth >% %<= p3.x * cosAlpha - p3.y * sinAlpha >% %<= p3.x * sinAlpha + p3.y * cosAlpha >% # 10
                  %<= halfWidth >% %<= p2.x * cosAlpha - p2.y * sinAlpha >% %<= p2.x * sinAlpha + p2.y * cosAlpha >% # 9
                  %<= halfWidth >% %<= p1.x * cosAlpha - p1.y * sinAlpha >% %<= p1.x * sinAlpha + p1.y * cosAlpha >% # 8
                  %<= halfWidth >% %<= p0.x * cosAlpha - p0.y * sinAlpha >% %<= p0.x * sinAlpha + p0.y * cosAlpha >% # 7
                  # base face
                  %<= -halfWidth >% %<= p6.x * cosAlpha - p6.y * sinAlpha >% %<= p6.x * sinAlpha + p6.y * cosAlpha >% # 6
                  %<= -halfWidth >% %<= p5.x * cosAlpha - p5.y * sinAlpha >% %<= p5.x * sinAlpha + p5.y * cosAlpha >% # 5
                  %<= -halfWidth >% %<= p4.x * cosAlpha - p4.y * sinAlpha >% %<= p4.x * sinAlpha + p4.y * cosAlpha >% # 4
                  %<= -halfWidth >% %<= p3.x * cosAlpha - p3.y * sinAlpha >% %<= p3.x * sinAlpha + p3.y * cosAlpha >% # 3
                  %<= -halfWidth >% %<= p2.x * cosAlpha - p2.y * sinAlpha >% %<= p2.x * sinAlpha + p2.y * cosAlpha >% # 2
                  %<= -halfWidth >% %<= p1.x * cosAlpha - p1.y * sinAlpha >% %<= p1.x * sinAlpha + p1.y * cosAlpha >% # 1
                  %<= -halfWidth >% %<= p0.x * cosAlpha - p0.y * sinAlpha >% %<= p0.x * sinAlpha + p0.y * cosAlpha >% # 0
                %< } >%
              ]
            }
            coordIndex [
              %< for (let n = 0; n <= nbTeeth - 1; ++n) { >%
                # base face
                %<= n*14 + 0 >%, %<= n*14 + 2 >%, %<= n*14 + 1 >%, -1,
                %<= n*14 + 0 >%, %<= n*14 + 3 >%, %<= n*14 + 2 >%, -1,
                %<= n*14 + 0 >%, %<= n*14 + 4 >%, %<= n*14 + 3 >%, -1,
                %<= n*14 + 0 >%, %<= n*14 + 5 >%, %<= n*14 + 4 >%, -1,
                %<= n*14 + 0 >%, %<= n*14 + 6 >%, %<= n*14 + 5 >%, -1,
                # top face
                %<= n*14 + 7 >%, %<= n*14 + 8 >%, %<= n*14 + 9 >%, -1,
                %<= n*14 + 7 >%, %<= n*14 + 9 >%, %<= n*14 + 10 >%, -1,
                %<= n*14 + 7 >%, %<= n*14 + 10 >%, %<= n*14 + 11 >%, -1,
                %<= n*14 + 7 >%, %<= n*14 + 11 >%, %<= n*14 + 12 >%, -1,
                %<= n*14 + 7 >%, %<= n*14 + 12 >%, %<= n*14 + 13 >%, -1,
                # inner face shape
                %<= n*14 + 0 >%, %<= n*14 + 7 >%, %<= n*14 + 13 >%, -1,
                %<= n*14 + 0 >%, %<= n*14 + 13 >%, %<= n*14 + 6 >%, -1,
                # outer face face
                %<= n*14 + 1 >%, %<= n*14 + 2 >%, %<= n*14 + 9 >%, -1,
                %<= n*14 + 1 >%, %<= n*14 + 9 >%, %<= n*14 + 8 >%, -1,
                %<= n*14 + 2 >%, %<= n*14 + 3 >%, %<= n*14 + 10 >%, -1,
                %<= n*14 + 2 >%, %<= n*14 + 10 >%, %<= n*14 + 9 >%, -1,
                %<= n*14 + 3 >%, %<= n*14 + 4 >%, %<= n*14 + 11 >%, -1,
                %<= n*14 + 3 >%, %<= n*14 + 11 >%, %<= n*14 + 10 >%, -1,
                %<= n*14 + 4 >%, %<= n*14 + 5 >%, %<= n*14 + 12 >%, -1,
                %<= n*14 + 4 >%, %<= n*14 + 12 >%, %<= n*14 + 11 >%, -1,
              %< } >%
            ]
          }
        }
    ]
    # boundingObject
    %< if (bodyBoundingObject || teethBoundingObject) { >%
      boundingObject Group {
        children [
          # cylinder encompassing the gear
          %< if (bodyBoundingObject) { >%
            Transform {
              rotation 0 1 0 -1.570797
              children [
                Shape {
                  geometry Cylinder {
                    radius %<= r2 >%
                    height %<= width >%
                  }
                }
              ]
            }
          %< } >%
          # spherical contact point on each tooth
          %< if (teethBoundingObject) { >%
            %< for (let n = 0; n <= nbTeeth - 1; ++n) { >%
              %< alpha = n * 2.0 * Math.PI / nbTeeth; >%
              %< if (tip_size > width) { >%
                Transform {
                  translation 0 %<= (r2-tip_size*0.5)*Math.cos(alpha + 1.5*da) >% %<= (r2-tip_size*0.5)*Math.sin(alpha + 1.5*da) >%
                  children [
                    Shape {
                      geometry Sphere {
                        radius %<= tip_size*0.5*1.4 >% # by default, make it 40% bigger
                      }
                    }
                  ]
                }
              %< } else { >%
                Transform {
                  translation 0 %<= (r2-tip_size*0.5)*Math.cos(alpha + 1.5*da) >% %<= (r2-tip_size*0.5)*Math.sin(alpha + 1.5*da) >%
                  rotation -0.57735 -0.57735 0.57735 2.094395
                  children [
                    Shape {
                      geometry Capsule {
                        radius %<= tip_size*0.5*1.4 >% # by default, make it 40% bigger
                        height %<= width - tip_size >%
                      }
                    }
                  ]
                }
              %< } >%
            %< } >%
          %< } >%
        ]
      }
    %< } >%
    # physics
    %< if (density > 0.0) { >%
    physics Physics {
      density IS density
    }
    %< } >%
  }
}
