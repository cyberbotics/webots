#VRML_SIM R2021a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# Generic extrusion geometry.
# The shape (defined by the 'crossSection' field) is extruded along the path defined by the field 'spine'.

PROTO Extrusion [
  field MFVec2f    crossSection              [1 1, 1 -1, -1 -1, -1 1, 1 1]   # Defines the 2D cross-section of the extrusion.
  field MFVec3f    spine                     [0 0 0, 0 1 0]                  # Defines the 3D extrusion path.
  field MFVec2f    scale                     [1.0 1.0]                       # Defines the scale at each point of the spine.
  field MFRotation orientation               [0 0 1 0]                       # Defines the orientation of the cross-section at each point of the spine.
  field SFBool     beginCap                  TRUE                            # Defines whether the extrusion should have a cap at the begining.
  field SFBool     endCap                    TRUE                            # Defines whether the extrusion should have a cap at the end.
  field SFBool     ccw                       TRUE                            # Is `IndexedFaceSet.ccw`.
  field SFBool     solid                     TRUE                            # Is `IndexedFaceSet.solid`.
  field SFBool     convex                    TRUE                            # Is `IndexedFaceSet.convex`.
  field SFFloat    creaseAngle               0.0                             # Is `IndexedFaceSet.creaseAngle`.
  field SFInt32    splineSubdivision         4                               # If bigger than 1, defines the B-Spline subdivion of the extrusion along it's path.
]
{
  %{
    local wbcore     = require('wbcore')
    local wbgeometry = require('wbgeometry')
    local wbvector2  = require('wbvector2')
    local wbvector3  = require('wbvector3')
    local wbrotation = require('wbrotation')

    -- fields checks
    local crossSection = fields.crossSection.value
    local nbCrossSectionPoint = wbcore.tablelength(crossSection)

    local spine = fields.spine.value
    local nbSpinePoints = wbcore.tablelength(spine)

    local orientation = fields.orientation.value
    local nbOrientation = wbcore.tablelength(orientation)

    -- check and complement the scale array
    local scale = fields.scale.value
    local nbScale = wbcore.tablelength(scale)
    if nbScale == 0 then
      for i = 1, nbSpinePoints do
        scale[i] = {x=1.0, y=1.0}
      end
    elseif nbScale < nbSpinePoints then
      for i = nbScale + 1, nbSpinePoints do
        scale[i] = scale[i - 1]
      end
    end
    local nbScale = wbcore.tablelength(scale)

    local splineSubdivision = fields.splineSubdivision.value
    -- use B-Spline interpolation if splineSubdivision is greater than 1
    if splineSubdivision > 0 then
      spine = wbgeometry.bspline3D(spine, splineSubdivision)
    end
    nbSpinePoints = wbcore.tablelength(spine)

    -- recompute scale array after subdivision (if any)
    if splineSubdivision > 1 then
      local scaleOriginal = {}
      for i = 1, nbScale do
        scaleOriginal[i] = scale[i]
      end
      scaleOriginal[nbScale+1] = scaleOriginal[nbScale]

      for j = 1, nbSpinePoints do
        local ratio = ((j - 1) % splineSubdivision) / splineSubdivision
        local index = math.floor((j-1) / splineSubdivision + 1)
        scale[j] = {}
        scale[j].x = scaleOriginal[index].x * (1 - ratio) + scaleOriginal[index+1].x * ratio
        scale[j].y = scaleOriginal[index].y * (1 - ratio) + scaleOriginal[index+1].y * ratio
      end
    end

    -- recompute orientation array after subdivision (if any)
    if splineSubdivision > 1 then
      local orientationOriginal = {}
      for i = 1, nbOrientation do
        orientationOriginal[i] = orientation[i]
      end
      orientationOriginal[nbOrientation+1] = { x=0, y=1, z=0, a=0 }
      orientationOriginal[nbOrientation+2] = { x=0, y=1, z=0, a=0 }

      for j = 1, (nbOrientation + 0) * splineSubdivision do
        local ratio = ((j - 1) % splineSubdivision) / splineSubdivision
        local index = math.floor((j-1) / splineSubdivision + 1)
        orientation[j] = {}
        orientation[j].x = orientationOriginal[index].x * (1 - ratio) + orientationOriginal[index+1].x * ratio
        orientation[j].y = orientationOriginal[index].y * (1 - ratio) + orientationOriginal[index+1].y * ratio
        orientation[j].z = orientationOriginal[index].z * (1 - ratio) + orientationOriginal[index+1].z * ratio
        orientation[j].a = orientationOriginal[index].a * (1 - ratio) + orientationOriginal[index+1].a * ratio
      end
    end

    -- compute the X, Y and Z axes at each spine point (Y = tangent)
    local X = {}
    local Y = {}
    local Z = {}
    for i = 1, nbSpinePoints do
      X[i] = {x = 0, y = 0, z = 0}
      Y[i] = {x = 0, y = 0, z = 0}
      Z[i] = {x = 0, y = 0, z = 0}
      if i == 1 or i == nbSpinePoints then
        if wbvector3.equal(spine[1], spine[nbSpinePoints]) then
          Y[i].x = spine[2].x - spine[nbSpinePoints-1].x
          Y[i].y = spine[2].y - spine[nbSpinePoints-1].y
          Y[i].z = spine[2].z - spine[nbSpinePoints-1].z
          Z[i] = wbvector3.cross(wbvector3.minus(spine[2], spine[1]), wbvector3.minus(spine[nbSpinePoints-1], spine[1]))
        elseif i == 1 then
          Y[i].x = spine[2].x - spine[1].x
          Y[i].y = spine[2].y - spine[1].y
          Y[i].z = spine[2].z - spine[1].z
          if nbSpinePoints > 2 then
            Z[i] = wbvector3.cross(wbvector3.minus(spine[3], spine[2]), wbvector3.minus(spine[1], spine[2]))
          end
          if Z[i].x == 0 and Z[i].y == 0 and Z[i].z == 0 then
            local vector = wbvector3.minus(spine[1], spine[2])
            -- find an arbitrary perpendicular vector
            local x = -1
            local y = 0
            local z = 1
            if vector.z ~= 0 then
              z = vector.x / vector.z
            elseif vector.x ~= 0 then
              x = vector.z / vector.x
            elseif vector.y ~= 0 then
              y = vector.z / vector.y
              x = 0
              z = 1
            end
            Z[i] = wbvector3.cross({x = x, y = y, z = z}, vector)
          end
          if Z[i].x == 0 and Z[i].y == 0 and Z[i].z == 0 then
            Z[i].x = 0
            Z[i].y = 0
            Z[i].z = 1
            print "Warning: orientation of the crossSection at the first spine point is undefined."
          end
          -- make sure to always select the clockwise version of the perpendicular
          if Z[i].x > 0 or Z[i].y > 0 or Z[i].z > 0 then
            Z[i].x = -Z[i].x
            Z[i].y = -Z[i].y
            Z[i].z = -Z[i].z
          end
        else
          Y[i].x = spine[nbSpinePoints].x - spine[nbSpinePoints-1].x
          Y[i].y = spine[nbSpinePoints].y - spine[nbSpinePoints-1].y
          Y[i].z = spine[nbSpinePoints].z - spine[nbSpinePoints-1].z
          Z[i] = Z[i-1]
        end
      else
        Y[i].x = spine[i+1].x - spine[i-1].x
        Y[i].y = spine[i+1].y - spine[i-1].y
        Y[i].z = spine[i+1].z - spine[i-1].z
        Z[i] = wbvector3.cross(wbvector3.minus(spine[i+1], spine[i]), wbvector3.minus(spine[i-1], spine[i]))
        if Z[i].x == 0 and Z[i].y == 0 and Z[i].z == 0 then
          Z[i].x = Z[i-1].x
          Z[i].y = Z[i-1].y
          Z[i].z = Z[i-1].z
        end
      end
      if i ~= 1 then
        if wbvector3.dot(Z[i], Z[i-1]) < 0 then
          Z[i] = wbvector3.multiply(Z[i], -1)
        end
      end
      X[i] = wbvector3.cross(Y[i], Z[i])
      -- normalize axes
      if wbvector3.norm(X[i]) ~= 0 then
        X[i] = wbvector3.normalize(X[i])
      end
      if wbvector3.norm(Y[i]) ~= 0 then
        Y[i] = wbvector3.normalize(Y[i])
      end
      if wbvector3.norm(Z[i]) ~= 0 then
        Z[i] = wbvector3.normalize(Z[i])
      end
    end

    -- compute distances from first spine point
    spineDistance = {}
    spineDistance[1] = 0
    for i = 2, nbSpinePoints do
      spineDistance[i] = spineDistance[i-1] + wbvector3.distance(spine[i-1], spine[i])
    end

    -- compute distances from first cross-section point
    crossSectionDistance = {}
    crossSectionDistance[1] = 0
    for i = 2, nbCrossSectionPoint do
      crossSectionDistance[i] = crossSectionDistance[i-1] + wbvector2.distance(crossSection[i-1], crossSection[i])
    end
  }%
  IndexedFaceSet {
    coord Coordinate {
      point [
        %{ for i = 0, nbSpinePoints - 1 do }%
          %{ for j = 0, nbCrossSectionPoint - 1 do }%
            %{
              local point = wbvector3.add(wbvector3.multiply(X[i+1], crossSection[j+1].x * scale[i+1].x), (wbvector3.multiply(Z[i+1], -crossSection[j+1].y * scale[i+1].y)))
              if orientation[i+1] then
                point = wbrotation.rotatevector3byrotation(orientation[i+1], point)
              end
              local x = point.x
              local y = point.y
              local z = point.z
            }%
            %{= x + spine[i+1].x }% %{= y + spine[i+1].y }% %{= z + spine[i+1].z }%
          %{ end }%
        %{ end }%
      ]
    }
    texCoord TextureCoordinate {
      point [
        %{ for i = 1, nbSpinePoints do }%
          %{ for j = 1, nbCrossSectionPoint do }%
            %{= spineDistance[i] / spineDistance[nbSpinePoints] }% %{= crossSectionDistance[j] / crossSectionDistance[nbCrossSectionPoint] }%
          %{ end }%
        %{ end }%
        # Begin-End
        %{ for j = 1, nbCrossSectionPoint do }%
          %{= crossSection[j].x + 0.5 }% %{= crossSection[j].y + 0.5 }%
        %{ end }%
      ]
    }
    coordIndex [
      # Begin
      %{ if fields.beginCap.value then }%
        %{ for j = 0, nbCrossSectionPoint - 2 do }%
          %{= j }%
        %{ end }%
        -1
      %{ end }%
      # Sides
      %{ for j = 0, nbCrossSectionPoint - 2 do }%
        %{ for i = 0, nbSpinePoints - 2 do }%
          %{= j + i * nbCrossSectionPoint }% %{= j + (i + 1) * nbCrossSectionPoint }% %{= j + 1 + (i + 1) * nbCrossSectionPoint }% %{= j + 1 + i * nbCrossSectionPoint }% -1
        %{ end }%
      %{ end }%
      # End
      %{ if fields.endCap.value then }%
        %{ for j = 0, nbCrossSectionPoint - 2 do }%
          %{= nbSpinePoints * nbCrossSectionPoint - j - 1 }%
        %{ end }%
        -1
      %{ end }%
    ]
    texCoordIndex [
      # Begin
      %{ if fields.beginCap.value then }%
        %{ for j = 0, nbCrossSectionPoint - 2 do }%
          %{= nbSpinePoints * nbCrossSectionPoint + j }%
        %{ end }%
        -1
      %{ end }%
      # Sides
      %{ for j = 0, nbCrossSectionPoint - 2 do }%
        %{ for i = 0, nbSpinePoints - 2 do }%
          %{= j + i * nbCrossSectionPoint }% %{= j + (i + 1) * nbCrossSectionPoint }% %{= j + 1 + (i + 1) * nbCrossSectionPoint }% %{= j + 1 + i * nbCrossSectionPoint }% -1
        %{ end }%
      %{ end }%
      # End
      %{ if fields.endCap.value then }%
        %{ for j = 0, nbCrossSectionPoint - 2 do }%
          %{= nbSpinePoints * nbCrossSectionPoint + j }%
        %{ end }%
        -1
      %{ end }%
    ]
    solid IS solid
    convex IS convex
    ccw IS ccw
    creaseAngle IS creaseAngle
  }
}
