#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Generic extrusion geometry.
# The shape (defined by the 'crossSection' field) is extruded along the path defined by the field 'spine'.
# template language: javascript

PROTO Extrusion [
  field MFVec2f    crossSection              [1 1, 1 -1, -1 -1, -1 1, 1 1]   # Defines the 2D cross-section of the extrusion.
  field MFVec3f    spine                     [0 0 0, 0 0 1]                  # Defines the 3D extrusion path.
  field MFVec2f    scale                     [1.0 1.0]                       # Defines the scale at each point of the spine.
  field MFRotation orientation               [0 0 1 0]                       # Defines the orientation of the cross-section at each point of the spine.
  field SFBool     beginCap                  TRUE                            # Defines whether the extrusion should have a cap at the begining.
  field SFBool     endCap                    TRUE                            # Defines whether the extrusion should have a cap at the end.
  field SFBool     ccw                       TRUE                            # Is `IndexedFaceSet.ccw`.
  field SFBool     solid                     TRUE                            # Is `IndexedFaceSet.solid`.
  field SFBool     convex                    TRUE                            # Is `IndexedFaceSet.convex`.
  field SFFloat    creaseAngle               0.0                             # Is `IndexedFaceSet.creaseAngle`.
  field SFInt32    splineSubdivision         4                               # If bigger than 1, defines the B-Spline subdivion of the extrusion along it's path.
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';
    import * as wbvector2 from 'wbvector2.js';
    import * as wbvector3 from 'wbvector3.js';
    import * as wbrotation from 'wbrotation.js';

    // fields checks
    const crossSection = fields.crossSection.value;
    const nbCrossSectionPoint = crossSection.length;

    let spine = fields.spine.value;
    let nbSpinePoints = spine.length;

    const orientation = fields.orientation.value;
    const nbOrientation = orientation.length;

    // check and complement the scale array
    let scale = fields.scale.value;
    let nbScale = scale.length;
    if (nbScale === 0) {
      for (let i = 0; i < nbSpinePoints; ++i)
        scale[i] = {x: 1.0, y: 1.0};
    } else if (nbScale < nbSpinePoints) {
      for (let i = nbScale; i < nbSpinePoints; ++i)
        scale[i] = scale[i - 1];
    }
    nbScale = scale.length;
    const splineSubdivision = fields.splineSubdivision.value;
    // use B-Spline interpolation if splineSubdivision is greater than 1
    if (splineSubdivision > 0) {
      spine = wbgeometry.bSpline3(spine, splineSubdivision);
      nbSpinePoints = spine.length;
    }

    // recompute scale array after subdivision (if any)
    if (splineSubdivision > 1) {
      let scaleOriginal = [];
      for (let i = 0; i < nbScale; ++i)
        scaleOriginal[i] = scale[i];
      scaleOriginal.push(scaleOriginal[nbScale-1]);

      scale = [];
      for (let j = 0; j < nbSpinePoints; ++j) {
        let ratio = (j % splineSubdivision) / splineSubdivision;
        let index = Math.floor(j / splineSubdivision);
        scale[j] = {x: scaleOriginal[index].x * (1 - ratio) + scaleOriginal[index+1].x * ratio,
                    y: scaleOriginal[index].y * (1 - ratio) + scaleOriginal[index+1].y * ratio};
      }
    }

    // recompute orientation array after subdivision (if any)
    if (splineSubdivision > 1) {
      let orientationOriginal = [];
      for (let i = 0; i < nbOrientation; ++i)
        orientationOriginal[i] = orientation[i];

      orientationOriginal.push({x: 0, y: 1, z: 0, a: 0});
      orientationOriginal.push({x: 0, y: 1, z: 0, a: 0});

      for (let j = 0; j < nbOrientation * splineSubdivision; ++j) {
        let ratio = (j % splineSubdivision) / splineSubdivision;
        let index = Math.floor(j / splineSubdivision);
        orientation[j] = {x: orientationOriginal[index].x * (1 - ratio) + orientationOriginal[index+1].x * ratio,
                          y: orientationOriginal[index].y * (1 - ratio) + orientationOriginal[index+1].y * ratio,
                          z: orientationOriginal[index].z * (1 - ratio) + orientationOriginal[index+1].z * ratio,
                          a: orientationOriginal[index].a * (1 - ratio) + orientationOriginal[index+1].a * ratio};
      }
    }
    // compute the X, Y and Z axes at each spine point (Z = tangent)
    let X = [];
    let Y = [];
    let Z = [];
    for (let i = 0; i < nbSpinePoints; ++i) {
      X.push({x: 0, y: 0, z: 0});
      Y.push({x: 0, y: 0, z: 0});
      Z.push({x: 0, y: 0, z: 0});
      if (i === 0 || i === nbSpinePoints - 1) {
        if (wbvector3.equal(spine[0], spine[nbSpinePoints - 1])) {
          Z[i].x = spine[1].x - spine[nbSpinePoints-2].x;
          Z[i].y = spine[1].y - spine[nbSpinePoints-2].y;
          Z[i].z = spine[1].z - spine[nbSpinePoints-2].z;
          Y[i] = wbvector3.cross(wbvector3.minus(spine[1], spine[0]), wbvector3.minus(spine[nbSpinePoints-2], spine[0]));
        } else if (i === 0) {
          Z[i].x = spine[1].x - spine[0].x;
          Z[i].y = spine[1].y - spine[0].y;
          Z[i].z = spine[1].z - spine[0].z;
          if (nbSpinePoints > 2)
            Y[i] = wbvector3.cross(wbvector3.minus(spine[2], spine[1]), wbvector3.minus(spine[0], spine[1]));

          if (Y[i].x === 0 && Y[i].y === 0 && Y[i].z === 0) {
            let vector = wbvector3.minus(spine[0], spine[1]);
            // find an arbitrary perpendicular vector
            let x = -1;
            let y = 0;
            let z = 1;
            if (vector.z !== 0)
              z = vector.x / vector.z;
            else if (vector.x !== 0)
              x = vector.z / vector.x;
            else if (vector.y !== 0) {
              y = vector.z / vector.y;
              x = 0;
              z = 1;
            }
            Y[i] = wbvector3.cross({x: x, y: y, z: z}, vector);
          }
          if (Y[i].x === 0 && Y[i].y === 0 && Y[i].z === 0) {
            Y[i].x = 0;
            Y[i].y = 0;
            Y[i].z = 1;
            console.info('Warning: orientation of the crossSection at the first spine point is undefined.');
          }
          // make sure to always select the clockwise version of the perpendicular
          if (Y[i].x > 0 || Y[i].y > 0 || Y[i].z > 0) {
            Y[i].x = -Y[i].x;
            Y[i].y = -Y[i].y;
            Y[i].z = -Y[i].z;
          }
        } else {
          Z[i].x = spine[nbSpinePoints-1].x - spine[nbSpinePoints-2].x;
          Z[i].y = spine[nbSpinePoints-1].y - spine[nbSpinePoints-2].y;
          Z[i].z = spine[nbSpinePoints-1].z - spine[nbSpinePoints-2].z;
          Y[i] = Y[i-1];
        }
      } else {
        Z[i].x = spine[i+1].x - spine[i-1].x;
        Z[i].y = spine[i+1].y - spine[i-1].y;
        Z[i].z = spine[i+1].z - spine[i-1].z;
        Y[i] = wbvector3.cross(wbvector3.minus(spine[i+1], spine[i]), wbvector3.minus(spine[i-1], spine[i]));
        if (Y[i].x === 0 && Y[i].y === 0 && Y[i].z === 0) {
          Y[i].x = Y[i-1].x;
          Y[i].y = Y[i-1].y;
          Y[i].z = Y[i-1].z;
        }
      }
      if (i !== 0) {
        if (wbvector3.dot(Y[i], Y[i-1]) < 0)
          Y[i] = wbvector3.multiply(Y[i], -1);
      }
      X[i] = wbvector3.cross(Z[i], Y[i]);
      // normalize axes
      if (wbvector3.norm(X[i]) !== 0)
        X[i] = wbvector3.normalize(X[i]);

      if (wbvector3.norm(Y[i]) !== 0)
        Y[i] = wbvector3.normalize(Y[i]);

      if (wbvector3.norm(Z[i]) !== 0)
        Z[i] = wbvector3.normalize(Z[i]);
    }

    // compute distances from first spine point
    let spineDistance = [0];
    for (let i = 1; i < nbSpinePoints; ++i)
      spineDistance.push(spineDistance[i-1] + wbvector3.distance(spine[i-1], spine[i]));

    // compute distances from first cross-section point
    let crossSectionDistance = [0];
    for (let i = 1; i < nbCrossSectionPoint; ++i)
      crossSectionDistance.push(crossSectionDistance[i-1] + wbvector2.distance(crossSection[i-1], crossSection[i]));
  >%
  IndexedFaceSet {
    coord Coordinate {
      point [
        %< for (let i = 0; i < nbSpinePoints; ++i) { >%
          %< for (let j = 0; j < nbCrossSectionPoint; ++j) { >%
            %<
              let point = wbvector3.add(wbvector3.multiply(X[i], crossSection[j].x * scale[i].x), (wbvector3.multiply(Y[i], -crossSection[j].y * scale[i].y)));
              if (orientation[i] !== undefined)
                point = wbrotation.rotateVector3ByRotation(orientation[i], point);

              let x = point.x;
              let y = point.y;
              let z = point.z;
            >%
            %<= x + spine[i].x >% %<= y + spine[i].y >% %<= z + spine[i].z >%
          %< } >%
        %< } >%
      ]
    }
    texCoord TextureCoordinate {
      point [
        %< for (let i = 0; i < nbSpinePoints; ++i) { >%
          %< for (let j = 0; j < nbCrossSectionPoint; ++j) { >%
            %<= spineDistance[i] / spineDistance[nbSpinePoints-1] >% %<= crossSectionDistance[j] / crossSectionDistance[nbCrossSectionPoint-1] >%
          %< } >%
        %< } >%
        # Begin-End
        %< for (let j = 0; j < nbCrossSectionPoint; ++j) { >%
          %<= crossSection[j].x + 0.5 >% %<= crossSection[j].y + 0.5 >%
        %< } >%
      ]
    }
    coordIndex [
      # Begin
      %< if (fields.beginCap.value) { >%
        %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
          %<= j >%
        %< } >%
        -1
      %< } >%
      # Sides
      %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
        %< for (let i = 0; i <= nbSpinePoints - 2; ++i) { >%
          %<= j + i * nbCrossSectionPoint >% %<= j + (i + 1) * nbCrossSectionPoint >% %<= j + 1 + (i + 1) * nbCrossSectionPoint >% %<= j + 1 + i * nbCrossSectionPoint >% -1
        %< } >%
      %< } >%
      # End
      %< if (fields.endCap.value) { >%
        %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
          %<= nbSpinePoints * nbCrossSectionPoint - j - 1 >%
        %< } >%
        -1
      %< } >%
    ]
    texCoordIndex [
      # Begin
      %< if (fields.beginCap.value) { >%
        %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
          %<= nbSpinePoints * nbCrossSectionPoint + j >%
        %< } >%
        -1
      %< } >%
      # Sides
      %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
        %< for (let i = 0; i <= nbSpinePoints - 2; ++i) { >%
          %<= j + i * nbCrossSectionPoint >% %<= j + (i + 1) * nbCrossSectionPoint >% %<= j + 1 + (i + 1) * nbCrossSectionPoint >% %<= j + 1 + i * nbCrossSectionPoint >% -1
        %< } >%
      %< } >%
      # End
      %< if (fields.endCap.value) { >%
        %< for (let j = 0; j <= nbCrossSectionPoint - 2; ++j) { >%
          %<= nbSpinePoints * nbCrossSectionPoint + j >%
        %< } >%
        -1
      %< } >%
    ]
    solid IS solid
    convex IS convex
    ccw IS ccw
    creaseAngle IS creaseAngle
  }
}
