#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Customizable parallelepiped.
# The `size` and `angles` fields specify the edges and angles of the parallelepiped:
# - `angles.x`: angle in y direction between front and back faces of the prism
# - `angles.y`: angle between base and side edges of the parallelogram face
# - `angles.z`: angle in z direction between front and back faces of the prism
# Available texture mappings:
# - `cube` mapping: see texture at projects/samples/geometries/worlds/textures/cube_mapping.jpg
# - `compact` cube mapping: see texture at projects/samples/geometries/worlds/textures/compact_mapping.jpg
# - `flat` mapping: projecting the texture on the front face
# - `metric` mapping: similar to default mapping but the texture is not deformed to match each face size
# - `default` mapping: same texture on all the faces
# - `none` no texture mapping
# If a boolean field (front, back, left, right, top, bottom) is FALSE, then the corresponding face is not drawn.
# A demo of these mappings is available in projects/samples/geometries/worlds/textured_boxes.wbt.
# template language: javascript

PROTO TexturedParallelepiped [
  field SFVec3f  size    0.1 0.1 0.1     # Defines the size of the parallelepiped.
  field SFVec3f  angles  0.0 0.7854 0.0  # Defines the angles of the parallelepiped.
  field SFString{"cube", "compact", "flat", "metric", "default", "none"}
                 mapping "flat"          # Defines the texture mapping.
  field SFBool   front   TRUE            # Defines whether the front face should be included.
  field SFBool   back    TRUE            # Defines whether the back face should be included.
  field SFBool   left    TRUE            # Defines whether the left face should be included.
  field SFBool   right   TRUE            # Defines whether the right face should be included.
  field SFBool   top     TRUE            # Defines whether the top face should be included.
  field SFBool   bottom  TRUE            # Defines whether the bottom face should be included.
]
{
  %<
    let front = fields.front.value;
    if (!(fields.front.value || fields.back.value || fields.left.value || fields.right.value || fields.top.value || fields.bottom.value)) {
      console.error('cannot create an object without any faces: \'front\' reset to default value.');
      front = fields.front.defaultValue;
    }

    const mapping = fields.mapping.value;
    let rows;
    let cols;
    if (mapping === 'cube') {
      rows = 3;
      cols = 4;
    } else if (mapping === 'compact') {
      rows = 2;
      cols = 3;
    } else if (mapping === 'metric') {
      rows = 2;
      cols = 2;
    } else {
      rows = 1;
      cols = 1;
    }

    let halfSize = {x: 0, y: 0, z: 0};
    if (fields.size.value.x <= 0 || fields.size.value.y <= 0 || fields.size.value.z <= 0) {
      console.error('\'size\' must contain positive values. Using default values instead.');
      halfSize.x = fields.size.defaultValue.x * 0.5;
      halfSize.y = fields.size.defaultValue.y * 0.5;
      halfSize.z = fields.size.defaultValue.z * 0.5;
    } else {
      halfSize.x = fields.size.value.x * 0.5;
      halfSize.y = fields.size.value.y * 0.5;
      halfSize.z = fields.size.value.z * 0.5;
    }

    const angleThreshold = 0.001;
    let angles = fields.angles.value;

    // normalize angles
    while (angles.y > Math.PI)
      angles.y = angles.y - Math.PI;
    while (angles.y < 0)
      angles.y = angles.y + Math.PI;

    const halfPi = 0.5 * Math.PI;
    while (angles.x > halfPi)
      angles.x = angles.x - Math.PI;
    while (angles.x < -halfPi)
      angles.x = angles.x + Math.PI;

    while (angles.z > halfPi)
      angles.z = angles.z - Math.PI;
    while (angles.z < -halfPi)
      angles.z = angles.z + Math.PI;

    if (angles.y < angleThreshold || angles.y > (Math.PI - angleThreshold)) {
      angles = fields.angles.defaultValue;
      console.error('\'angles.y\' cannot be 0. Value reset to ' + angles + '.');
    } else if (Math.abs(angles.x) > (halfPi - angleThreshold) || Math.abs(angles.z) > (halfPi - angleThreshold)) {
      angles = fields.angles.defaultValue
      console.error('\'angles.x\' and \'angles.z\' cannot be PI/2 or -PI/2. Using default value instead.');
    }

    const parallelogramHeight = halfSize.z * Math.sin(angles.y);
    const parallelogramHalfOffsetY = halfSize.z * Math.cos(angles.y);
    const prismHalfOffsetX = halfSize.x * Math.cos(angles.x) * Math.cos(angles.z);
    const prismHalfOffsetY = -halfSize.x * Math.sin(angles.x) * Math.cos(angles.z);
    const prismHalfOffsetZ = halfSize.x * Math.sin(angles.z);
  >%

  IndexedFaceSet {
    coord Coordinate {
      point [
      %< for (let k = -1; k <= 1; k = k + 2) {
           for (let j = -1; j <= 1; j = j + 2) {
             for (let i = -1; i <= 1; i = i + 2) {
      >%
        %<= k * prismHalfOffsetX >% %<= i * halfSize.y + j * parallelogramHalfOffsetY +  k * prismHalfOffsetY >% %<= j * parallelogramHeight + k * prismHalfOffsetZ>%
      %<     }
           }
         }
      >%
      ]
    }
    coordIndex [
      %< if (fields.back.value) { >%
      1 0 2 3 -1 # back
      %< }
         if (front) { >%
      4 5 7 6 -1 # front
      %< }
         if (fields.left.value) { >%
      5 1 3 7 -1 # left
      %< }
         if (fields.right.value) { >%
      0 4 6 2 -1 # right
      %< }
         if (fields.top.value) { >%
      7 3 2 6 -1 # top
      %< }
         if (fields.bottom.value) { >%
      4 0 1 5 -1 # bottom
      %< } >%
    ]
    %< if (mapping !== 'none') { >%
    texCoord TextureCoordinate {
      point [
      %<
        let u = [];
        let v = [];
        let ratio = {x: 1, y: 1, z: 1};
        const maxEdge = Math.max(Math.max(halfSize.y + parallelogramHalfOffsetY, parallelogramHeight), halfSize.x);
        const offsetRatio = parallelogramHalfOffsetY / maxEdge;
        if (mapping === 'metric') {
          ratio.x = halfSize.x / maxEdge;
          ratio.y = halfSize.y / maxEdge + offsetRatio;
          ratio.z = parallelogramHeight / maxEdge;
          u = [0, ratio.y, ratio.x, offsetRatio];
          v = [0, ratio.z, ratio.x];
        } else {
          for (let j = 0; j <= rows; ++j)
            v[j] = j/rows;
          for (let i = 0; i <= cols; ++i)
            u[i] = i/cols;
        }
        for (let j = 0; j <= rows; ++j) {
          for (let i = 0; i <= cols; ++i) {
      >%
        %<= u[i] >% %<= v[j] >%
      %<
          }
        }
        if (mapping === 'flat') {
          // prevent using the exact same texture coordinates when mapping side faces
       >% 0.0001 0.0001 0.9999 0.0001 0.0001 0.9999 0.9999 0.9999 %<
        }
        if (mapping === 'metric') {
      >%
        %<= offsetRatio >% %<= 0 >%
        %<= halfSize.y / maxEdge >% %<= 0 >%
        %<= halfSize.y / maxEdge >% %<= ratio.z >%
        %<= offsetRatio >% %<= ratio.z >%
      %< } >%
      ]
    }
    texCoordIndex [
      %< if (mapping === 'cube') { >%
        %< if (fields.back.value) { >%
      8 9 14 13 -1
        %< }
           if (front) { >%
      6 7 12 11 -1
        %< }
           if (fields.left.value) { >%
      7 8 13 12 -1
        %< }
           if (fields.right.value) { >%
      5 6 11 10 -1
        %< }
           if (fields.top.value) { >%
      12 17 16 11 -1
        %< }
           if (fields.bottom.value) { >%
      6 1 2 7 -1
        %< } >%
      %< } else if (mapping === 'compact') { >%
        %< if (fields.back.value) { >%
      6 7 11 10 -1
        %< }
           if (front) { >%
      1 2 6 5 -1
        %< }
           if (fields.left.value) { >%
      2 3 7 6 -1
        %< }
           if (fields.right.value) { >%
      0 1 5 4 -1
        %< }
           if (fields.top.value) { >%
      6 10 9 5 -1
        %< }
           if (fields.bottom.value) { >%
      8 4 5 9 -1
        %< } >%
      %< } else if (mapping === 'flat') { >%
        %< if (fields.back.value) { >%
      1 0 2 3 -1
        %< }
           if (front) { >%
      0 1 3 2 -1
        %< }
           if (fields.left.value) { >%
      1 5 7 3 -1
        %< }
           if (fields.right.value) { >%
      0 4 6 2 -1
        %< }
           if (fields.top.value) { >%
      7 3 2 6 -1
        %< }
           if (fields.bottom.value) { >%
      0 4 5 1 -1
        %< } >%
      %< } else if (mapping === 'metric') { >%
        %< if (fields.back.value) { >%
      9 1 11 3 -1
        %< }
           if (front) { >%
      0 10 4 12 -1
        %< }
           if (fields.left.value) { >%
      0 2 5 3 -1
        %< }
           if (fields.right.value) { >%
      0 2 5 3 -1
        %< }
           if (fields.top.value) { >%
      1 7 6 0 -1
        %< }
           if (fields.bottom.value) { >%
      6 0 1 7 -1
        %< } >%
      %< } else if (mapping === 'default') { >%
        %< if (fields.back.value) { >%
      0 1 3 2 -1
        %< }
           if (front) { >%
      0 1 3 2 -1
        %< }
           if (fields.left.value) { >%
      0 1 3 2 -1
        %< }
           if (fields.right.value) { >%
      0 1 3 2 -1
        %< }
           if (fields.top.value) { >%
      1 3 2 0 -1
        %< }
           if (fields.bottom.value) { >%
      2 0 1 3 -1
        %< } >%
      %< } >%
    ]
    %< } >%
  }
}
