#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A configurable rectangle arena composed of a floor surrounded by walls.
# template language: javascript

PROTO RectangleArena [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "rectangle arena"
  field SFString   contactMaterial "default"                       # Is `Solid.contactMaterial`.
  field SFVec2f    floorSize       1 1                             # Defines the size of the floor.
  field SFVec2f    floorTileSize   0.5 0.5                         # Defines the size of the texture used for the floor.
  field SFNode     floorAppearance Parquetry { type "chequered" }  # Defines the appearance of the floor.
  field SFFloat    wallThickness   0.01                            # Defines the thickness of the walls.
  field SFFloat    wallHeight      0.1                             # Defines the height of the walls.
  field SFNode     wallAppearance  BrushedAluminium {}             # Defines the appearance of the wall.

  # Deprecated in R2019a
  hiddenField MFString   floorTextureUrl "webots://projects/default/worlds/textures/checkered_parquetry.jpg"
  hiddenField MFString   wallTextureUrl  "webots://projects/default/worlds/textures/metal.jpg"
  # Deprecated in R2019a-rev2
  hiddenField SFColor    wallColor 0.8 0.8 0.8
  hiddenField SFVec2f    wallTileSize 0.5 0.5
]
{
  %<
    let floorSize = fields.floorSize.value;
    if (floorSize.x <= 0.0 || floorSize.y <= 0.0) {
      floorSize = fields.floorSize.defaultValue;
      console.error('\'floorSize\' must contain positive values. Value reset to (' + floorSize.x + ', ' + floorSize.y + ').');
    }

    if (fields.floorTextureUrl.value[0] !== fields.floorTextureUrl.defaultValue[0])
      console.error('The \'floorTextureUrl\' field is deprecated, using the new \'floorAppearance\' field instead.');

    if (fields.wallTextureUrl.value[0] !== fields.wallTextureUrl.defaultValue[0])
      console.error('The \'wallTextureUrl\' field is deprecated, using the new \'wallAppearance\' field instead.');

    if (fields.wallColor.value.r !== fields.wallColor.defaultValue.r || fields.wallColor.value.g !== fields.wallColor.defaultValue.g ||
        fields.wallColor.value.b !== fields.wallColor.defaultValue.b)
      console.error('The \'wallColor\' field is deprecated, using the new \'wallAppearance\' field instead.');

    const wallTileSize = fields.wallTileSize.value;
    if (wallTileSize.x !== fields.wallTileSize.defaultValue.x || wallTileSize.y !== fields.wallTileSize.defaultValue.y)
      console.error('The \'wallTileSize\' field is deprecated, using the new \'wallApperance\' field instead.');

    let wallThickness = fields.wallThickness.value;
    if (wallThickness <= 0) {
      wallThickness = fields.wallThickness.defaultValue;
      console.error('\'wallThickness\' must be strictly positive. Value reset to ' + wallThickness + '.');
    }

    let wallHeight = fields.wallHeight.value;
    if (wallHeight <= 0) {
      wallHeight = fields.wallHeight.defaultValue;
      console.error('\'wallHeight\' must be strictly positive. Value reset to ' + wallHeight + '.');
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Floor {
        size %<= floorSize.x >% %<= floorSize.y >%
        tileSize IS floorTileSize
        appearance IS floorAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %<= floorSize.x * 0.5 + wallThickness * 0.5 >% 0 %<= wallHeight * 0.5 >%
        name "wall"
        size %<= wallThickness >% %<= floorSize.y >% %<= wallHeight >%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %<= -(floorSize.x * 0.5 + wallThickness * 0.5) >% 0 %<= wallHeight * 0.5 >%
        name "wall#2"
        size %<= wallThickness >% %<= floorSize.y >% %<= wallHeight >%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %<= floorSize.y * 0.5 + wallThickness * 0.5 >% %<= wallHeight * 0.5 >%
        name "wall#3"
        size %<= floorSize.x + 2 * wallThickness >% %<= wallThickness >% %<= wallHeight >%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %<= -(floorSize.y * 0.5 + wallThickness * 0.5) >% %<= wallHeight * 0.5 >%
        name "wall#4"
        size %<= floorSize.x + 2 * wallThickness >% %<= wallThickness >% %<= wallHeight >%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
    ]
    name IS name
    model "rectangle arena"
  }
}
