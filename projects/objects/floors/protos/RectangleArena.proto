#VRML_SIM R2021a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A configurable rectangle arena composed of a floor surrounded by walls.

PROTO RectangleArena [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 1 0 0
  field SFString   name            "rectangle arena"
  field SFString   contactMaterial "default"                       # Is `Solid.contactMaterial`.
  field SFVec2f    floorSize       1 1                             # Defines the size of the floor.
  field SFVec2f    floorTileSize   0.5 0.5                         # Defines the size of the texture used for the floor.
  field SFNode     floorAppearance Parquetry { type "chequered" }  # Defines the appearance of the floor.
  field SFFloat    wallThickness   0.01                            # Defines the thickness of the walls.
  field SFFloat    wallHeight      0.1                             # Defines the height of the walls.
  field SFNode     wallAppearance  BrushedAluminium {}             # Defines the appearance of the wall.

  # Deprecated in R2019a
  hiddenField MFString   floorTextureUrl "textures/checkered_parquetry.jpg"
  hiddenField MFString   wallTextureUrl  "textures/metal.jpg"
  # Deprecated in R2019a-rev2
  hiddenField SFColor    wallColor 0.8 0.8 0.8
  hiddenField SFVec2f    wallTileSize 0.5 0.5
]
{
  %{

    local wbcore = require("wbcore")
    local floorSize = fields.floorSize.value
    if floorSize.x <= 0.0 or floorSize.y <= 0.0 then
      io.stderr:write("'floorSize' must contain positive values\n")
      floorSize = fields.floorSize.defaultValue
    end

    if fields.floorTextureUrl.value[0] ~= fields.floorTextureUrl.defaultValue[0] then
      io.stderr:write("The 'floorTextureUrl' field is deprecated, using the new 'floorAppearance' field instead.\n")
    end

    if fields.wallTextureUrl.value[0] ~= fields.wallTextureUrl.defaultValue[0] then
      io.stderr:write("The 'wallTextureUrl' field is deprecated, using the new 'wallAppearance' field instead.\n")
    end

    if (fields.wallColor.value.r ~= fields.wallColor.defaultValue.r or
        fields.wallColor.value.g ~= fields.wallColor.defaultValue.g or
        fields.wallColor.value.b ~= fields.wallColor.defaultValue.b) then
      io.stderr:write("The 'wallColor' field is deprecated, using the new 'wallAppearance' field instead.\n")
    end

    local wallTileSize = fields.wallTileSize.value;
    if (wallTileSize.x ~= fields.wallTileSize.defaultValue.x or wallTileSize.y ~= fields.wallTileSize.defaultValue.y) then
      io.stderr:write("The 'wallTileSize' field is deprecated, using the new 'wallApperance' field instead.\n")
    end

    local wallThickness = fields.wallThickness.value
    if wallThickness <= 0 then
      io.stderr:write("'wallThickness' must be positive\n")
      wallThickness = fields.wallThickness.defaultValue
    end

    local wallHeight = fields.wallHeight.value
    if wallHeight <= 0 then
      io.stderr:write("'wallHeight' must be positive\n")
      wallHeight = fields.wallHeight.defaultValue
    end
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Floor {
        size %{= floorSize.x }% %{= floorSize.y }%
        tileSize IS floorTileSize
        appearance IS floorAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %{= floorSize.x / 2 + wallThickness / 2 }% %{= wallHeight / 2 }% 0
        name "wall"
        size %{= wallThickness }% %{= wallHeight }% %{= floorSize.y }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %{= -(floorSize.x / 2 + wallThickness / 2) }% %{= wallHeight / 2 }% 0
        name "wall#2"
        size %{= wallThickness }% %{= wallHeight }% %{= floorSize.y }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %{= wallHeight / 2 }% %{= floorSize.y / 2 + wallThickness / 2 }%
        name "wall#3"
        size %{= floorSize.x + 2 * wallThickness }% %{= wallHeight }% %{= wallThickness }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %{= wallHeight / 2 }% %{= -(floorSize.y / 2 + wallThickness / 2) }%
        name "wall#4"
        size %{= floorSize.x + 2 * wallThickness }% %{= wallHeight }% %{= wallThickness }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
    ]
    name IS name
    model "rectangle arena"
  }
}
