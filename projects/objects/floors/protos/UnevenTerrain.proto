#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: nonDeterministic
# Randomly generated uneven terrain based on Perlin noise.
# template language: javascript

PROTO UnevenTerrain [
  field SFVec3f    translation    0 0 0
  field SFRotation rotation       0 0 1 0
  field SFString   name           "uneven terrain"
  field SFVec3f    size           50 50 5                                                           # Defines the size of the terrain.
  field SFInt32    xDimension     50                                                                 # Defines the number of points in the grid height array in the x direction.
  field SFInt32    yDimension     50                                                                 # Defines the number of points in the grid height array in the y direction.
  field SFNode     appearance     SandyGround { textureTransform TextureTransform { scale 50 50 } }  # Defines the appearance of the terrain.
  field SFInt32    randomSeed     1                                                                  # Defines the seed of the random number generator. A value smaller or equal to 0 sets a random seed.
  field SFBool     flatCenter     FALSE                                                              # Defines whether the center of the terrain should be flat.
  field SFBool     flatBounds     FALSE                                                              # Defines whether the bounds of the terrain should be flat.
  field SFInt32    perlinNOctaves 3                                                                  # Defines the number of octaves of the perlin noise.

  # Deprecated in Webots R2019a
  deprecatedField MFString   texture        "webots://projects/default/worlds/textures/sand.jpg"
  # Deprecated in Webots R2020b
  deprecatedField SFVec2f    textureScale   1.0 1.0
]
{
  %<
    // reference: https://stackoverflow.com/a/42543313/2210777
    import * as wbrandom from 'wbrandom.js';

    if (fields.randomSeed.value <= 0)
      wbrandom.seed(Date.now());
    else
      wbrandom.seed(fields.randomSeed.value);

    function gaussian2d(x, y, amp, cx, cy, sx, sy) {
      return amp * Math.exp( - ( ( Math.pow(x - cx, 2) / (2.0 * Math.pow(sx, 2)) ) + (Math.pow(y - cy, 2) / (2.0 * Math.pow(sy, 2)) ) ));
    }

    // create 256 shuffled numbers repeated twice.
    let perm = [];
    for (let i = 1; i <= 256; ++i)
        perm.splice(wbrandom.integer(i) -1, 0, i);

    for (let i = 0; i < 256; ++i)
      perm.push(perm[i]);

    // generate 256 directions
    let dirs = [];
    for (let a = 0; a < 256; ++a)
      dirs.push([Math.cos(a * 2.0 * Math.PI / 256), Math.sin(a * 2.0 * Math.PI / 256)]);

    function noise (x, y, per, dirs, perm) {
      function surflet (grid_x, grid_y, dirs, perm) {
        const dist_x = Math.abs(x - grid_x);
        const dist_y = Math.abs(y - grid_y);
        const poly_x = 1 - 6 * Math.pow(dist_x, 5) + 15 * Math.pow(dist_x, 4) - 10 * Math.pow(dist_x, 3);
        const poly_y = 1 - 6 * Math.pow(dist_y, 5) + 15 * Math.pow(dist_y, 4) - 10 * Math.pow(dist_y, 3);
        const hashed = perm[(perm[(Math.floor(grid_x) % per)] + Math.floor(grid_y) % per)];
        const grad = (x - grid_x)  * dirs[hashed-1][0] + (y - grid_y) * dirs[hashed-1][1];

        return poly_x * poly_y * grad;
      }

      let int_x = Math.floor(x);
      let int_y = Math.floor(y);

      return surflet(int_x + 0, int_y + 0, dirs, perm) + surflet(int_x + 1, int_y + 0, dirs, perm) + surflet(int_x + 0, int_y + 1, dirs, perm) + surflet(int_x + 1, int_y + 1, dirs, perm);
    }

    function fBm (x, y, per, octs, dirs, perm) {  // Fractional Brownian motion
      let val = 0;
      for (let o = 0; o <= octs - 1; ++o)
        val = val + (Math.pow(0.5, o) * noise(x * Math.pow(2, o), y * Math.pow(2, o), per * Math.pow(2, o), dirs, perm));

      return val;
    }

    const perlinSize = 128;
    let nOctave = fields.perlinNOctaves.value;
    if (nOctave < 0 || nOctave >= 10) {
      nOctave = fields.perlinNOctaves.defaultValue;
      console.error('\'perlinNOctaves\' must be in the range [0, 10[. Value reset to ' + nOctave + '.');
    }

    const size = fields.size.value;

    let xDimension = fields.xDimension.value;
    if (xDimension < 2) {
      xDimension = fields.xDimension.defaultValue;
      console.error('\'xDimension\' must be bigger than 2. Value reset to ' + xDimension + '.');
    }

    let yDimension = fields.yDimension.value;
    if (yDimension < 2) {
      yDimension = fields.yDimension.defaultValue;
      console.error('\'yDimension\' must be bigger than 2. Value reset to ' + yDimension + '.');
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF UNEVEN_TERRAIN_ELEVATION_GRID Transform {
        translation %<= - size.x * 0.5 >% %<= - size.y * 0.5 >% 0
        children [
          Shape {
            appearance IS appearance
            geometry ElevationGrid {
              %< if (xDimension > 2 && yDimension > 2) { >%
                xDimension IS xDimension
                xSpacing %<= size.x / (xDimension - 1) >%
                yDimension IS yDimension
                ySpacing %<= size.y / (yDimension - 1) >%

                height [
                  %< for (let i = xDimension - 1; i >= 0; --i) { >%
                    %< for (let j = 0; j <= yDimension - 1; ++j) { >%
                      %<
                        let height = 1.0;
                        const x = i / xDimension;
                        const y = j / yDimension;
                        if (nOctave > 0)
                          height = 0.5 * (1.0 + fBm(x, y, perlinSize, nOctave, dirs, perm));

                        if (fields.flatCenter.value)
                          height = height * (1.0 - gaussian2d(x - 0.5, y - 0.5, 1, 0, 0, 0.2, 0.2));

                        if (fields.flatBounds.value)
                          height = height * gaussian2d(x - 0.5, y - 0.5, 1, 0, 0, 0.2, 0.2);

                        height = height * size.z
                      >%
                      %<= height >%
                    %< } >%
                  %< } >%
                ]
              %< } >%
            }
          }
        ]
      }
    ]
    name IS name
    model "uneven terrain"
    boundingObject USE UNEVEN_TERRAIN_ELEVATION_GRID
  }
}
