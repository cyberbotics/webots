#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A configurable circle arena composed of floor surrounded by wall.
# template language: javascript

PROTO CircleArena [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "circle arena"
  field SFFloat    radius          1.0                             # Defines the radius of the arena.
  field SFString   contactMaterial "default"                       # Is `Solid.contactMaterial`.
  field SFNode     floorAppearance Parquetry { type "chequered" }  # Defines the appearance of the floor.
  field SFVec2f    floorTileSize   0.5 0.5                         # Defines the size of the texture used for the floor.
  field SFFloat    wallThickness   0.01                            # Defines the thickness of the wall.
  field SFFloat    wallHeight      0.1                             # Defines the height of the wall.
  field SFNode     wallAppearance  BrushedAluminium {}             # Defines the appearance of the wall.
  field SFInt32    subdivision     48                              # Defines the subdivision of the wall cylinder.

  # Deprecated in R2019a
  hiddenField MFString   floorTextureUrl "webots://projects/default/worlds/textures/checkered_parquetry.jpg"
  hiddenField MFString   wallTextureUrl  "webots://projects/default/worlds/textures/metal.jpg"
  # Deprecated in R2019-rev2
  hiddenField SFVec2f    wallTileSize 0.5 0.5
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';

    if (fields.floorTextureUrl.value[0] !== fields.floorTextureUrl.defaultValue[0])
      console.error('The \'floorTextureUrl\' field is deprecated, using the new \'floorAppearance\' field instead.');

    if (fields.wallTextureUrl.value[0] !== fields.wallTextureUrl.defaultValue[0])
      console.error('The \'wallTextureUrl\' field is deprecated, using the new \'wallAppearance\' field instead.');

    const wallTileSize = fields.wallTileSize.value;
    if (wallTileSize.x !== fields.wallTileSize.defaultValue.x || wallTileSize.y !== fields.wallTileSize.defaultValue.y)
      console.error('The \'wallTileSize\' field is deprecated, using the new \'wallApperance\' field instead.');

    let subdivision = fields.subdivision.value;
    if (subdivision <= 8) {
      console.error('\'subdivision\' must be greater than 8. Using 8 instead.');
      subdivision = 8;
    }

    let radius = fields.radius.value;
    if (radius <= 0) {
      radius = fields.radius.defaultValue;
      console.error('\'radius\' must be strictly positive. Value reset to ' + radius + '.');
    }

    let wallThickness = fields.wallThickness.value;
    if (wallThickness <= 0) {
      wallThickness = fields.wallThickness.defaultValue;
      console.error('\'wallThickness\' must be strictly positive. Value reset to ' + wallThickness + '.');
    }

    let wallHeight = fields.wallHeight.value;
    if (wallHeight <= 0) {
      wallHeight = fields.wallHeight.defaultValue;
      console.error('\'wallHeight\' must be strictly positive. Value reset to ' + wallHeight + '.');
    }

    const realRadius = radius + wallThickness * 0.5;

    let floorTextureScale = {x: 1, y: 1};
    if (fields.floorTileSize.value.x >= 0 && fields.floorTileSize.value.y >= 0.0) { // avoid a zero division and negative values
      floorTextureScale.x =  fields.floorTileSize.value.x;
      floorTextureScale.y =  fields.floorTileSize.value.y;
    } else
      console.error('\'floorTextureScale\' must contain positive values.');
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      SolidPipe {
        translation 0 0 %<= wallHeight / 2 >%
        height %<= wallHeight >%
        radius %<= radius + wallThickness >%
        thickness %<= wallThickness >%
        subdivision %<= subdivision >%
        contactMaterial IS contactMaterial
        appearance IS wallAppearance
      }
      Shape {
        appearance IS floorAppearance
        geometry IndexedFaceSet {
          %< const circle = wbgeometry.circle(realRadius, subdivision, {x: 0, y: 0}, 0); >%
          coord Coordinate {
            point [
              %< for (let i = 0; i < circle.length; ++i) { >%
                %<= circle[i].x >% %<= circle[i].y >% %<= 0 >%
              %< } >%
            ]
          }
          texCoord TextureCoordinate {
            point [
              %< for (let i = 0; i < circle.length; ++i) { >%
                %<= circle[i].x / floorTextureScale.x >% %<= circle[i].y / floorTextureScale.y>%
              %< } >%
            ]
          }
          coordIndex [
            %< for (let j = 0; j < subdivision; ++j) { >%
               0 %<= j >% %<= j + 1 >% -1
            %< } >%
          ]
          texCoordIndex [
            %< for (let j = 0; j < subdivision; ++j) { >%
               0 %<= j >% %<= j + 1 >% -1
            %< } >%
          ]
        }
      }
    ]
    name IS name
    model "circle arena"
    boundingObject Plane {
      size %<= 2 * radius >% %<= 2 * radius >%
    }
    contactMaterial IS contactMaterial
    locked TRUE
  }
}
