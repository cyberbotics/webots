#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Box with customizable texture mapping on selected faces.
# If the boolean value associated with a face (`frontFace`, `leftFace`, etc.) is FALSE, then the uniform color specified in `faceColor` field will be applied instead of the texture.
# This is an extension of the TexturedBox geometry PROTO.
# Available texture mappings:
# - `cube` mapping: see texture at projects/samples/geometries/worlds/textures/cube_mapping.jpg
# - `compact` cube mapping: see texture at projects/samples/geometries/worlds/textures/compact_mapping.jpg
# - `flat` mapping: projecting the texture on the front face.
# - `metric` mapping: similar to default mapping but the texture is not deformed to match each face size.
# - `default` mapping: same texture on all the faces.
#
# A demo of these mappings is available in projects/samples/geometries/worlds/textured_boxes.wbt.
# template language: javascript

PROTO TexturedBoxShape [
  field SFVec3f  size             0.1 0.1 0.1                    # Defines the size of the box.
  field MFString textureUrl       "webots://projects/default/worlds/textures/old_brick_wall.jpg"  # Defines the texture used for the box.
  field SFInt32  textureFiltering 4                              # Defines the filtering level for the texture used for the box.
  field SFNode   textureTransform NULL                           # Defines the texture transform for the texture used for the box.
  field SFString{"cube", "compact", "flat", "metric", "default", "none"}
                 textureMapping   "flat"                         # Defines the texture mapping.
  field SFColor  faceColor        0.8 0.8 0.8                    # Defines the color of the faces of the box.
  field SFBool   frontFace        TRUE                           # Defines whether the front face is included.
  field SFBool   backFace         TRUE                           # Defines whether the back face is included.
  field SFBool   leftFace         TRUE                           # Defines whether the left face is included.
  field SFBool   rightFace        TRUE                           # Defines whether the right face is included.
  field SFBool   topFace          TRUE                           # Defines whether the top face is included.
  field SFBool   bottomFace       TRUE                           # Defines whether the bottom face is included.
]
{
  %<
    let size = fields.size.value;
    if (size.x <= 0 || size.y <= 0 || size.z <= 0) {
      size = fields.size.defaultValue;
      console.error('\'size\' should be strictly positive. Value reset to (' + size.x + ', ' + size.y + ', ' + size.z + ').');
    }

    const avgEdge = (size.x + size.y + size.z) / 3;
    const offset = 0.002 * avgEdge;

    const coloredFrontFace  = fields.frontFace.value ? 'FALSE' : 'TRUE';
    const coloredBackFace   = fields.backFace.value ? 'FALSE' : 'TRUE';
    const coloredRightFace  = fields.rightFace.value ? 'FALSE' : 'TRUE';
    const coloredLeftFace   = fields.leftFace.value ? 'FALSE' : 'TRUE';
    const coloredTopFace    = fields.topFace.value ? 'FALSE' : 'TRUE';
    const coloredBottomFace = fields.bottomFace.value ? 'FALSE' : 'TRUE';
  >%
  Group {
    children [
      %<
      if (fields.frontFace.value || fields.backFace.value || fields.rightFace.value ||
          fields.leftFace.value || fields.topFace.value || fields.bottomFace.value) {
      >%
      Shape {
        appearance PBRAppearance {
          metalness 0
          roughness 1
          baseColorMap ImageTexture {
            url IS textureUrl
            filtering IS textureFiltering
          }
          textureTransform IS textureTransform
        }
        geometry TexturedBox {
          size IS size
          mapping IS textureMapping
          front IS frontFace
          back IS backFace
          left IS leftFace
          right IS rightFace
          top IS topFace
          bottom IS bottomFace
        }
      }
      %<
      }
      if (!(fields.frontFace.value && fields.backFace.value && fields.rightFace.value &&
          fields.leftFace.value && fields.topFace.value && fields.bottomFace.value)) {
      >%
        Shape {
          appearance PBRAppearance {
            baseColor IS faceColor
            metalness 0
            roughness 1
          }
          geometry TexturedBox {
            size IS size
            mapping "none"
            front %<= coloredFrontFace >%
            back %<= coloredBackFace >%
            left %<= coloredLeftFace >%
            right %<= coloredRightFace >%
            top %<= coloredTopFace >%
            bottom %<= coloredBottomFace >%
          }
        }
      %< } >%
    ]
  }
}
