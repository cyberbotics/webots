#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A divergent indicator block.
# template language: javascript

PROTO DivergentIndicator [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "divergent indicator"
  field MFString   texture         "webots://projects/objects/traffic/protos/textures/divergent_indicator.jpg"  # Defines the texture used by the divergent indicator.
  field SFFloat    height          1                                   # Defines the height of the divergent indicator.
  field SFFloat    radius          0.5                                 # Defines the radius of the divergent indicator.
  field SFInt32    subdivision     24                                  # Defines the number of polygons used to represent the divergent indicator cylindrical part and so its resolution .
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';

    // parameter checking
    let subdivision = fields.subdivision.value;
    if (subdivision > 200)
      console.error('High value for \'subdivision\'. This can slow down the simulation.');

    if (subdivision < 8) {
      console.error('\'subdivision\' must be greater than or equal to 8.');
      subdivision = 8;
    }

    let height = fields.height.value;
    if (height <= 0) {
      height = fields.height.defaultValue;
      console.error('\'height\' must be greater than 0. Value reset to ' + height + '.');
    }

    let radius = fields.radius.value;
    if (radius <= 0) {
      radius = fields.radius.defaultValue;
      console.error('\'radius\' must be greater than 0. Value reset to ' + radius + '.');
    }

    const circle = wbgeometry.circle(radius, subdivision, {x: 0, y: 0}, 0.5 * Math.PI);
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Transform {
        rotation 1 0 0 1.5708
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap ImageTexture {
                url IS texture
              }
              metalness 0
              roughness 0.3
            }
            geometry IndexedFaceSet {
              coord Coordinate {
                point [
                  %< for (let i = 0; i < circle.length; ++i) { >%
                    %<= circle[i].x >% %<= 0.8 * height - 0.2 * height * Math.sin(2 * Math.PI * (i - 1) / subdivision) >% %<= circle[i].y >%
                    %<= circle[i].x >% 0 %<= circle[i].y >%
                  %< } >%
                ]
              }
              texCoord TextureCoordinate {
                point [
                  %< for (let i = 0; i <= subdivision; ++i) { >%
                    %<= i / subdivision - 0.25 >% %<= 0.8 - 0.2 * Math.sin(2 * Math.PI * i / subdivision) >%
                    %<= i / subdivision - 0.25 >% 0
                  %< } >%
                ]
              }
              coordIndex [
                # side
                %< for (let i = 0; i <= subdivision - 1; ++i) { >%
                  %<= 2 * i >% %<= 2 * i + 2 >% %<= 2 * i + 3 >% %<= 2 * i + 1 >% -1
                %< } >%
                # top
                %< for (let i = 0; i <= subdivision; ++i) { >%
                  %<= 2 * (subdivision - i) >%
                %< } >%
                -1
                # bottom
                %< for (let i = 0; i <= subdivision; ++i) { >%
                  %<= 2 * i + 1 >%
                %< } >%
                -1
              ]
              texCoordIndex [
                # side
                %< for (let i = 0; i <= subdivision - 1; ++i) { >%
                  %<= 2 * i >% %<= 2 * i + 2 >% %<= 2 * i + 3 >% %<= 2 * i + 1 >% -1
                %< } >%
                # top
                %< for (let i = 0; i <= subdivision; ++i) { >%
                  %<= 2 * (subdivision - i) >%
                %< } >%
                -1
                # bottom
                %< for (let i = 0; i <= subdivision; ++i) { >%
                  %<= 2 * i + 1 >%
                %< } >%
                -1
              ]
              creaseAngle 0.5
            }
          }
        ]
      }
    ]
    name IS name
    model "divergent indicator"
    boundingObject Transform {
      translation 0 0 %<= height * 0.5 >% 
      children [
        Shape {
          geometry Cylinder {
            height %<= height >%
            radius %<= radius >%
            subdivision %<= subdivision >%
          }
        }
      ]
    }
  }
}
