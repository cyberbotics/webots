#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Customizable highway pole with the possibility of adding another stand and more signs along the vertical or horizontal parts of the pole.
# Different types of poles are available: "cylinder", "box", or "H-shape".
# template language: javascript

PROTO HighwayPole [
  field SFVec3f       translation           0 0 0
  field SFRotation    rotation              0 0 1 0
  field SFString      name                  "highway pole"
  field SFString{"cylinder", "box", "H-shape"}
                      type                  "cylinder"                                                                                                      # Defines the shape of the pole.
  field SFInt32{1, 2} stand                 1                                                                                                               # Defines the number of stands.
  field SFFloat       height                6                                                                                                               # Defines the height of the pole.
  field SFFloat       length                8                                                                                                               # Defines the length of the pole.
  field SFFloat       thickness             0.2                                                                                                             # Defines the thickness of the pole.
  field SFColor       color                 0.258824 0.258824 0.258824                                                                                      # Defines the color of the pole.
  field SFFloat       curveRadius           0.4                                                                                                             # Defines the curvature radius of the pole.
  field MFNode        rightHorizontalSigns  [ HighwaySign { name "vertical sign" } ]                                                                        # Defines the horizontal signs on the right side of the pole.
  field MFNode        rightVerticalSigns    [ HighwaySign { name "horizontal sign" height 2.1 length 3.2 texture "webots://projects/objects/traffic/protos/textures/highway_sign_la_ciotat.jpg" } ]  # Defines the vertical signs on the right side of the pole.
  field MFNode        leftHorizontalSigns   [ ]                                                                                                             # Defines the horizontal signs on the left side of the pole.
  field MFNode        leftVerticalSigns     [ ]                                                                                                             # Defines the vertical signs on the left side of the pole.
]
{
  %<
    const stand = fields.stand.value;
    const type = fields.type.value;

    let height = fields.height.value;
    if (height <= 0.0) {
      height = fields.height.defaultValue;
      console.error('\'height\' should be strictly positive. Value reset to ' + height + '.');
    }

    let length = fields.length.value;
    if (length <= 0.0) {
      length = fields.length.defaultValue;
      console.error('\'length\' should be strictly positive. Value reset to ' + length + '.');
    }

    let thickness = fields.thickness.value;
    if (thickness <= 0.0) {
      thickness = fields.thickness.defaultValue;
      console.error('\'thickness\' should be strictly positive. Value reset to ' + thickness + '.');
    }
    const halfThickness = thickness * 0.5;
    const quarterThickness = thickness * 0.25;

    let curveRadius = fields.curveRadius.value;
    if (curveRadius <= 0.0) {
      curveRadius = fields.curveRadius.defaultValue;
      console.error('\'curveRadius\' should be strictly positive. Value reset to ' + curveRadius + '.');
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF CURVED_POLE Solid {
        rotation 1 0 0 1.5708
        children [
          Shape {
            appearance PBRAppearance {
              baseColor IS color
              metalness 0
              roughness 0.6
            }
            geometry Extrusion {
              %< if (type === 'cylinder') { >%
                  crossSection [
                    %<= halfThickness >%  %<= quarterThickness >%
                    %<= quarterThickness >%  %<= halfThickness >%
                    %<= -quarterThickness >% %<= halfThickness >%
                    %<= -halfThickness >% %<= quarterThickness >%
                    %<= -halfThickness >% %<= -quarterThickness >%
                    %<= -quarterThickness >% %<= -halfThickness >%
                    %<= quarterThickness >%  %<= -halfThickness >%
                    %<= halfThickness >%  %<= -quarterThickness >%
                    %<= halfThickness >%  %<= quarterThickness >%
                  ]
              %< } else if (type === 'box') { >%
                  crossSection [
                    %<= halfThickness >%  %<= halfThickness >%
                    %<= -halfThickness >% %<= halfThickness >%
                    %<= -halfThickness >% %<= -halfThickness >%
                    %<= halfThickness >%  %<= -halfThickness >%
                    %<= halfThickness >%  %<= halfThickness >%
                  ]
              %< } else if (type === 'H-shape') { >%
                  # weird quotients (4.01 etc) here are here to avoid failures in polygon tesselation
                  crossSection [
                    %<= halfThickness >%  %<= -halfThickness >%
                    %<= halfThickness >%  %<= -quarterThickness >%
                    %<= thickness/4.02 >%  %<= -quarterThickness >%
                    %<= thickness/4.01 >%  %<= quarterThickness >%
                    %<= halfThickness >%  %<= quarterThickness >%
                    %<= halfThickness >%  %<= halfThickness >%
                    %<= -halfThickness >% %<= halfThickness >%
                    %<= -halfThickness >% %<= quarterThickness >%
                    %<= -thickness/4.02 >% %<= quarterThickness >%
                    %<= -thickness/4.01 >% %<= -quarterThickness >%
                    %<= -halfThickness >% %<= -quarterThickness >%
                    %<= -halfThickness >% %<= -halfThickness >%
                    %<= halfThickness >%  %<= -halfThickness >%
                  ]
              %< } >%
              spine [
                0 0                                    0
                0 %<= 0.5 * height >%                  0
                0 %<= 0.75 * height >%                 0
                0 %<= height >%                        0
                0 %<= height + 0.333 * curveRadius >%  %<= 0.33 * thickness >%
                0 %<= height + 0.5 * curveRadius >%    %<= 0.66 * thickness >%
                0 %<= height + 0.667 * curveRadius >%  %<= thickness >%
                0 %<= height + 0.85 * curveRadius >%   %<= thickness + 0.33 * curveRadius >%
                0 %<= height + 0.95 * curveRadius >%   %<= thickness + 0.66 * curveRadius >%
                %< if (stand === 1) { >%
                    0 %<= height + curveRadius >%           %<= length + curveRadius >%
                %< } else if (stand === 2) { >%
                    0 %<= height + curveRadius >%           %<= length >%
                    0 %<= height + 0.95 * curveRadius >%    %<= length + 0.333 * curveRadius + thickness >%
                    0 %<= height + 0.85 * curveRadius >%    %<= length + 0.667 * curveRadius + thickness >%
                    0 %<= height + 0.667 * curveRadius >%   %<= length + curveRadius + thickness >%
                    0 %<= height + 0.5 * curveRadius >%     %<= length + 1.333 * thickness + curveRadius >%
                    0 %<= height + 0.333 * curveRadius >%   %<= length + 1.667 * thickness + curveRadius >%
                    0 %<= height >%                         %<= length + 2 * thickness + curveRadius >%
                    0 %<= 0.75 * height >%                  %<= length + 2 * thickness + curveRadius >%
                    0 %<= 0.5 * height >%                   %<= length + 2 * thickness + curveRadius >%
                    0 0                                     %<= length + 2 * thickness + curveRadius >%
                %< } >%
              ]
              ccw FALSE
              splineSubdivision 0
            }
          }
        ]
        boundingObject Extrusion {
          crossSection [
            %<= halfThickness >%  %<= halfThickness >%
            %<= -halfThickness >% %<= halfThickness >%
            %<= -halfThickness >% %<= -halfThickness >%
            %<= halfThickness >%  %<= -halfThickness >%
            %<= halfThickness >%  %<= halfThickness >%
          ]
          spine [
            0 0                                    0
            0 %<= 0.5 * height >%                  0
            0 %<= 0.75 * height >%                 0
            0 %<= height >%                        0
            0 %<= height + 0.333 * curveRadius >%  %<= 0.33 * thickness >%
            0 %<= height + 0.5 * curveRadius >%    %<= 0.66 * thickness >%
            0 %<= height + 0.667 * curveRadius >%  %<= thickness >%
            0 %<= height + 0.85 * curveRadius >%   %<= thickness + 0.33 * curveRadius >%
            0 %<= height + 0.95 * curveRadius >%   %<= thickness + 0.66 * curveRadius >%
            %< if (stand === 1) { >%
                0 %<= height + curveRadius >%           %<= length + curveRadius >%
            %< } else if (stand === 2) { >%
                0 %<= height + curveRadius >%           %<= length >%
                0 %<= height + 0.95 * curveRadius >%    %<= length + 0.333 * curveRadius + thickness >%
                0 %<= height + 0.85 * curveRadius >%    %<= length + 0.667 * curveRadius + thickness >%
                0 %<= height + 0.667 * curveRadius >%   %<= length + curveRadius + thickness >%
                0 %<= height + 0.5 * curveRadius >%     %<= length + 1.333 * thickness + curveRadius >%
                0 %<= height + 0.333 * curveRadius >%   %<= length + 1.667 * thickness + curveRadius >%
                0 %<= height >%                         %<= length + 2 * thickness + curveRadius >%
                0 %<= 0.75 * height >%                  %<= length + 2 * thickness + curveRadius >%
                0 %<= 0.5 * height >%                   %<= length + 2 * thickness + curveRadius >%
                0 0                                     %<= length + 2 * thickness + curveRadius >%
            %< } >%
          ]
          ccw FALSE
          splineSubdivision 0
        }
      }
      DEF RIGHT_HORIZONTAL_SIGNS Transform {
        translation %<= 0.95 * halfThickness >% -3 %<= height + curveRadius >%
        children IS rightHorizontalSigns
      }
      DEF RIGHT_VERTICAL_SIGNS Transform {
        translation %<= 0.95 * halfThickness >% 0 3
        children IS rightVerticalSigns
      }
      DEF LEFT_HORIZONTAL_SIGNS Transform {
        rotation 0 0 1 3.1415
        translation %<= - 0.95 * halfThickness >% -6 %<= height + curveRadius >%
        children IS leftHorizontalSigns
      }
      DEF LEFT_VERTICAL_SIGNS Transform {
        rotation 0 0 1 3.14159
        translation %<= - 0.95 * halfThickness >% %<= -(length + 2 * thickness + curveRadius) >% 3
        children IS leftVerticalSigns
      }
    ]
    name IS name
    model "highway pole"
  }
}
