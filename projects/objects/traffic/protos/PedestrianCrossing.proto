#VRML_SIM R2021a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A pedestrian crossing 20 x 8 meters (0.1m thick).

PROTO PedestrianCrossing [
  field SFVec3f    translation          0 0 0
  field SFRotation rotation             0 1 0 0
  field SFString   name                 "pedestrian crossing"
  field SFVec2f    size                 20 8                   # Defines the size of the pedestrian crossing.
  field SFInt32    textureFiltering     4                      # Defines the filtering level for the texture used for the pedestrian crossing.
  field SFBool     enableBoundingObject TRUE                   # Defines whether the pedestrian crossing should have a bounding object.
]
{
  %{
    local size = fields.size.value
    if size.x <= 0 or size.y <= 0 then
      io.stderr:write("Both components of 'size' must be strictly positive\n")
      size = fields.size.defaultValue
    end
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    scale IS scale
    recognitionColors [ 0.96 0.82 0.05 ]
    children [
      DEF ZEBRA_TRANS Transform {
        translation 0 -0.1 0
        rotation 0 0 1 1.5708
        children [
          Shape {
            appearance PBRAppearance {
              baseColorMap ImageTexture {
                url [
                  "textures/crossing.png"
                ]
                filtering IS textureFiltering
              }
              textureTransform TextureTransform {
                rotation 1.5708
              }
              metalness 0
              roughness 0.9
            }
            geometry TexturedBox {
              size 0.4 %{= size.x }% %{= size.y }%
              front FALSE
              back FALSE
              left FALSE
            }
            castShadows FALSE
          }
        ]
      }
    ]
    name IS name
    model "pedestrian crossing"
    %{ if fields.enableBoundingObject.value then }%
    boundingObject Group {
      children [
        Transform {
          translation 0 -0.1 0
          children [
            Box {
              size %{= size.x }% 0.4 %{= size.y }%
            }
          ]
        }
        DEF RAMP1_TRANS Transform {
        translation 0 -0.2535 %{= size.y / 2 }%
        rotation 1 0 0 0.7854
        children [
          DEF RAMP_BOX Box {
            size %{= size.x }% 0.5 0.5
          }
        ]
      }
      DEF RAMP2_TRANS Transform {
        translation 0 -0.2535 %{= -size.y / 2 }%
        rotation 1 0 0 0.7854
        children [
          USE RAMP_BOX
        ]
      }
      ]
    }
    %{ end }%
  }
}
