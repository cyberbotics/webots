#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A door lever.
# This object can be used in the 'doorHandle' field of the Door object.
# template language: javascript

PROTO DoorLever [
  field SFVec3f    translation      0 0 0
  field SFRotation rotation         0 0 1 0
  field SFString   name             "door lever"
  field SFBool     canTurn          FALSE                # Defines whether the lever is connected to the door using a hinge-joint.
  field SFBool     jointAtLeft      TRUE                 # Defines on which side is the lever.
  field SFFloat    doorThickness    0.05                 # Defines the thickness of the door.
  field SFFloat    handleThickness  0.0125               # Defines the thickness of the handle.
  field SFFloat    handleLength     0.12                 # Defines the length of the handle.
  field SFFloat    distanceFromDoor 0.065                # Defines the distance between the handle and the door.
  field SFNode     appearance       BrushedAluminium {}  # Defines the appearance of the lever.
  field SFFloat    mass             0.7                  # Defines the mass of the lever.
  field SFBool     hasStaticParent  FALSE                # Defines whether the parent door has physics or not.
  field SFBool     castShadows      TRUE                 # Defines whether this object should cast shadows.
]
{
  %<
    let doorThickness = fields.doorThickness.value;
    if (doorThickness <= 0.0) {
      doorThickness = fields.doorThickness.defaultValue;
      console.error('\'doorThickness\' must be strictly positive. Value reset to ' + doorThickness + '.');
    }

    let handleThickness = fields.handleThickness.value;
    if (handleThickness <= 0.0) {
      handleThickness = fields.handleThickness.defaultValue;
      console.error('\'handleThickness\' must be strictly positive. Value reset to ' + handleThickness + '.');
    }

    let handleLength = fields.handleLength.value;
    if (handleLength <= 0.0) {
      handleLength = fields.handleLength.defaultValue;
      console.error('\'handleLength\' must be strictly positive. Value reset to ' + handleLength + '.');
    }

    let distanceFromDoor = fields.distanceFromDoor.value;
    if (distanceFromDoor <= 0.0) {
      distanceFromDoor = fields.distanceFromDoor.defaultValue;
      console.error('\'distanceFromDoor\' must be strictly positive. Value reset to ' + distanceFromDoor + '.');
    }

    const mirrorFactor = fields.jointAtLeft.value ? -1 : 1;

    const axisHeight = distanceFromDoor * 2 + doorThickness;
    const handlePositionX = axisHeight * 0.5;
    const handlePositionY = handleLength * 0.5;
  >%
  Slot {
    type "door handle"
    endPoint Solid {
      translation IS translation
      rotation IS rotation
      children [
        DEF HANDLE_SUPPORT Transform { # handle support
          rotation 0 1 0 1.57
          children [
            Shape {
              appearance IS appearance
              geometry Cylinder {
                radius %<= 3 * handleThickness >%
                height %<= 0.025 + doorThickness >%
              }
              castShadows IS castShadows
            }
          ]
        }
      %< if (fields.canTurn.value) { >%
        DEF LEVER HingeJoint {
          jointParameters HingeJointParameters {
            position 0.02
          %< if (mirrorFactor > 0) { >%
            axis -1 0 0
          %< } else { >%
            axis 1 0 0
          %< } >%
            minStop -0.03
            maxStop 0.6109
            springConstant 10
            dampingConstant 0.5
            staticFriction 0.05
          }
          endPoint Solid {
            children [
      %< } >%
              DEF HANDLE_AXIS Transform { # handle axis
                rotation 0 1 0 1.57
                children [
                  Shape {
                    appearance IS appearance
                    geometry Capsule {
                      radius %<= handleThickness >%
                      height %<= axisHeight >%
                    }
                    castShadows IS castShadows
                  }
                ]
              }
              DEF BACK_HANDLE Transform { # back handle
                translation %<= -handlePositionX >% %<= mirrorFactor * handlePositionY >% 0
                rotation 1 0 0 1.57
                children [
                  Shape {
                    appearance IS appearance
                    geometry Capsule {
                      radius %<= handleThickness >%
                      height %<= handleLength >%
                    }
                    castShadows IS castShadows
                  }
                ]
              }
              DEF FRONT_HANDLE Transform { # front handle
                translation %<= handlePositionX >% %<= mirrorFactor * handlePositionY >% 0
                rotation 1 0 0 1.57
                children [
                  Shape {
                    appearance IS appearance
                    geometry Capsule {
                      radius %<= handleThickness >%
                      height %<= handleLength >%
                    }
                    castShadows IS castShadows
                  }
                ]
              }
    %< if (fields.canTurn.value) { >%
            ]
            boundingObject Group {
              children [
                USE HANDLE_AXIS
                USE BACK_HANDLE
                USE FRONT_HANDLE
              ]
            }
            physics Physics {
              density -1
              mass IS mass

            }
          }
        }
      ]
      %< if (!fields.hasStaticParent.value) { >%
      boundingObject USE HANDLE_SUPPORT
      physics Physics {
      }
      %< } >%
    %< } else { >%
      ]
      boundingObject Group {
        children [
          USE HANDLE_SUPPORT
          USE HANDLE_AXIS
          USE BACK_HANDLE
          USE FRONT_HANDLE
        ]
      }
      %< if (!fields.hasStaticParent.value) { >%
      physics Physics {
        density -1
        mass IS mass
      }
      %< } >%
    %< } >%
      name IS name
      model "door lever"
    }
  }
}
