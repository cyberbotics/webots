#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A customizable window including walls above and below.
# template language: javascript

PROTO Window [
  field SFVec3f    translation            0 0 0
  field SFRotation rotation               0 0 1 0
  field SFString   name                   "window"
  field SFVec3f    size                   0.2 0.8 2.4       # Defines the size of the window.
  field SFFloat    windowThickness        0.05              # Defines the thickness of the window.
  field SFFloat    bottomWallHeight       0.7               # Defines the height of the top wall.
  field SFFloat    windowHeight           1.4               # Defines the height of the window.
  field SFVec3f    frameSize              0.05 0.02 0.05    # Defines the size of the window frame.
  field SFVec2f    windowSillSize         0.1 0.05          # Defines the size of the sill below the window.
  field SFNode     wallAppearance         Roughcast {}      # Defines the appearance of the wall.
  field SFNode     frameAppearance        VarnishedPine {}  # Defines the appearance of the frame.
  field SFBool     castShadows            TRUE              # Defines whether this object should cast shadows.
]
{
  %<
    let size = fields.size.value;
    if (size.x <= 0 || size.y <= 0 || size.z <= 0) {
      size = fields.size.defaultValue;
      console.error('\'size\' must be strictly positive. Value reset to (' + size.x + ', ' + size.y + ', ' + size.z + ').');
    }

    let windowThickness = fields.windowThickness.value;
    if (windowThickness <= 0.0) {
      windowThickness = fields.windowThickness.defaultValue;
      console.error('\'windowThickness\' must be strictly positive. Value reset to ' + windowThickness + '.');
    }

    let bottomWallHeight = fields.bottomWallHeight.value;
    if (bottomWallHeight < 0.0) {
      bottomWallHeight = fields.bottomWallHeight.defaultValue;
      console.error('\'bottomWallHeight\' must be positive. Value reset to ' + bottomWallHeight + '.');
    }

    let windowHeight = fields.windowHeight.value;
    if (windowHeight <= 0.0) {
      windowHeight = fields.windowHeight.defaultValue;
      console.error('\'windowHeight\' must be strictly positive. Value reset to ' + windowHeight + '.');
    }

    let frameSize = fields.frameSize.value;
    if (frameSize.x <= 0 || frameSize.y <= 0 || frameSize.z <= 0) {
      frameSize = fields.frameSize.defaultValue;
      console.error('\'frameSize\' must be strictly positive. Value reset to (' + frameSize.x + ', ' + frameSize.y + ', ' + frameSize.z + ').');
    }

    let windowSillSize = fields.windowSillSize.value;
    if (windowSillSize.x < 0.0 || windowSillSize.y < 0.0) {
      windowSillSize = fields.windowSillSize.defaultValue;
      console.error('\'windowSillSize\' must contain positive or zero values. Value reset to (' + windowSillSize.x + ', ' + windowSillSize.y + ').');
    }

    let reset = true;
    if (windowHeight <= 2 * frameSize.z)
      console.error('\'frameSize.y\' is too big in comparison to \'windowHeight\'.');
    else if (windowHeight + bottomWallHeight > size.z)
      console.error('\'windowHeight\' and \'bottomWallHeight\' are too big in comparison to \'size.z\'.');
    else if (size.x <= 2 * frameSize.x)
      console.error('\'frameSize.x\' is too big in comparison to \'size.x\'.');
    else
      reset = false;

    if (reset) {
      windowHeight = fields.windowHeight.defaultValue;
      bottomWallHeight = fields.bottomWallHeight.defaultValue;
      frameSize = fields.frameSize.defaultValue;
      size = fields.size.defaultValue;
    }

    const bottomWallTextureFactor = Math.max(size.x, bottomWallHeight);
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      %< if (bottomWallHeight > 0) { >%
        Solid { # bottom wall
          translation 0 0 %<= 0.5 * bottomWallHeight >%
          children [
            Shape {
              appearance IS wallAppearance
              geometry Box {
                size %<= size.x >% %<= size.y >% %<= bottomWallHeight >%
              }
              castShadows IS castShadows
            }
          ]
          name "bottom wall"
          boundingObject Box {
            size %<= size.x >% %<= size.y >% %<= bottomWallHeight >%
          }
        }
      %< } >%
      %< let topWallHeight = size.z - bottomWallHeight - windowHeight; >%
      %< if (topWallHeight > 0) { >%
        Solid { # top wall
          translation 0 0 %<= size.z - 0.5 * topWallHeight >%
          children [
            Shape {
              appearance IS wallAppearance
              geometry Box {
                size %<= size.x >% %<= size.y >% %<= topWallHeight >%
              }
              castShadows IS castShadows
            }
          ]
          name "top wall"
          boundingObject Box {
            size %<= size.x >% %<= size.y >% %<= topWallHeight >%
          }
        }
      %< } >%
      SolidBox { # glass
        translation 0 0 %<= bottomWallHeight + 0.5 * windowHeight >%
        name "glass"
        size %<= windowThickness >% %<= size.y - 2 * frameSize.y >% %<= windowHeight - 2 * frameSize.z >%
        appearance PBRAppearance {
          baseColor 0.8 0.8 0.8
          metalness 0
          transparency 0.8
        }
        castShadows IS castShadows
      }
      %< if (windowSillSize.x > 0 && windowSillSize.y > 0) { >%
        SolidBox { # window sill
          translation 0 0 %<= bottomWallHeight + windowSillSize.y * 0.5 >%
          name "sill"
          size %<= 2 * windowSillSize.x + size.x + 2 * frameSize.x >% %<= size.y >%  %<= windowSillSize.y >%
          appearance IS frameAppearance
          castShadows IS castShadows
        }
      %< } >%
      %< if (frameSize.x > 0 || frameSize.y > 0) { >%
        SolidBox { # bottom frame
          translation 0 0 %<= bottomWallHeight + frameSize.z * 0.5 + windowSillSize.y >%
          name "bottom frame"
          size %<= size.x + 2 * frameSize.x >% %<= size.y - 2 * frameSize.y >%  %<= frameSize.z >%
          appearance IS frameAppearance
          castShadows IS castShadows
        }
        SolidBox { # top frame
          translation 0 0 %<= bottomWallHeight + windowHeight - 0.5 * frameSize.z >%
          name "top frame"
          size %<= size.x + 2 * frameSize.x >% %<= size.y - 2 * frameSize.y >% %<= frameSize.z >%
          appearance IS frameAppearance
          castShadows IS castShadows
        }
        SolidBox { # right frame
          translation 0 %<= 0.5 * size.y - 0.5 * frameSize.y >% %<= bottomWallHeight + 0.5 * windowHeight >%
          name "right frame"
          size %<= size.x + 2 * frameSize.x >% %<= frameSize.y >%  %<= windowHeight >%
          appearance IS frameAppearance
          castShadows IS castShadows
        }
        SolidBox { # left frame
          translation 0 %<= -0.5 * size.y + 0.5 * frameSize.y >% %<= bottomWallHeight + 0.5 * windowHeight >%
          name "left frame"
          size %<= size.x + 2 * frameSize.x >%  %<= frameSize.y >% %<= windowHeight >%
          appearance IS frameAppearance
          castShadows IS castShadows
        }
      %< } >%
    ]
    name IS name
    model "window"
  }
}
