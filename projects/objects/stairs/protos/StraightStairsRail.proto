#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Default stairs handrail.
# template language: javascript

PROTO StraightStairsRail [
  field SFVec3f    translation      0 0 0
  field SFRotation rotation         0 0 1 0
  field SFString   name             "straight stairs rail"
  field SFFloat    run              2.0                                                                # Defines the horizontal lenght of the rail.
  field SFFloat    rise             0.75                                                               # Defines the vertical lenght of the rail.
  field SFFloat    width            0.04                                                               # Defines the width of the rail.
  field SFFloat    newelHeight      0.93                                                               # Defines the height of the top bar.
  field SFFloat    balusterHeight   0.8                                                                # Defines the height of the balusters.
  field SFFloat    balusterRadius   0.01                                                               # Defines the radius of the balusters.
  field SFInt32    nBalusters       20                                                                 # Defines the number of balusters.
  field SFNode     appearance       VarnishedPine { textureTransform TextureTransform { scale 4 4 } }  # Defines the appearance of the rail.
  field SFString   contactMaterial "default"                                                           # Is `Solid.contactMaterial`.
]
{
  %<
    let run = fields.run.value;
    let rise = fields.rise.value;
    let width = fields.width.value;
    let newelHeight = fields.newelHeight.value;
    let balusterRadius = fields.balusterRadius.value;
    let balusterHeight = fields.balusterHeight.value;
    let nBalusters = fields.nBalusters.value;

    // check inputs
    if (fields.run.value <= 0.0) {
      console.error('\'run\' must be positive.');
      run = fields.run.defaultValue;
    }
    if (fields.rise.value < 0.0) {
      console.error('\'rise\' must be positive.');
      rise = fields.rise.defaultValue;
    }
    if (fields.width.value <= 0.0) {
      console.error('\'width\' must be positive.');
      width = fields.width.defaultValue;
    }
    if (fields.newelHeight.value <= 0.0) {
      console.error('\'newelHeight\' must be positive.');
      newelHeight = fields.newelHeight.defaultValue;
    }
    if (fields.balusterHeight.value <= 0.0) {
      console.error('\'balusterHeight\' must be positive.');
      balusterHeight = fields.balusterHeight.defaultValue;
    }
    if (fields.balusterRadius.value <= 0.0) {
      console.error('\'balusterRadius\' must be positive.');
      balusterRadius = fields.balusterRadius.defaultValue;
    }
    if (fields.nBalusters.value < 0.0) {
      console.error('\'nBalusters\' must be non-negative.');
      nBalusters = fields.nBalusters.defaultValue;
    }

    let balusterRun = run / (nBalusters + 1);
    let balusterRise = rise / (nBalusters + 1);
    let newelOffset = (newelHeight - balusterHeight + width * 0.5) * 0.5;
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
    %<
      let deltaX = balusterRun;
      let deltaZ = balusterRise + 0.5 * newelHeight;
      for (let n = 0; n < nBalusters; ++n) {
    >%
      Solid {
        translation %<= deltaX >% 0.0 %<= deltaZ + newelOffset >%
        children [
          Shape {
            appearance IS appearance
            geometry DEF BALUSTER_GEOM Cylinder {
              radius %<= balusterRadius >%
              height %<= balusterHeight >%
            }
          }
        ]
        name %<= '"baluster' + n + '"' >%
        contactMaterial IS contactMaterial
        boundingObject USE BALUSTER_GEOM
      }
    %<
      deltaX = deltaX + balusterRun
      deltaZ = deltaZ + balusterRise
    }
    >%
      Solid {
        translation 0 0 %<= newelHeight * 0.5 >%
        children [
          DEF NEWEL Shape {
            appearance IS appearance
            geometry Box {
              size %<= width >% %<= width >% %<= newelHeight >%
            }
          }
        ]
        name "start newel"
        contactMaterial IS contactMaterial
        boundingObject USE NEWEL
      }
      Solid {
        translation %<= deltaX >% 0 %<= deltaZ >%
        children [
          USE NEWEL
        ]
        name "end newel"
        contactMaterial IS contactMaterial
        boundingObject USE NEWEL
      }
      %< let pAngle = Math.atan2(rise, run); >%
      Solid {
        translation %<= 0.5 * run >% 0 %<= 2 * newelOffset + 0.5 * rise - 0.25 * width >%
        children [
          Shape {
            appearance IS appearance
            geometry DEF GEOM TexturedParallelepiped {
              size %<= Math.sqrt(run * run + rise * rise) >% %<= width * 0.5 >% %<= width * 0.98 >%
              angles 0 1.5708 %<= pAngle >%
              mapping "metric"
            }
          }
        ]
        name "middel rail"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
      Solid {
        %<
          let boxRun = run + 2 * width;
          let boxRise = rise + width;
        >%
        translation %<= 0.5 * run >% 0  %<= newelOffset + (balusterHeight + newelHeight + rise) * 0.5 >%
        children [
          Shape {
            appearance IS appearance
            geometry DEF GEOM TexturedParallelepiped {
              size %<= Math.sqrt(boxRun * boxRun + boxRise * boxRise) >% %<= width * 1.2 >% %<= width >%
              angles 0 1.5708 %<= pAngle >%
              mapping "metric"
            }
          }
        ]
        name "top rail"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
    ]
    name IS name
    model "straight stairs rail"
  }
}
