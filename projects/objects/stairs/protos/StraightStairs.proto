#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Generic and customizable stairs model.
# template language: javascript

PROTO StraightStairs [
  field SFVec3f    translation        0 0 0
  field SFRotation rotation           0 0 1 0
  field SFString   name               "straight stairs"
  field SFVec3f    stepSize           0.4 1.27 0.03                                                      # Defines the size of one step.
  field SFFloat    stepRise           0.15                                                               # Defines the height difference between two consecutives steps.
  field SFInt32    nSteps             5                                                                  # Defines the number of steps.
  field SFFloat    stringerWidth      0.02                                                               # Defines the width of the stringers.
  field SFNode     stepAppearance     VarnishedPine { textureTransform TextureTransform { scale 4 4 } }  # Defines the appearance of the steps.
  field SFNode     stringerAppearance VarnishedPine { textureTransform TextureTransform { scale 4 4 } }  # Defines the appearance of the stringers.
  field MFNode     leftRail           StraightStairsRail {}                                              # Defines the left rail.
  field MFNode     rightRail          StraightStairsRail {}                                              # Defines the right rail.
  field SFBool     startingStairs     TRUE                                                               # Defines whether the bottom part of the stairs should be flat.
  field SFString   contactMaterial    "default"                                                          # Is `Solid.contactMaterial`.
]
{
  %<
    import * as wbrotation from 'wbrotation.js';

    // check inputs
    let stepRise = fields.stepRise.value;
    if (stepRise <= 0.0) {
      stepRise = fields.stepRise.defaultValue;
      console.error('\'stepRise\' must be strictly positive. Value reset to ' + stepRise + '.');
    }

    let stringerWidth = fields.stringerWidth.value;
    if (stringerWidth <= 0.0) {
      stringerWidth = fields.stringerWidth.defaultValue;
      console.error('\'stringerWidth\' must be strictly positive. Value reset to ' + stringerWidth + '.');
    }

    let nSteps = fields.nSteps.value;
    if (nSteps <= 0.0) {
      nSteps = fields.nSteps.defaultValue;
      console.error('\'nSteps\' must be strictly positive. Value reset to ' + nSteps + '.');
    }

    let stepSize = fields.stepSize.value;
    if (stepSize.x <= 0 || stepSize.y <= 0 || stepSize.z <= 0) {
      stepSize = fields.stepSize.defaultValue;
      console.error('\'stepSize\' must be strictly positive. Value reset to (' + stepSize.x + ', ' + stepSize.y + ', ' + stepSize.z + ').');
    }

    const stairsRun = stepSize.x * nSteps;
    const stairsRise = stepRise * nSteps;

    const boxCoordIndex = [
      1, 2, 3, -1, 1, 0, 2, -1,
      0, 6, 2, -1, 0, 4, 6, -1,
      4, 7, 6, -1, 4, 5, 7, -1,
      5, 3, 7, -1, 5, 1, 3, -1,
      2, 6, 7, -1, 2, 7, 3, -1,
      1, 4, 0, -1, 1, 5, 4, -1
    ]
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      #steps
      Shape {
        appearance IS stepAppearance
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
            %<
            let delta = {x: 0.0, z: stepRise - 0.5 * stepSize.z};
            for (let n = 1; n <= nSteps; ++n) {
              for (let z = -0.5*stepSize.z; z <= 0.6*stepSize.z; z += stepSize.z) {
                for (let y = -0.5*stepSize.y; y <= 0.6*stepSize.y; y += stepSize.y) {
                  for (let x = -0.5*stepSize.x; x <= 0.6*stepSize.x; x += stepSize.x) {
            >%
                    %<= x + delta.x >% %<= y >% %<= z + delta.z >%
            %<
                  }
                }
              }
              delta.x += stepSize.x;
              delta.z += stepRise;
            }
            >%
            ]
          }
          texCoord TextureCoordinate {
            point [
              0.0 0.0
              0.0 1.0
              1.0 1.0
              1.0 0.0
            ]
          }
          coordIndex [
          %<
          let indexOffset = 0;
          for (let n = 1; n <= nSteps; ++n) {
            for (let i = 0; i < 48; i += 4) {
          >%
              %<= boxCoordIndex[i] + indexOffset >% %<= boxCoordIndex[i+1] + indexOffset >% %<= boxCoordIndex[i+2] + indexOffset >% -1
          %<
            }
            indexOffset = indexOffset + 8;
          }
          >%
          ]
          texCoordIndex [
            %< for (let n = 1; n <= nSteps; ++n) { >%
              0 2 1 -1 0 3 2 -1
              3 0 1 -1 3 1 2 -1
              0 2 1 -1 0 3 2 -1
              3 0 1 -1 3 1 2 -1
              0 2 1 -1 0 3 2 -1
              3 0 1 -1 3 1 2 -1
            %< } >%
          ]
        }
      }
    %< if (fields.startingStairs.value) { >%
      Solid {
        translation %<= -stepSize.x * 0.5 >% %<= (stepSize.y + stringerWidth) * -0.5 >% 0.0
        children [
          DEF GEOM Shape {
            appearance IS stringerAppearance
            geometry IndexedFaceSet {
              coord Coordinate {
                point [
                %<
                  const stringerRise = stairsRise - stepRise;
                  let coords = [];
                  coords[0] = [0, 0];
                  coords[1] = [stepSize.x, 0];
                  coords[2] = [stairsRun, stringerRise];
                  coords[3] = [stairsRun, stringerRise + 2 * stepRise];
                  coords[4] = [0, stepRise];
                  for (let y = -1; y <= 1; y += 2) {
                    for (let ci = 0; ci < 5; ++ci) {
                >%
                      %<= coords[ci][0]>% %<= y * stringerWidth * 0.5 >% %<=coords[ci][1]>%
                %<
                    }
                  }
                >%
                ]
              }
              coordIndex [
                0 1 4 -1 1 2 3 -1
                1 3 4 -1 0 4 9 -1
                0 9 5 -1 4 8 9 -1
                4 3 8 -1 0 6 1 -1
                0 5 6 -1 1 7 2 -1
                1 6 7 -1 3 2 8 -1
                2 7 8 -1 5 9 6 -1
                6 8 7 -1 6 9 8 -1
              ]
            }
          }
        ]
        name "right stringer"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
      Solid {
        translation %<= -stepSize.x * 0.5 >% %<= (stepSize.y + stringerWidth) * 0.5 >% 0.0
        children [
          USE GEOM
        ]
        name "left stringer"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
    %< } else {
         const pAngle = Math.atan2(stairsRise, stairsRun);
    >%
      Solid {
        translation %<= (stairsRun - stepSize.x) * 0.5 >% %<= (stepSize.y + stringerWidth) * -0.5 >% %<= stairsRise * 0.5 >%
        children [
          DEF GEOM Shape {
            appearance IS stringerAppearance
            geometry TexturedParallelepiped {
              size %<= Math.sqrt(stairsRun * stairsRun + stairsRise * stairsRise) >% %<= stringerWidth >% %<= 2 * stepRise >%
              angles 0 1.5708 %<= pAngle >%
              mapping "metric"
            }
          }
        ]
        name "right stringer"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
      Solid {
        translation %<= (stairsRun - stepSize.x) * 0.5 >% %<= (stepSize.y + stringerWidth) * 0.5 >% %<= stairsRise * 0.5 >%
        children [
          USE GEOM
        ]
        name "left stringer"
        contactMaterial IS contactMaterial
        boundingObject USE GEOM
      }
    %< } >%
      Solid {
        translation %<= -stepSize.x * 0.5 >% %<= (stepSize.y + stringerWidth) * 0.5 >% %<= stepRise >%
        children IS leftRail
        name "left rail"
      }
      Solid {
        translation %<= -stepSize.x * 0.5 >% %<= (-stepSize.y - stringerWidth) * 0.5 >% %<= stepRise >%
        children IS rightRail
        name "right rail"
      }
    ]
    name IS name
    model "straight stairs"
    contactMaterial IS contactMaterial
    boundingObject Group {
      children [
      %<
        delta = {x: 0.0, z: stepRise * 0.5};
        for (let n = 1; n <= nSteps; ++n) {
      >%
          Transform {
            translation %<= delta.x >% 0.0 %<= delta.z + stepRise * 0.5 - stepSize.z * 0.5 >%
            children [
              Box {
                size %<= stepSize.x >% %<= stepSize.y >% %<= stepSize.z >%
              }
            ]
          }
      %<
          delta.x += stepSize.x;
          delta.z += stepRise;
        }
      >%
      ]
    }
  }
}
