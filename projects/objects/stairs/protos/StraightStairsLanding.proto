#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# Generic and customizable landing model for straight stairs.
# template language: javascript

PROTO StraightStairsLanding [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "straight stairs landing"
  field SFVec3f    landingSize     0.4 1.27 0.03                                                     # Defines the size of the landing.
  field SFFloat    height          2.0                                                                # Defines the height of the landing.
  field SFVec2f    stringerSize    0.3 0.02                                                           # Defines the height and width of the stringer.
  field SFBool     stringerLeft    TRUE                                                               # Defines whether the left part of the stringer should be included.
  field SFBool     stringerRight   TRUE                                                               # Defines whether the right part of the stringer should be included.
  field SFBool     stringerBack    FALSE                                                              # Defines whether the back part of the stringer should be included.
  field SFVec2f    supportPoleSize 0.05 0.05                                                          # Defines the size of the support poles.
  field SFNode     appearance      VarnishedPine { textureTransform TextureTransform { scale 4 4 } }  # Defines the main appearance.
  field SFNode     floorAppearance Parquetry {}                                                       # Defines the floor appearance.
  field MFNode     rail            []                                                                 # Defines the rail.
  field SFString   contactMaterial "default"                                                          # Is `Solid.contactMaterial`.
]
{
  %<
    let height = fields.height.value;
    let stringerSize = fields.stringerSize.value;
    let landingSize = fields.landingSize.value;
    let supportPoleSize = fields.supportPoleSize.value;

    // check inputs
    if (fields.stringerSize.value.x < 0.0 || fields.stringerSize.value.y < 0.0) {
      console.error('\'stringerSize\' must contain positive values.');
      stringerSize = fields.stringerSize.defaultValue;
    }
    if (fields.landingSize.value.x <= 0.0 || fields.landingSize.value.y <= 0.0 || fields.landingSize.value.z <= 0.0) {
      console.error('\'landingSize\' must contain positive values.');
      landingSize.x = fields.landingSize.defaultValue.x;
      landingSize.y = fields.landingSize.defaultValue.y;
      landingSize.z = fields.landingSize.defaultValue.z;
    }
    if (fields.supportPoleSize.value.x < 0.0 || fields.supportPoleSize.value.y < 0.0) {
      console.error('\'supportPoleSize\' must contain positive values.');
      supportPoleSize.x = fields.supportPoleSize.defaultValue.x;
      supportPoleSize.y = fields.supportPoleSize.defaultValue.y;
    } else if (fields.supportPoleSize.value.x === 0.0 || fields.supportPoleSize.value.y === 0.0) {
      supportPoleSize.x = 0.0;
      supportPoleSize.y = 0.0;
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF LANDING_SHAPE Transform {
        translation 0 0 %<= height >%
        children [
          Shape {
            appearance IS floorAppearance
            geometry Box {
              size %<= landingSize.x >% %<= landingSize.y >% %<= landingSize.z >%
            }
          }
        ]
      }
      Transform {
        translation 0 0 %<= height >% 
        children IS rail
      }
      %< if (fields.stringerRight.value) { >%
        Solid {
          translation 0 %<= (-landingSize.y - stringerSize.y) * 0.5 >% %<= height >%
          children [
            Shape {
              appearance IS appearance
              geometry DEF STRINGER_GEOM Box {
                size %<= landingSize.x >% %<= stringerSize.y >% %<= stringerSize.x >%
              }
            }
          ]
          name "right stringer"
          contactMaterial IS contactMaterial
          boundingObject USE STRINGER_GEOM
        }
      %< } >%
      %< if (fields.stringerLeft.value) { >%
        Solid {
          translation 0 %<= (landingSize.y + stringerSize.y) * 0.5 >% %<= height >%
          children [
            Shape {
              appearance IS appearance
              geometry DEF STRINGER_GEOM Box {
                size %<= landingSize.x >% %<= stringerSize.y >% %<= stringerSize.x >%
              }
            }
          ]
          name "left stringer"
          contactMaterial IS contactMaterial
          boundingObject USE STRINGER_GEOM
        }
      %< } >%
      %< if (fields.stringerBack.value) { >%
        Solid {
          translation %<= (landingSize.x + stringerSize.y) * 0.5 >% 0 %<= height >%
          children [
            Shape {
              appearance IS appearance
              geometry DEF STRINGER_GEOM Box {
                size %<= stringerSize.y >% %<= landingSize.y >% %<= stringerSize.x >%
              }
            }
          ]
          name "back stringer"
          contactMaterial IS contactMaterial
          boundingObject USE STRINGER_GEOM
        }
      %< } >%
      %< if (supportPoleSize.x > 0 && supportPoleSize.y) { >%
        Solid {
          translation %<= (landingSize.x - supportPoleSize.x) * 0.5 >% %<= (-landingSize.y + supportPoleSize.y) * 0.5 >% %<= height*0.5>%
          children [
            DEF POLE Shape {
              appearance IS appearance
              geometry Box {
                size %<= supportPoleSize.x >% %<= supportPoleSize.y >% %<= height - landingSize.z * 0.5 >%
              }
            }
          ]
          name "support pole 1"
          contactMaterial IS contactMaterial
          boundingObject USE POLE
        }
        Solid {
          translation %<= (-landingSize.x + supportPoleSize.x) * 0.5 >% %<= (-landingSize.y + supportPoleSize.y) * 0.5 >% %<= height*0.5 >%
          children [
            USE POLE
          ]
          name "support pole 2"
          contactMaterial IS contactMaterial
          boundingObject USE POLE
        }
        Solid {
          translation %<= (-landingSize.x + supportPoleSize.x) * 0.5>% %<= (landingSize.y - supportPoleSize.y) * 0.5 >% %<= height*0.5 >%
          children [
            USE POLE
          ]
          name "support pole 3"
          contactMaterial IS contactMaterial
          boundingObject USE POLE
        }
        Solid {
          translation %<= (landingSize.x - supportPoleSize.x) * 0.5 >% %<= (landingSize.y - supportPoleSize.y) * 0.5 >% %<= height*0.5 >%
          children [
            USE POLE
          ]
          name "support pole 4"
          contactMaterial IS contactMaterial
          boundingObject USE POLE
        }
      %< } >%
    ]
    name IS name
    model "straight stairs landing"
    contactMaterial IS contactMaterial
    boundingObject USE LANDING_SHAPE
  }
}
