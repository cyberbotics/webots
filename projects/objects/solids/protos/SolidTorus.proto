#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# A torus object implemented at the Solid-node level.
# Graphically, the SolidTorus is defined as an IndexedFaceSet.
# Physically, the SolidTorus is defined as a set of N spheres, where N is the subdivision field.

PROTO SolidTorus [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 1 0 0
  field SFString   name            "torus"
  field SFFloat    majorRadius     2                                                                                                             # Defines the major radius of the torus.
  field SFFloat    minorRadius     1                                                                                                             # Defines the minor radius of the torus.
  field SFInt32    subdivision     24                                                                                                            # Defines the number of polygons used to represent the torus and so its resolution.
  field SFString   contactMaterial "default"                                                                                                     # Is `Solid.contactMaterial`.
  field SFNode     appearance      PBRAppearance { baseColorMap ImageTexture { url [ "textures/tagged_wall.jpg" ] } metalness 0 roughness 0.5 }  # Defines the appearance of the torus.
  field SFNode     physics         NULL                                                                                                          # Is `Solid.physics`.
]
{
  %{
    local wbgeometry = require('wbgeometry')

    -- parameter checking
    local subdivision = fields.subdivision.value
    if subdivision > 200 then
      print "High value for 'subdivision'. This can slow down the simulation"
    elseif subdivision < 8 then
      io.stderr:write("'subdivision' must be greater or equal to 8\n")
      subdivision = 8
    end

    local majorRadius = fields.majorRadius.value
    if majorRadius <= 0 then
      io.stderr:write("'majorRadius' must be strictly positive\n")
      majorRadius = fields.majorRadius.defaultValue
    end

    local minorRadius = fields.minorRadius.value
    if minorRadius <= 0 then
      io.stderr:write("'minorRadius' must be strictly positive\n")
      minorRadius = fields.minorRadius.defaultValue
    end

    local referenceCircle = wbgeometry.circle(1, subdivision, 0, 0, 0)
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Shape {
        appearance IS appearance
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %{ for i, elU in ipairs(referenceCircle) do }%
               %{ for j, elV in ipairs(referenceCircle) do }%
                 %{= (majorRadius + minorRadius * elV.x) * elU.x }% %{= minorRadius * elV.y }% %{= (majorRadius + minorRadius * elV.x) * elU.y }%
               %{ end }%
             %{ end }%
            ]
          }
          coordIndex [
            %{ for i = 0,subdivision - 1 do }%
              %{ for j = 0,subdivision do }%
                %{= i + j * subdivision }% %{= (i + 1) + j * subdivision }% %{= (i + 1) + (j + 1) * subdivision }% %{= i + (j + 1) * subdivision }% -1
              %{ end }%
            %{ end }%
          ]
          creaseAngle 1.5
        }
      }
    ]
    name IS name
    model "torus"
    contactMaterial IS contactMaterial
    boundingObject TorusBoundingObject {
      majorRadius %{= majorRadius }%
      minorRadius %{= minorRadius }%
      subdivision %{= subdivision }%
    }
    physics IS physics
  }
}
