#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# A torus object implemented at the Solid-node level.
# Graphically, the SolidTorus is defined as an IndexedFaceSet.
# Physically, the SolidTorus is defined as a set of N spheres, where N is the subdivision field.
# template language: javascript

PROTO SolidTorus [
  field SFVec3f    translation           0 0 0
  field SFRotation rotation              0 0 1 0
  field SFString   name                  "torus"
  field SFFloat    majorRadius           2                                                                                                             # Defines the major radius of the torus.
  field SFFloat    minorRadius           1                                                                                                             # Defines the minor radius of the torus.
  field SFInt32    subdivision           24                                                                                                            # Defines the number of polygons used to represent the torus and so its resolution.
  field SFString   contactMaterial       "default"                                                                                                     # Is `Solid.contactMaterial`.
  field SFNode     appearance            PBRAppearance { baseColorMap ImageTexture { url [ "webots://projects/default/worlds/textures/tagged_wall.jpg" ] } metalness 0 roughness 0.5 }  # Defines the appearance of the torus.
  field SFNode     physics               NULL                                                                                                          # Is `Solid.physics`.
  field SFBool     enableBoundingObject  TRUE                                                                                                          # Defines whether the solid should have a bounding object.
]
{
  %<
    import * as wbgeometry from 'wbgeometry.js';

    // parameter checking
    let subdivision = fields.subdivision.value;
    if (subdivision > 200)
      console.log('High value for \'subdivision\'. This can slow down the simulation');

    if (subdivision < 8) {
      console.error('\'subdivision\' must be greater or equal to 8. Using 8 instead.');
      subdivision = 8;
    }

    let majorRadius = fields.majorRadius.value;
    if (majorRadius <= 0) {
      majorRadius = fields.majorRadius.defaultValue;
      console.error('\'majorRadius\' must be strictly positive. Value reset to ' + majorRadius + '.');
    }

    let minorRadius = fields.minorRadius.value;
    if (minorRadius <= 0) {
      minorRadius = fields.minorRadius.defaultValue;
      console.error('\'minorRadius\' must be strictly positive. Value reset to ' + minorRadius + '.');
    }

    const referenceCircle = wbgeometry.circle(1, subdivision, {x: 0, y: 0}, 0);
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Shape {
        appearance IS appearance
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %< for (let i = 0; i < referenceCircle.length; ++i) { >%
               %< for (let j = 0; j < referenceCircle.length; ++j) { >%
                 %<= (majorRadius + minorRadius * referenceCircle[j].x) * referenceCircle[i].y >% %<= (majorRadius + minorRadius * referenceCircle[j].x) * referenceCircle[i].x >% %<= minorRadius * referenceCircle[j].y >%
               %< } >%
             %< } >%
            ]
          }
          coordIndex [
            %< for (let i = 0; i <= subdivision - 1; ++i) { >%
              %< for (let j = 0; j <= subdivision; ++j) { >%
                %<= i + j * subdivision >% %<= (i + 1) + j * subdivision >% %<= (i + 1) + (j + 1) * subdivision >% %<= i + (j + 1) * subdivision >% -1
              %< } >%
            %< } >%
          ]
          creaseAngle 1.5
        }
      }
    ]
    name IS name
    model "torus"
    contactMaterial IS contactMaterial
    %< if (fields.enableBoundingObject.value) { >%
    boundingObject TorusBoundingObject {
      majorRadius %<= majorRadius >%
      minorRadius %<= minorRadius >%
      subdivision %<= subdivision >%
    }
    %< } >%
    physics IS physics
  }
}
