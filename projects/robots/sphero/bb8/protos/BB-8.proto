#VRML_SIM R2022a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# documentation url: https://www.cyberbotics.com/doc/guide/bb8
# Model of the Sphero's BB-8 robot.
# The default dimension parameters are matching the robot as seen in the movie.
# The mass inside the body ball can be moved along 2 DOFs (pitch and yaw motors).
# template language: javascript

PROTO BB-8 [
  field SFVec3f    translation     0 0 0   # Is `Transform.translation`.
  field SFRotation rotation        0 0 1 0 # Is `Transform.rotation`.
  field SFString   name            "BB-8"  # Is `Solid.name`.
  field SFString   controller      "bb-8"  # Is `Robot.controller`.
  field MFString   controllerArgs  []      # Is `Robot.controllerArgs`.
  field SFString   customData      ""      # Is `Robot.customData`.
  field SFBool     supervisor      FALSE   # Is `Robot.supervisor`.
  field SFBool     synchronization TRUE    # Is `Robot.synchronization`.
  field SFString   contactMaterial "bb-8"  # Defines the `Solid.contactMaterial` for the robot parts.
  field MFNode     bodySlot        []      # Extends the robot with new nodes in the body slot.
  field SFFloat    bodyRadius      0.25    # Defines the radius of the sphere which defines the robot body.
  field SFFloat    bodyMass        5.0     # Defines the mass of the robot body.
  field MFNode     headSlot        []      # Extends the robot with new nodes in the head slot.
  field SFFloat    headOffset      0.025   # Defines the distance between the body center and the head center.
  field SFFloat    headRadius      0.15    # Defines the radius of the sphere which defines the robot head.
  field SFFloat    headMass        1.0     # Defines the mass of the robot head.
  field SFFloat    weightMass      20.0    # Defines the mass of the robot body.
  field SFFloat    maxVelocity     8.72    # Defines the `RotationalMotor.maxVelocity` fields. Note: the real robot moves at 4.9 [mph].
]
{
  %<
    let bodyRadius = fields.bodyRadius.value;
    if (bodyRadius <= 0.0) {
      bodyRadius = fields.bodyRadius.defaultValue;
      console.error('\'bodyRadius\' must be strictly positive. Value reset to ' + bodyRadius + '.');
    }

   const bodyScale = 2.0 * bodyRadius;

   let headRadius = fields.headRadius.value;
   if (headRadius <= 0.0) {
     headRadius = fields.headRadius.defaultValue;
     console.error('\'headRadius\' must be strictly positive. Value reset to ' + headRadius + '.');
   }

  const headScale = 2.0 * headRadius;
  >%
  Robot {
    translation IS translation
    rotation IS rotation
    children [
      Transform {
        translation 0 0 %<= bodyRadius >%
        children IS bodySlot
      }
      Accelerometer {
        translation 0 0 %<= bodyRadius >%
        name "counterweight accelerometer"
      }
      Gyro {
        translation 0 0 %<= bodyRadius >%
        name "counterweight gyro"
      }
      DEF ORB_WEIGHT Transform {
        translation 0 0 %<= 0.5 * bodyRadius >%
        children [
          Shape {
            appearance PBRAppearance {
              baseColor 0.1 0.1 0.1
              metalness 0
              roughness 0.3
            }
            geometry Sphere {
              radius %<= bodyRadius * 0.25 >%
              subdivision 2
            }
          }
        ]
      }
      HingeJoint {
        jointParameters HingeJointParameters {
          axis 0 0 1
        }
        device [
          RotationalMotor {
            name "body yaw motor"
            maxVelocity IS maxVelocity
          }
        ]
        endPoint Solid {
          translation 0 0 %<= bodyRadius >%
          children [
            HingeJoint {
              jointParameters HingeJointParameters {
                axis 0 1 0
              }
              device [
                RotationalMotor {
                  name "body pitch motor"
                  maxVelocity IS maxVelocity
                }
              ]
              endPoint Solid {
                children [
                  Transform {
                    scale %<= bodyScale >% %<= bodyScale >% %<= bodyScale >%
                    children [
                      BB-8BodyShape {
                      }
                    ]
                  }
                  Accelerometer {
                    name "body accelerometer"
                  }
                  Gyro {
                    name "body gyro"
                  }
                ]
                boundingObject Sphere {
                  radius %<= bodyRadius >%
                  subdivision 2
                }
                physics Physics {
                  density -1
                  mass IS bodyMass
                }
                contactMaterial IS contactMaterial
              }
            }
          ]
          name "body"
          boundingObject Sphere {
            radius %<= bodyRadius * 0.01 >%
          }
          physics Physics {
            density -1
            mass %<= fields.bodyMass.value * 0.01 >%
          }
        }
      }
      HingeJoint {
        jointParameters HingeJointParameters {
          axis 0 0 1
        }
        device [
          RotationalMotor {
            name "head yaw motor"
            maxVelocity IS maxVelocity
          }
        ]
        endPoint Solid {
          translation 0 0 %<= 2 * bodyRadius + fields.headOffset.value >%
          children [
            Group {
              children IS headSlot
            }
            Accelerometer {
              name "head accelerometer"
            }
            Gyro {
              name "head gyro"
            }
            Transform {
              scale %<= headScale >% %<= headScale >% %<= headScale >%
              children [
                BB-8HeadShape {
                }
              ]
            }
          ]
          name "head"
          contactMaterial IS contactMaterial
          boundingObject Sphere {
            radius %<= headRadius >%
            subdivision 2
          }
          physics Physics {
            density -1
            mass IS headMass
          }
        }
      }
    ]
    name IS name
    model "Sphero BB-8"
    controller IS controller
    controllerArgs IS controllerArgs
    customData IS customData
    supervisor IS supervisor
    synchronization IS synchronization
    boundingObject USE ORB_WEIGHT
    physics Physics {
      density -1
      mass IS weightMass
    }
  }
}
