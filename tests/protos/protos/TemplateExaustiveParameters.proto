#VRML_SIM R2022a utf8
# template language: javascript

PROTO TemplateExaustiveParameters [

  field SFString controller ""

  field SFBool     sfb FALSE
  field SFInt32    sfi 1
  field SFFloat    sff 1.0
  field SFVec2f    sfv2 1.0 2.0
  field SFVec3f    sfv3 1.0 2.0 3.0
  field SFRotation sfr 0.0 0.0 1.0 2.0
  field SFColor    sfc 0.0 0.5 1.0
  field SFString   sfs "test"
  field SFString   sfs2 "custom data"
  field SFString   sfs3 "lua string"
  field SFNode     sfn1 NULL
  field SFNode     sfn2 NULL

  # note: only one multiple field is tested
  #       this should be sufficient because the internal code
  #       for multiple nodes is identical
  field MFInt32    mfi [ 1 2 3 ]
]
{
  Robot {
    children [
      TestSuiteEmitter {
      }
    ]
    controller IS controller
    %<
      let message = 'success';

      if (fields.sfb.value !== false)
        message = 'SFBool test failed';
      else if (fields.sfi.value !== 1)
        message = 'SFInt32 test failed';
      else if (fields.sff.value !== 1.0)
        message = 'SFFloat test failed';
      else if (fields.sfv2.value.x !== 1.0 || fields.sfv2.value.y !== 2.0)
        message = 'SFVec2f test failed';
      else if (fields.sfv3.value.x !== 1.0 || fields.sfv3.value.y !== 2.0 || fields.sfv3.value.z !== 3.0)
        message = 'SFVec3f test failed';
      else if (fields.sfr.value.x !== 0.0 || fields.sfr.value.y !== 0.0 ||
               fields.sfr.value.z !== 1.0 || fields.sfr.value.a !== 2.0)
        message = 'SFRotation test failed';
      else if (fields.sfc.value.r !== 0.0 || fields.sfc.value.g !== 0.5 || fields.sfc.value.b !== 1.0)
        message = 'SFColor test failed';
      else if (fields.sfs.value !== 'test')
        message = 'SFString test failed';
      else if (fields.sfs.value !== fields.sfs.defaultValue)
        message = 'default value test failed';
      else if (fields.controller.value === fields.controller.defaultValue)
        message = 'non-default value test failed';
      else if (fields.sfn1.value === undefined || fields.sfn1.value.fields.material.value === undefined ||
              fields.sfn1.value.fields.material.value.fields.shininess.value !== 0.5)
        message = 'regular SFNode test failed';
      else if (fields.sfn1.value.node_name != 'Appearance')
        message = 'regular SFNode.node_name test failed';
      else if (fields.sfn2.value === undefined || fields.sfn2.value.fields.boxLengths.value === undefined ||
               fields.sfn2.value.fields.boxLengths.value.x !== 0.2 || fields.sfn2.value.fields.boxSize !== undefined ||
               fields.sfn2.value.fields.size !== undefined)
        message = 'PROTO SFNode test failed';
      else if (fields.sfn2.value.node_name != 'SecondDerivedBoxShape')
        message = 'PROTO SFNode.node_name test failed';
      else if (fields.mfi.value[0] !== 1 || fields.mfi.value[1] !== 2 || fields.mfi.value[2] !== 3)
        message = 'MFInt32 test failed';

      let arg = 'test --prefix in ' + fields.sfs3.value + '.';
    >%
    model "%<= message >%"
    customData "%<= fields.sfs2.value >%"
  }
}
